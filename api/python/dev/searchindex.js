Search.setIndex({"alltitles": {"ABS": [[1322, "abs"]], "ACOS": [[1325, "acos"]], "ACOSD": [[1325, "acosd"]], "ARRAY_AGG": [[1318, "array-agg"]], "ARRAY_CONTAINS": [[1318, "array-contains"]], "ARRAY_GET": [[1318, "array-get"]], "ARRAY_LENGTH": [[1318, "array-length"]], "ARRAY_LOWER": [[1318, "array-lower"]], "ARRAY_MEAN": [[1318, "array-mean"]], "ARRAY_REVERSE": [[1318, "array-reverse"]], "ARRAY_SUM": [[1318, "array-sum"]], "ARRAY_TO_STRING": [[1318, "array-to-string"]], "ARRAY_UNIQUE": [[1318, "array-unique"]], "ARRAY_UPPER": [[1318, "array-upper"]], "ASIN": [[1325, "asin"]], "ASIND": [[1325, "asind"]], "ATAN": [[1325, "atan"]], "ATAN2": [[1325, "atan2"]], "ATAN2D": [[1325, "atan2d"]], "ATAND": [[1325, "atand"]], "AVG": [[1317, "avg"]], "Aggregate": [[1317, null]], "Aggregation": [[173, null], [325, null], [813, null], [920, null]], "Aliases": [[1317, null], [1317, null], [1322, null], [1322, null], [1323, null], [1323, null]], "Array": [[791, null], [1292, null], [1318, null]], "Asserts": [[1331, "asserts"]], "Attributes": [[313, null], [908, null], [1293, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[812, "avro"]], "BIT_AND": [[1319, "bit-and"]], "BIT_COUNT": [[1319, "bit-count"]], "BIT_LENGTH": [[1323, "bit-length"]], "BIT_OR": [[1319, "bit-or"]], "BIT_XOR": [[1319, "bit-xor"]], "Binary": [[792, null], [805, "binary"], [1294, null]], "Boolean": [[793, null], [1295, null]], "CAST": [[1326, "cast"]], "CBRT": [[1322, "cbrt"]], "CEIL": [[1322, "ceil"]], "COALESCE": [[1320, "coalesce"]], "CONCAT": [[1323, "concat"]], "CONCAT_WS": [[1323, "concat-ws"]], "COS": [[1325, "cos"]], "COSD": [[1325, "cosd"]], "COT": [[1325, "cot"]], "COTD": [[1325, "cotd"]], "COUNT": [[1317, "count"]], "CREATE TABLE": [[1330, "create-table"]], "CSV": [[812, "csv"]], "Categories": [[794, null], [1296, null]], "Clipboard": [[812, "clipboard"]], "Cloud Credentials": [[812, "cloud-credentials"]], "Columns / names": [[796, null]], "Comparison": [[805, "comparison"], [1304, "comparison"]], "Computation": [[314, null], [797, null], [1297, null]], "Conditional": [[1320, null]], "Config": [[172, null]], "Config load, save, state": [[172, "config-load-save-state"]], "Config options": [[172, "config-options"]], "Conjunction": [[805, "conjunction"]], "Conversion": [[810, "conversion"]], "DATE": [[1323, "date"]], "DATE_PART": [[1324, "date-part"]], "DEGREES": [[1325, "degrees"]], "DISTINCT": [[1316, "distinct"]], "DIV": [[1322, "div"]], "DROP TABLES": [[1330, "drop-tables"]], "Data types": [[323, null]], "DataFrame": [[318, null]], "DataType": [[323, "datatype"]], "Database": [[812, "database"]], "Delta Lake": [[812, "delta-lake"]], "Descriptive": [[315, null], [909, null], [1298, null]], "Documentation": [[1328, null], [1328, null], [1328, null]], "ENDS_WITH": [[1323, "ends-with"]], "EXCEPT": [[1329, "except"]], "EXP": [[1322, "exp"]], "EXPLAIN": [[1330, "explain"]], "EXTRACT": [[1324, "extract"]], "Errors": [[324, "errors"]], "Examples": [[1, "examples"], [919, "examples"], [1331, "examples"]], "Excel / ODS": [[812, "excel-ods"]], "Exceptions": [[324, null]], "Export": [[316, null], [1299, null]], "Expression SQL": [[1328, "expression-sql"]], "Expressions": [[799, null]], "Extending the API": [[1, null]], "FIRST": [[1317, "first"]], "FLOOR": [[1322, "floor"]], "FROM": [[1316, "from"]], "Feather / IPC": [[812, "feather-ipc"]], "Frame SQL": [[1328, "frame-sql"]], "Functions": [[798, null], [810, null], [919, "functions"]], "GPUEngine": [[910, null]], "GREATEST": [[1320, "greatest"]], "GROUP BY": [[1316, "group-by"]], "Global SQL": [[1328, "global-sql"]], "GroupBy": [[317, null], [911, null]], "HAVING": [[1316, "having"]], "IF": [[1320, "if"]], "IFNULL": [[1320, "ifnull"]], "INITCAP": [[1323, "initcap"]], "INTERSECT": [[1329, "intersect"]], "Iceberg": [[812, "iceberg"]], "Importing": [[919, "importing"]], "InProcessQuery": [[912, null]], "Index": [[0, null]], "Input/output": [[812, null]], "Introduction": [[1328, "introduction"]], "JOIN": [[1316, "join"]], "JSON": [[812, "json"]], "LAST": [[1317, "last"]], "LEAST": [[1320, "least"]], "LEFT": [[1323, "left"]], "LENGTH": [[1323, "length"]], "LIMIT": [[1316, "limit"]], "LN": [[1322, "ln"]], "LOG": [[1322, "log"]], "LOG10": [[1322, "log10"]], "LOG1P": [[1322, "log1p"]], "LOG2": [[1322, "log2"]], "LOWER": [[1323, "lower"]], "LTRIM": [[1323, "ltrim"]], "LazyFrame": [[913, null]], "List": [[800, null], [1301, null]], "MAX": [[1317, "max"]], "MEDIAN": [[1317, "median"]], "MIN": [[1317, "min"]], "MOD": [[1322, "mod"]], "Manipulation/selection": [[320, null], [803, null], [915, null], [1303, null]], "Math": [[1322, null]], "Meta": [[801, null]], "Metadata": [[916, null]], "Methods": [[1328, "methods"]], "Miscellaneous": [[319, null], [802, null], [810, "miscellaneous"], [914, null], [1302, null]], "NULLIF": [[1320, "nullif"]], "Name": [[804, null]], "Nested": [[323, "nested"]], "Numeric": [[323, "numeric"], [805, "numeric"], [1304, "numeric"]], "OCTET_LENGTH": [[1323, "octet-length"]], "OFFSET": [[1316, "offset"]], "ORDER BY": [[1316, "order-by"]], "Operators": [[805, null], [1304, null]], "Other": [[323, "other"]], "PI": [[1322, "pi"]], "POW": [[1322, "pow"]], "Panic": [[324, "panic"]], "Parallelization": [[810, "parallelization"]], "Parametric testing": [[1331, "parametric-testing"]], "Parquet": [[812, "parquet"]], "Plot": [[321, null], [1305, null]], "Plugins": [[917, null]], "Polars strategies": [[1331, "polars-strategies"]], "Profiles": [[1331, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[812, "pyarrow-datasets"]], "Python API": [[1328, null]], "Python API reference": [[811, null]], "QUANTILE_CONT": [[1317, "quantile-cont"]], "QUANTILE_DISC": [[1317, "quantile-disc"]], "Querying": [[1328, "querying"]], "RADIANS": [[1325, "radians"]], "REGEXP_LIKE": [[1323, "regexp-like"]], "REPLACE": [[1323, "replace"]], "REVERSE": [[1323, "reverse"]], "RIGHT": [[1323, "right"]], "ROUND": [[1322, "round"]], "RTRIM": [[1323, "rtrim"]], "Random": [[810, "random"]], "SELECT": [[1316, "select"]], "SHOW TABLES": [[1330, "show-tables"]], "SIGN": [[1322, "sign"]], "SIN": [[1325, "sin"]], "SIND": [[1325, "sind"]], "SQL Clauses": [[1316, null]], "SQL Functions": [[1321, null]], "SQL Interface": [[1327, null]], "SQLContext": [[1328, "sqlcontext"]], "SQRT": [[1322, "sqrt"]], "STARTS_WITH": [[1323, "starts-with"]], "STDDEV": [[1317, "stddev"]], "STRFTIME": [[1324, "strftime"]], "STRPOS": [[1323, "strpos"]], "STRPTIME": [[1323, "strptime"]], "SUBSTRING": [[1323, "substring"]], "SUM": [[1317, "sum"]], "Schema": [[918, null]], "Selectors": [[919, null]], "Serialization": [[319, "serialization"], [914, "serialization"]], "Series": [[1300, null]], "Set Operations": [[1329, null]], "Set operations": [[919, "set-operations"]], "Strategy helpers": [[1331, "strategy-helpers"]], "String": [[323, "string"], [806, null], [1306, null], [1323, null]], "StringCache": [[810, "stringcache"]], "Struct": [[807, null], [1307, null]], "Style": [[322, null]], "TAN": [[1325, "tan"]], "TAND": [[1325, "tand"]], "TIMESTAMP": [[1323, "timestamp"]], "TRUNCATE": [[1330, "truncate"]], "TRY_CAST": [[1326, "try-cast"]], "Table Operations": [[1330, null]], "Temporal": [[323, "temporal"], [808, null], [1308, null], [1319, null], [1324, null]], "Testing": [[1331, null]], "Trigonometry": [[1325, null]], "Types": [[1326, null]], "UNION": [[1329, "union"]], "UNION ALL": [[1329, "union-all"]], "UNION BY NAME": [[1329, "union-by-name"]], "UNNEST": [[1318, "unnest"], [1330, "unnest"]], "UPPER": [[1323, "upper"]], "Use as a context manager": [[172, "use-as-a-context-manager"]], "Use as a decorator": [[172, "use-as-a-decorator"]], "VARIANCE": [[1317, "variance"]], "WHERE": [[1316, "where"]], "Warnings": [[324, "warnings"]], "Window": [[809, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderGCP": [[33, null]], "polars.DataFrame.__array__": [[174, null]], "polars.DataFrame.__arrow_c_stream__": [[175, null]], "polars.DataFrame.__dataframe__": [[176, null]], "polars.DataFrame.__getitem__": [[177, null]], "polars.DataFrame.approx_n_unique": [[178, null]], "polars.DataFrame.bottom_k": [[179, null]], "polars.DataFrame.cast": [[180, null]], "polars.DataFrame.clear": [[181, null]], "polars.DataFrame.clone": [[182, null]], "polars.DataFrame.collect_schema": [[183, null]], "polars.DataFrame.columns": [[184, null]], "polars.DataFrame.corr": [[185, null]], "polars.DataFrame.count": [[186, null]], "polars.DataFrame.describe": [[187, null]], "polars.DataFrame.deserialize": [[188, null]], "polars.DataFrame.drop": [[189, null]], "polars.DataFrame.drop_in_place": [[190, null]], "polars.DataFrame.drop_nans": [[191, null]], "polars.DataFrame.drop_nulls": [[192, null]], "polars.DataFrame.dtypes": [[193, null]], "polars.DataFrame.equals": [[194, null]], "polars.DataFrame.estimated_size": [[195, null]], "polars.DataFrame.explode": [[196, null]], "polars.DataFrame.extend": [[197, null]], "polars.DataFrame.fill_nan": [[198, null]], "polars.DataFrame.fill_null": [[199, null]], "polars.DataFrame.filter": [[200, null]], "polars.DataFrame.flags": [[201, null]], "polars.DataFrame.fold": [[202, null]], "polars.DataFrame.gather_every": [[203, null]], "polars.DataFrame.get_column": [[204, null]], "polars.DataFrame.get_column_index": [[205, null]], "polars.DataFrame.get_columns": [[206, null]], "polars.DataFrame.glimpse": [[207, null]], "polars.DataFrame.group_by": [[208, null]], "polars.DataFrame.group_by_dynamic": [[209, null]], "polars.DataFrame.hash_rows": [[210, null]], "polars.DataFrame.head": [[211, null]], "polars.DataFrame.height": [[212, null]], "polars.DataFrame.hstack": [[213, null]], "polars.DataFrame.insert_column": [[214, null]], "polars.DataFrame.interpolate": [[215, null]], "polars.DataFrame.is_duplicated": [[216, null]], "polars.DataFrame.is_empty": [[217, null]], "polars.DataFrame.is_unique": [[218, null]], "polars.DataFrame.item": [[219, null]], "polars.DataFrame.iter_columns": [[220, null]], "polars.DataFrame.iter_rows": [[221, null]], "polars.DataFrame.iter_slices": [[222, null]], "polars.DataFrame.join": [[223, null]], "polars.DataFrame.join_asof": [[224, null]], "polars.DataFrame.join_where": [[225, null]], "polars.DataFrame.lazy": [[226, null]], "polars.DataFrame.limit": [[227, null]], "polars.DataFrame.map_rows": [[228, null]], "polars.DataFrame.max": [[229, null]], "polars.DataFrame.max_horizontal": [[230, null]], "polars.DataFrame.mean": [[231, null]], "polars.DataFrame.mean_horizontal": [[232, null]], "polars.DataFrame.median": [[233, null]], "polars.DataFrame.melt": [[234, null]], "polars.DataFrame.merge_sorted": [[235, null]], "polars.DataFrame.min": [[236, null]], "polars.DataFrame.min_horizontal": [[237, null]], "polars.DataFrame.n_chunks": [[238, null]], "polars.DataFrame.n_unique": [[239, null]], "polars.DataFrame.null_count": [[240, null]], "polars.DataFrame.partition_by": [[241, null]], "polars.DataFrame.pipe": [[242, null]], "polars.DataFrame.pivot": [[243, null]], "polars.DataFrame.product": [[244, null]], "polars.DataFrame.quantile": [[245, null]], "polars.DataFrame.rechunk": [[246, null]], "polars.DataFrame.rename": [[247, null]], "polars.DataFrame.replace_column": [[248, null]], "polars.DataFrame.reverse": [[249, null]], "polars.DataFrame.rolling": [[250, null]], "polars.DataFrame.row": [[251, null]], "polars.DataFrame.rows": [[252, null]], "polars.DataFrame.rows_by_key": [[253, null]], "polars.DataFrame.sample": [[254, null]], "polars.DataFrame.schema": [[255, null]], "polars.DataFrame.select": [[256, null]], "polars.DataFrame.select_seq": [[257, null]], "polars.DataFrame.serialize": [[258, null]], "polars.DataFrame.set_sorted": [[259, null]], "polars.DataFrame.shape": [[260, null]], "polars.DataFrame.shift": [[261, null]], "polars.DataFrame.shrink_to_fit": [[262, null]], "polars.DataFrame.slice": [[263, null]], "polars.DataFrame.sort": [[264, null]], "polars.DataFrame.sql": [[265, null]], "polars.DataFrame.std": [[266, null]], "polars.DataFrame.sum": [[267, null]], "polars.DataFrame.sum_horizontal": [[268, null]], "polars.DataFrame.tail": [[269, null]], "polars.DataFrame.to_arrow": [[270, null]], "polars.DataFrame.to_dict": [[271, null]], "polars.DataFrame.to_dicts": [[272, null]], "polars.DataFrame.to_dummies": [[273, null]], "polars.DataFrame.to_init_repr": [[274, null]], "polars.DataFrame.to_jax": [[275, null]], "polars.DataFrame.to_numpy": [[276, null]], "polars.DataFrame.to_pandas": [[277, null]], "polars.DataFrame.to_series": [[278, null]], "polars.DataFrame.to_struct": [[279, null]], "polars.DataFrame.to_torch": [[280, null]], "polars.DataFrame.top_k": [[281, null]], "polars.DataFrame.transpose": [[282, null]], "polars.DataFrame.unique": [[283, null]], "polars.DataFrame.unnest": [[284, null]], "polars.DataFrame.unpivot": [[285, null]], "polars.DataFrame.unstack": [[286, null]], "polars.DataFrame.update": [[287, null]], "polars.DataFrame.upsample": [[288, null]], "polars.DataFrame.var": [[289, null]], "polars.DataFrame.vstack": [[290, null]], "polars.DataFrame.width": [[291, null]], "polars.DataFrame.with_columns": [[292, null]], "polars.DataFrame.with_columns_seq": [[293, null]], "polars.DataFrame.with_row_count": [[294, null]], "polars.DataFrame.with_row_index": [[295, null]], "polars.DataFrame.write_avro": [[34, null]], "polars.DataFrame.write_clipboard": [[35, null]], "polars.DataFrame.write_csv": [[36, null]], "polars.DataFrame.write_database": [[37, null]], "polars.DataFrame.write_delta": [[38, null]], "polars.DataFrame.write_excel": [[39, null]], "polars.DataFrame.write_ipc": [[40, null]], "polars.DataFrame.write_ipc_stream": [[41, null]], "polars.DataFrame.write_json": [[42, null]], "polars.DataFrame.write_ndjson": [[43, null]], "polars.DataFrame.write_parquet": [[44, null]], "polars.Expr.abs": [[326, null]], "polars.Expr.add": [[327, null]], "polars.Expr.agg_groups": [[328, null]], "polars.Expr.alias": [[329, null]], "polars.Expr.all": [[330, null]], "polars.Expr.and_": [[331, null]], "polars.Expr.any": [[332, null]], "polars.Expr.append": [[333, null]], "polars.Expr.approx_n_unique": [[334, null]], "polars.Expr.arccos": [[335, null]], "polars.Expr.arccosh": [[336, null]], "polars.Expr.arcsin": [[337, null]], "polars.Expr.arcsinh": [[338, null]], "polars.Expr.arctan": [[339, null]], "polars.Expr.arctanh": [[340, null]], "polars.Expr.arg_max": [[341, null]], "polars.Expr.arg_min": [[342, null]], "polars.Expr.arg_sort": [[343, null]], "polars.Expr.arg_true": [[344, null]], "polars.Expr.arg_unique": [[345, null]], "polars.Expr.arr.all": [[346, null]], "polars.Expr.arr.any": [[347, null]], "polars.Expr.arr.arg_max": [[348, null]], "polars.Expr.arr.arg_min": [[349, null]], "polars.Expr.arr.contains": [[350, null]], "polars.Expr.arr.count_matches": [[351, null]], "polars.Expr.arr.explode": [[352, null]], "polars.Expr.arr.first": [[353, null]], "polars.Expr.arr.get": [[354, null]], "polars.Expr.arr.join": [[355, null]], "polars.Expr.arr.last": [[356, null]], "polars.Expr.arr.max": [[357, null]], "polars.Expr.arr.median": [[358, null]], "polars.Expr.arr.min": [[359, null]], "polars.Expr.arr.n_unique": [[360, null]], "polars.Expr.arr.reverse": [[361, null]], "polars.Expr.arr.shift": [[362, null]], "polars.Expr.arr.sort": [[363, null]], "polars.Expr.arr.std": [[364, null]], "polars.Expr.arr.sum": [[365, null]], "polars.Expr.arr.to_list": [[366, null]], "polars.Expr.arr.to_struct": [[367, null]], "polars.Expr.arr.unique": [[368, null]], "polars.Expr.arr.var": [[369, null]], "polars.Expr.backward_fill": [[370, null]], "polars.Expr.bin.contains": [[371, null]], "polars.Expr.bin.decode": [[372, null]], "polars.Expr.bin.encode": [[373, null]], "polars.Expr.bin.ends_with": [[374, null]], "polars.Expr.bin.size": [[375, null]], "polars.Expr.bin.starts_with": [[376, null]], "polars.Expr.bitwise_and": [[377, null]], "polars.Expr.bitwise_count_ones": [[378, null]], "polars.Expr.bitwise_count_zeros": [[379, null]], "polars.Expr.bitwise_leading_ones": [[380, null]], "polars.Expr.bitwise_leading_zeros": [[381, null]], "polars.Expr.bitwise_or": [[382, null]], "polars.Expr.bitwise_trailing_ones": [[383, null]], "polars.Expr.bitwise_trailing_zeros": [[384, null]], "polars.Expr.bitwise_xor": [[385, null]], "polars.Expr.bottom_k": [[386, null]], "polars.Expr.bottom_k_by": [[387, null]], "polars.Expr.cast": [[388, null]], "polars.Expr.cat.get_categories": [[389, null]], "polars.Expr.cbrt": [[390, null]], "polars.Expr.ceil": [[391, null]], "polars.Expr.clip": [[392, null]], "polars.Expr.cos": [[393, null]], "polars.Expr.cosh": [[394, null]], "polars.Expr.cot": [[395, null]], "polars.Expr.count": [[396, null]], "polars.Expr.cum_count": [[397, null]], "polars.Expr.cum_max": [[398, null]], "polars.Expr.cum_min": [[399, null]], "polars.Expr.cum_prod": [[400, null]], "polars.Expr.cum_sum": [[401, null]], "polars.Expr.cumulative_eval": [[402, null]], "polars.Expr.cut": [[403, null]], "polars.Expr.degrees": [[404, null]], "polars.Expr.deserialize": [[405, null]], "polars.Expr.diff": [[406, null]], "polars.Expr.dot": [[407, null]], "polars.Expr.drop_nans": [[408, null]], "polars.Expr.drop_nulls": [[409, null]], "polars.Expr.dt.add_business_days": [[410, null]], "polars.Expr.dt.base_utc_offset": [[411, null]], "polars.Expr.dt.cast_time_unit": [[412, null]], "polars.Expr.dt.century": [[413, null]], "polars.Expr.dt.combine": [[414, null]], "polars.Expr.dt.convert_time_zone": [[415, null]], "polars.Expr.dt.date": [[416, null]], "polars.Expr.dt.datetime": [[417, null]], "polars.Expr.dt.day": [[418, null]], "polars.Expr.dt.dst_offset": [[419, null]], "polars.Expr.dt.epoch": [[420, null]], "polars.Expr.dt.hour": [[421, null]], "polars.Expr.dt.is_leap_year": [[422, null]], "polars.Expr.dt.iso_year": [[423, null]], "polars.Expr.dt.microsecond": [[424, null]], "polars.Expr.dt.millennium": [[425, null]], "polars.Expr.dt.millisecond": [[426, null]], "polars.Expr.dt.minute": [[427, null]], "polars.Expr.dt.month": [[428, null]], "polars.Expr.dt.month_end": [[429, null]], "polars.Expr.dt.month_start": [[430, null]], "polars.Expr.dt.nanosecond": [[431, null]], "polars.Expr.dt.offset_by": [[432, null]], "polars.Expr.dt.ordinal_day": [[433, null]], "polars.Expr.dt.quarter": [[434, null]], "polars.Expr.dt.replace_time_zone": [[435, null]], "polars.Expr.dt.round": [[436, null]], "polars.Expr.dt.second": [[437, null]], "polars.Expr.dt.strftime": [[438, null]], "polars.Expr.dt.time": [[439, null]], "polars.Expr.dt.timestamp": [[440, null]], "polars.Expr.dt.to_string": [[441, null]], "polars.Expr.dt.total_days": [[442, null]], "polars.Expr.dt.total_hours": [[443, null]], "polars.Expr.dt.total_microseconds": [[444, null]], "polars.Expr.dt.total_milliseconds": [[445, null]], "polars.Expr.dt.total_minutes": [[446, null]], "polars.Expr.dt.total_nanoseconds": [[447, null]], "polars.Expr.dt.total_seconds": [[448, null]], "polars.Expr.dt.truncate": [[449, null]], "polars.Expr.dt.week": [[450, null]], "polars.Expr.dt.weekday": [[451, null]], "polars.Expr.dt.with_time_unit": [[452, null]], "polars.Expr.dt.year": [[453, null]], "polars.Expr.entropy": [[454, null]], "polars.Expr.eq": [[455, null]], "polars.Expr.eq_missing": [[456, null]], "polars.Expr.ewm_mean": [[457, null]], "polars.Expr.ewm_mean_by": [[458, null]], "polars.Expr.ewm_std": [[459, null]], "polars.Expr.ewm_var": [[460, null]], "polars.Expr.exclude": [[461, null]], "polars.Expr.exp": [[462, null]], "polars.Expr.explode": [[463, null]], "polars.Expr.extend_constant": [[464, null]], "polars.Expr.fill_nan": [[465, null]], "polars.Expr.fill_null": [[466, null]], "polars.Expr.filter": [[467, null]], "polars.Expr.first": [[468, null]], "polars.Expr.flatten": [[469, null]], "polars.Expr.floor": [[470, null]], "polars.Expr.floordiv": [[471, null]], "polars.Expr.forward_fill": [[472, null]], "polars.Expr.from_json": [[473, null]], "polars.Expr.gather": [[474, null]], "polars.Expr.gather_every": [[475, null]], "polars.Expr.ge": [[476, null]], "polars.Expr.get": [[477, null]], "polars.Expr.gt": [[478, null]], "polars.Expr.has_nulls": [[479, null]], "polars.Expr.hash": [[480, null]], "polars.Expr.head": [[481, null]], "polars.Expr.hist": [[482, null]], "polars.Expr.implode": [[483, null]], "polars.Expr.inspect": [[484, null]], "polars.Expr.interpolate": [[485, null]], "polars.Expr.interpolate_by": [[486, null]], "polars.Expr.is_between": [[487, null]], "polars.Expr.is_duplicated": [[488, null]], "polars.Expr.is_finite": [[489, null]], "polars.Expr.is_first_distinct": [[490, null]], "polars.Expr.is_in": [[491, null]], "polars.Expr.is_infinite": [[492, null]], "polars.Expr.is_last_distinct": [[493, null]], "polars.Expr.is_nan": [[494, null]], "polars.Expr.is_not_nan": [[495, null]], "polars.Expr.is_not_null": [[496, null]], "polars.Expr.is_null": [[497, null]], "polars.Expr.is_unique": [[498, null]], "polars.Expr.kurtosis": [[499, null]], "polars.Expr.last": [[500, null]], "polars.Expr.le": [[501, null]], "polars.Expr.len": [[502, null]], "polars.Expr.limit": [[503, null]], "polars.Expr.list.all": [[504, null]], "polars.Expr.list.any": [[505, null]], "polars.Expr.list.arg_max": [[506, null]], "polars.Expr.list.arg_min": [[507, null]], "polars.Expr.list.concat": [[508, null]], "polars.Expr.list.contains": [[509, null]], "polars.Expr.list.count_matches": [[510, null]], "polars.Expr.list.diff": [[511, null]], "polars.Expr.list.drop_nulls": [[512, null]], "polars.Expr.list.eval": [[513, null]], "polars.Expr.list.explode": [[514, null]], "polars.Expr.list.first": [[515, null]], "polars.Expr.list.gather": [[516, null]], "polars.Expr.list.gather_every": [[517, null]], "polars.Expr.list.get": [[518, null]], "polars.Expr.list.head": [[519, null]], "polars.Expr.list.join": [[520, null]], "polars.Expr.list.last": [[521, null]], "polars.Expr.list.len": [[522, null]], "polars.Expr.list.max": [[523, null]], "polars.Expr.list.mean": [[524, null]], "polars.Expr.list.median": [[525, null]], "polars.Expr.list.min": [[526, null]], "polars.Expr.list.n_unique": [[527, null]], "polars.Expr.list.reverse": [[528, null]], "polars.Expr.list.sample": [[529, null]], "polars.Expr.list.set_difference": [[530, null]], "polars.Expr.list.set_intersection": [[531, null]], "polars.Expr.list.set_symmetric_difference": [[532, null]], "polars.Expr.list.set_union": [[533, null]], "polars.Expr.list.shift": [[534, null]], "polars.Expr.list.slice": [[535, null]], "polars.Expr.list.sort": [[536, null]], "polars.Expr.list.std": [[537, null]], "polars.Expr.list.sum": [[538, null]], "polars.Expr.list.tail": [[539, null]], "polars.Expr.list.to_array": [[540, null]], "polars.Expr.list.to_struct": [[541, null]], "polars.Expr.list.unique": [[542, null]], "polars.Expr.list.var": [[543, null]], "polars.Expr.log": [[544, null]], "polars.Expr.log10": [[545, null]], "polars.Expr.log1p": [[546, null]], "polars.Expr.lower_bound": [[547, null]], "polars.Expr.lt": [[548, null]], "polars.Expr.map_batches": [[549, null]], "polars.Expr.map_elements": [[550, null]], "polars.Expr.max": [[551, null]], "polars.Expr.mean": [[552, null]], "polars.Expr.median": [[553, null]], "polars.Expr.meta.eq": [[554, null]], "polars.Expr.meta.has_multiple_outputs": [[555, null]], "polars.Expr.meta.is_column": [[556, null]], "polars.Expr.meta.is_column_selection": [[557, null]], "polars.Expr.meta.is_literal": [[558, null]], "polars.Expr.meta.is_regex_projection": [[559, null]], "polars.Expr.meta.ne": [[560, null]], "polars.Expr.meta.output_name": [[561, null]], "polars.Expr.meta.pop": [[562, null]], "polars.Expr.meta.root_names": [[563, null]], "polars.Expr.meta.serialize": [[564, null]], "polars.Expr.meta.show_graph": [[565, null]], "polars.Expr.meta.tree_format": [[566, null]], "polars.Expr.meta.undo_aliases": [[567, null]], "polars.Expr.meta.write_json": [[568, null]], "polars.Expr.min": [[569, null]], "polars.Expr.mod": [[570, null]], "polars.Expr.mode": [[571, null]], "polars.Expr.mul": [[572, null]], "polars.Expr.n_unique": [[573, null]], "polars.Expr.name.keep": [[574, null]], "polars.Expr.name.map": [[575, null]], "polars.Expr.name.map_fields": [[576, null]], "polars.Expr.name.prefix": [[577, null]], "polars.Expr.name.prefix_fields": [[578, null]], "polars.Expr.name.suffix": [[579, null]], "polars.Expr.name.suffix_fields": [[580, null]], "polars.Expr.name.to_lowercase": [[581, null]], "polars.Expr.name.to_uppercase": [[582, null]], "polars.Expr.nan_max": [[583, null]], "polars.Expr.nan_min": [[584, null]], "polars.Expr.ne": [[585, null]], "polars.Expr.ne_missing": [[586, null]], "polars.Expr.neg": [[587, null]], "polars.Expr.not_": [[588, null]], "polars.Expr.null_count": [[589, null]], "polars.Expr.or_": [[590, null]], "polars.Expr.over": [[591, null]], "polars.Expr.pct_change": [[592, null]], "polars.Expr.peak_max": [[593, null]], "polars.Expr.peak_min": [[594, null]], "polars.Expr.pipe": [[595, null]], "polars.Expr.pow": [[596, null]], "polars.Expr.product": [[597, null]], "polars.Expr.qcut": [[598, null]], "polars.Expr.quantile": [[599, null]], "polars.Expr.radians": [[600, null]], "polars.Expr.rank": [[601, null]], "polars.Expr.rechunk": [[602, null]], "polars.Expr.reinterpret": [[603, null]], "polars.Expr.repeat_by": [[604, null]], "polars.Expr.replace": [[605, null]], "polars.Expr.replace_strict": [[606, null]], "polars.Expr.reshape": [[607, null]], "polars.Expr.reverse": [[608, null]], "polars.Expr.rle": [[609, null]], "polars.Expr.rle_id": [[610, null]], "polars.Expr.rolling": [[611, null]], "polars.Expr.rolling_map": [[612, null]], "polars.Expr.rolling_max": [[613, null]], "polars.Expr.rolling_max_by": [[614, null]], "polars.Expr.rolling_mean": [[615, null]], "polars.Expr.rolling_mean_by": [[616, null]], "polars.Expr.rolling_median": [[617, null]], "polars.Expr.rolling_median_by": [[618, null]], "polars.Expr.rolling_min": [[619, null]], "polars.Expr.rolling_min_by": [[620, null]], "polars.Expr.rolling_quantile": [[621, null]], "polars.Expr.rolling_quantile_by": [[622, null]], "polars.Expr.rolling_skew": [[623, null]], "polars.Expr.rolling_std": [[624, null]], "polars.Expr.rolling_std_by": [[625, null]], "polars.Expr.rolling_sum": [[626, null]], "polars.Expr.rolling_sum_by": [[627, null]], "polars.Expr.rolling_var": [[628, null]], "polars.Expr.rolling_var_by": [[629, null]], "polars.Expr.round": [[630, null]], "polars.Expr.round_sig_figs": [[631, null]], "polars.Expr.sample": [[632, null]], "polars.Expr.search_sorted": [[633, null]], "polars.Expr.set_sorted": [[634, null]], "polars.Expr.shift": [[635, null]], "polars.Expr.shrink_dtype": [[636, null]], "polars.Expr.shuffle": [[637, null]], "polars.Expr.sign": [[638, null]], "polars.Expr.sin": [[639, null]], "polars.Expr.sinh": [[640, null]], "polars.Expr.skew": [[641, null]], "polars.Expr.slice": [[642, null]], "polars.Expr.sort": [[643, null]], "polars.Expr.sort_by": [[644, null]], "polars.Expr.sqrt": [[645, null]], "polars.Expr.std": [[646, null]], "polars.Expr.str.concat": [[647, null]], "polars.Expr.str.contains": [[648, null]], "polars.Expr.str.contains_any": [[649, null]], "polars.Expr.str.count_matches": [[650, null]], "polars.Expr.str.decode": [[651, null]], "polars.Expr.str.encode": [[652, null]], "polars.Expr.str.ends_with": [[653, null]], "polars.Expr.str.escape_regex": [[654, null]], "polars.Expr.str.explode": [[655, null]], "polars.Expr.str.extract": [[656, null]], "polars.Expr.str.extract_all": [[657, null]], "polars.Expr.str.extract_groups": [[658, null]], "polars.Expr.str.extract_many": [[659, null]], "polars.Expr.str.find": [[660, null]], "polars.Expr.str.find_many": [[661, null]], "polars.Expr.str.head": [[662, null]], "polars.Expr.str.join": [[663, null]], "polars.Expr.str.json_decode": [[664, null]], "polars.Expr.str.json_path_match": [[665, null]], "polars.Expr.str.len_bytes": [[666, null]], "polars.Expr.str.len_chars": [[667, null]], "polars.Expr.str.pad_end": [[668, null]], "polars.Expr.str.pad_start": [[669, null]], "polars.Expr.str.replace": [[670, null]], "polars.Expr.str.replace_all": [[671, null]], "polars.Expr.str.replace_many": [[672, null]], "polars.Expr.str.reverse": [[673, null]], "polars.Expr.str.slice": [[674, null]], "polars.Expr.str.split": [[675, null]], "polars.Expr.str.split_exact": [[676, null]], "polars.Expr.str.splitn": [[677, null]], "polars.Expr.str.starts_with": [[678, null]], "polars.Expr.str.strip_chars": [[679, null]], "polars.Expr.str.strip_chars_end": [[680, null]], "polars.Expr.str.strip_chars_start": [[681, null]], "polars.Expr.str.strip_prefix": [[682, null]], "polars.Expr.str.strip_suffix": [[683, null]], "polars.Expr.str.strptime": [[684, null]], "polars.Expr.str.tail": [[685, null]], "polars.Expr.str.to_date": [[686, null]], "polars.Expr.str.to_datetime": [[687, null]], "polars.Expr.str.to_decimal": [[688, null]], "polars.Expr.str.to_integer": [[689, null]], "polars.Expr.str.to_lowercase": [[690, null]], "polars.Expr.str.to_time": [[691, null]], "polars.Expr.str.to_titlecase": [[692, null]], "polars.Expr.str.to_uppercase": [[693, null]], "polars.Expr.str.zfill": [[694, null]], "polars.Expr.struct.field": [[695, null]], "polars.Expr.struct.json_encode": [[696, null]], "polars.Expr.struct.rename_fields": [[697, null]], "polars.Expr.struct.unnest": [[698, null]], "polars.Expr.struct.with_fields": [[699, null]], "polars.Expr.sub": [[700, null]], "polars.Expr.sum": [[701, null]], "polars.Expr.tail": [[702, null]], "polars.Expr.tan": [[703, null]], "polars.Expr.tanh": [[704, null]], "polars.Expr.to_physical": [[705, null]], "polars.Expr.top_k": [[706, null]], "polars.Expr.top_k_by": [[707, null]], "polars.Expr.truediv": [[708, null]], "polars.Expr.unique": [[709, null]], "polars.Expr.unique_counts": [[710, null]], "polars.Expr.upper_bound": [[711, null]], "polars.Expr.value_counts": [[712, null]], "polars.Expr.var": [[713, null]], "polars.Expr.where": [[714, null]], "polars.Expr.xor": [[715, null]], "polars.LazyFrame.approx_n_unique": [[814, null]], "polars.LazyFrame.bottom_k": [[815, null]], "polars.LazyFrame.cache": [[816, null]], "polars.LazyFrame.cast": [[817, null]], "polars.LazyFrame.clear": [[818, null]], "polars.LazyFrame.clone": [[819, null]], "polars.LazyFrame.collect": [[820, null]], "polars.LazyFrame.collect_async": [[821, null]], "polars.LazyFrame.collect_schema": [[822, null]], "polars.LazyFrame.columns": [[823, null]], "polars.LazyFrame.count": [[824, null]], "polars.LazyFrame.describe": [[825, null]], "polars.LazyFrame.deserialize": [[826, null]], "polars.LazyFrame.drop": [[827, null]], "polars.LazyFrame.drop_nans": [[828, null]], "polars.LazyFrame.drop_nulls": [[829, null]], "polars.LazyFrame.dtypes": [[830, null]], "polars.LazyFrame.explain": [[831, null]], "polars.LazyFrame.explode": [[832, null]], "polars.LazyFrame.fill_nan": [[833, null]], "polars.LazyFrame.fill_null": [[834, null]], "polars.LazyFrame.filter": [[835, null]], "polars.LazyFrame.first": [[836, null]], "polars.LazyFrame.gather_every": [[837, null]], "polars.LazyFrame.group_by": [[838, null]], "polars.LazyFrame.group_by_dynamic": [[839, null]], "polars.LazyFrame.head": [[840, null]], "polars.LazyFrame.inspect": [[841, null]], "polars.LazyFrame.interpolate": [[842, null]], "polars.LazyFrame.join": [[843, null]], "polars.LazyFrame.join_asof": [[844, null]], "polars.LazyFrame.join_where": [[845, null]], "polars.LazyFrame.last": [[846, null]], "polars.LazyFrame.lazy": [[847, null]], "polars.LazyFrame.limit": [[848, null]], "polars.LazyFrame.map_batches": [[849, null]], "polars.LazyFrame.max": [[850, null]], "polars.LazyFrame.mean": [[851, null]], "polars.LazyFrame.median": [[852, null]], "polars.LazyFrame.melt": [[853, null]], "polars.LazyFrame.merge_sorted": [[854, null]], "polars.LazyFrame.min": [[855, null]], "polars.LazyFrame.null_count": [[856, null]], "polars.LazyFrame.pipe": [[857, null]], "polars.LazyFrame.profile": [[858, null]], "polars.LazyFrame.quantile": [[859, null]], "polars.LazyFrame.rename": [[860, null]], "polars.LazyFrame.reverse": [[861, null]], "polars.LazyFrame.rolling": [[862, null]], "polars.LazyFrame.schema": [[863, null]], "polars.LazyFrame.select": [[864, null]], "polars.LazyFrame.select_seq": [[865, null]], "polars.LazyFrame.serialize": [[866, null]], "polars.LazyFrame.set_sorted": [[867, null]], "polars.LazyFrame.shift": [[868, null]], "polars.LazyFrame.show_graph": [[869, null]], "polars.LazyFrame.sink_csv": [[45, null]], "polars.LazyFrame.sink_ipc": [[46, null]], "polars.LazyFrame.sink_ndjson": [[47, null]], "polars.LazyFrame.sink_parquet": [[48, null]], "polars.LazyFrame.slice": [[870, null]], "polars.LazyFrame.sort": [[871, null]], "polars.LazyFrame.sql": [[872, null]], "polars.LazyFrame.std": [[873, null]], "polars.LazyFrame.sum": [[874, null]], "polars.LazyFrame.tail": [[875, null]], "polars.LazyFrame.top_k": [[876, null]], "polars.LazyFrame.unique": [[877, null]], "polars.LazyFrame.unnest": [[878, null]], "polars.LazyFrame.unpivot": [[879, null]], "polars.LazyFrame.update": [[880, null]], "polars.LazyFrame.var": [[881, null]], "polars.LazyFrame.width": [[882, null]], "polars.LazyFrame.with_columns": [[883, null]], "polars.LazyFrame.with_columns_seq": [[884, null]], "polars.LazyFrame.with_context": [[885, null]], "polars.LazyFrame.with_row_count": [[886, null]], "polars.LazyFrame.with_row_index": [[887, null]], "polars.SQLContext.execute": [[1309, null]], "polars.SQLContext.execute_global": [[1310, null]], "polars.SQLContext.register": [[1311, null]], "polars.SQLContext.register_globals": [[1312, null]], "polars.SQLContext.register_many": [[1313, null]], "polars.SQLContext.tables": [[1314, null]], "polars.SQLContext.unregister": [[1315, null]], "polars.Series.__array__": [[921, null]], "polars.Series.__arrow_c_stream__": [[922, null]], "polars.Series.__getitem__": [[923, null]], "polars.Series.abs": [[924, null]], "polars.Series.alias": [[925, null]], "polars.Series.all": [[926, null]], "polars.Series.any": [[927, null]], "polars.Series.append": [[928, null]], "polars.Series.approx_n_unique": [[929, null]], "polars.Series.arccos": [[930, null]], "polars.Series.arccosh": [[931, null]], "polars.Series.arcsin": [[932, null]], "polars.Series.arcsinh": [[933, null]], "polars.Series.arctan": [[934, null]], "polars.Series.arctanh": [[935, null]], "polars.Series.arg_max": [[936, null]], "polars.Series.arg_min": [[937, null]], "polars.Series.arg_sort": [[938, null]], "polars.Series.arg_true": [[939, null]], "polars.Series.arg_unique": [[940, null]], "polars.Series.arr.all": [[941, null]], "polars.Series.arr.any": [[942, null]], "polars.Series.arr.arg_max": [[943, null]], "polars.Series.arr.arg_min": [[944, null]], "polars.Series.arr.contains": [[945, null]], "polars.Series.arr.count_matches": [[946, null]], "polars.Series.arr.explode": [[947, null]], "polars.Series.arr.first": [[948, null]], "polars.Series.arr.get": [[949, null]], "polars.Series.arr.join": [[950, null]], "polars.Series.arr.last": [[951, null]], "polars.Series.arr.max": [[952, null]], "polars.Series.arr.median": [[953, null]], "polars.Series.arr.min": [[954, null]], "polars.Series.arr.n_unique": [[955, null]], "polars.Series.arr.reverse": [[956, null]], "polars.Series.arr.shift": [[957, null]], "polars.Series.arr.sort": [[958, null]], "polars.Series.arr.std": [[959, null]], "polars.Series.arr.sum": [[960, null]], "polars.Series.arr.to_list": [[961, null]], "polars.Series.arr.to_struct": [[962, null]], "polars.Series.arr.unique": [[963, null]], "polars.Series.arr.var": [[964, null]], "polars.Series.bin.contains": [[965, null]], "polars.Series.bin.decode": [[966, null]], "polars.Series.bin.encode": [[967, null]], "polars.Series.bin.ends_with": [[968, null]], "polars.Series.bin.size": [[969, null]], "polars.Series.bin.starts_with": [[970, null]], "polars.Series.bitwise_and": [[971, null]], "polars.Series.bitwise_count_ones": [[972, null]], "polars.Series.bitwise_count_zeros": [[973, null]], "polars.Series.bitwise_leading_ones": [[974, null]], "polars.Series.bitwise_leading_zeros": [[975, null]], "polars.Series.bitwise_or": [[976, null]], "polars.Series.bitwise_trailing_ones": [[977, null]], "polars.Series.bitwise_trailing_zeros": [[978, null]], "polars.Series.bitwise_xor": [[979, null]], "polars.Series.bottom_k": [[980, null]], "polars.Series.cast": [[981, null]], "polars.Series.cat.get_categories": [[982, null]], "polars.Series.cat.is_local": [[983, null]], "polars.Series.cat.to_local": [[984, null]], "polars.Series.cat.uses_lexical_ordering": [[985, null]], "polars.Series.cbrt": [[986, null]], "polars.Series.ceil": [[987, null]], "polars.Series.chunk_lengths": [[988, null]], "polars.Series.clear": [[989, null]], "polars.Series.clip": [[990, null]], "polars.Series.clone": [[991, null]], "polars.Series.cos": [[992, null]], "polars.Series.cosh": [[993, null]], "polars.Series.cot": [[994, null]], "polars.Series.count": [[995, null]], "polars.Series.cum_count": [[996, null]], "polars.Series.cum_max": [[997, null]], "polars.Series.cum_min": [[998, null]], "polars.Series.cum_prod": [[999, null]], "polars.Series.cum_sum": [[1000, null]], "polars.Series.cumulative_eval": [[1001, null]], "polars.Series.cut": [[1002, null]], "polars.Series.describe": [[1003, null]], "polars.Series.diff": [[1004, null]], "polars.Series.dot": [[1005, null]], "polars.Series.drop_nans": [[1006, null]], "polars.Series.drop_nulls": [[1007, null]], "polars.Series.dt.add_business_days": [[1008, null]], "polars.Series.dt.base_utc_offset": [[1009, null]], "polars.Series.dt.cast_time_unit": [[1010, null]], "polars.Series.dt.century": [[1011, null]], "polars.Series.dt.combine": [[1012, null]], "polars.Series.dt.convert_time_zone": [[1013, null]], "polars.Series.dt.date": [[1014, null]], "polars.Series.dt.datetime": [[1015, null]], "polars.Series.dt.day": [[1016, null]], "polars.Series.dt.dst_offset": [[1017, null]], "polars.Series.dt.epoch": [[1018, null]], "polars.Series.dt.hour": [[1019, null]], "polars.Series.dt.is_leap_year": [[1020, null]], "polars.Series.dt.iso_year": [[1021, null]], "polars.Series.dt.max": [[1022, null]], "polars.Series.dt.mean": [[1023, null]], "polars.Series.dt.median": [[1024, null]], "polars.Series.dt.microsecond": [[1025, null]], "polars.Series.dt.millennium": [[1026, null]], "polars.Series.dt.millisecond": [[1027, null]], "polars.Series.dt.min": [[1028, null]], "polars.Series.dt.minute": [[1029, null]], "polars.Series.dt.month": [[1030, null]], "polars.Series.dt.month_end": [[1031, null]], "polars.Series.dt.month_start": [[1032, null]], "polars.Series.dt.nanosecond": [[1033, null]], "polars.Series.dt.offset_by": [[1034, null]], "polars.Series.dt.ordinal_day": [[1035, null]], "polars.Series.dt.quarter": [[1036, null]], "polars.Series.dt.replace_time_zone": [[1037, null]], "polars.Series.dt.round": [[1038, null]], "polars.Series.dt.second": [[1039, null]], "polars.Series.dt.strftime": [[1040, null]], "polars.Series.dt.time": [[1041, null]], "polars.Series.dt.timestamp": [[1042, null]], "polars.Series.dt.to_string": [[1043, null]], "polars.Series.dt.total_days": [[1044, null]], "polars.Series.dt.total_hours": [[1045, null]], "polars.Series.dt.total_microseconds": [[1046, null]], "polars.Series.dt.total_milliseconds": [[1047, null]], "polars.Series.dt.total_minutes": [[1048, null]], "polars.Series.dt.total_nanoseconds": [[1049, null]], "polars.Series.dt.total_seconds": [[1050, null]], "polars.Series.dt.truncate": [[1051, null]], "polars.Series.dt.week": [[1052, null]], "polars.Series.dt.weekday": [[1053, null]], "polars.Series.dt.with_time_unit": [[1054, null]], "polars.Series.dt.year": [[1055, null]], "polars.Series.dtype": [[1056, null]], "polars.Series.entropy": [[1057, null]], "polars.Series.eq": [[1058, null]], "polars.Series.eq_missing": [[1059, null]], "polars.Series.equals": [[1060, null]], "polars.Series.estimated_size": [[1061, null]], "polars.Series.ewm_mean": [[1062, null]], "polars.Series.ewm_mean_by": [[1063, null]], "polars.Series.ewm_std": [[1064, null]], "polars.Series.ewm_var": [[1065, null]], "polars.Series.exp": [[1066, null]], "polars.Series.explode": [[1067, null]], "polars.Series.extend": [[1068, null]], "polars.Series.extend_constant": [[1069, null]], "polars.Series.fill_nan": [[1070, null]], "polars.Series.fill_null": [[1071, null]], "polars.Series.filter": [[1072, null]], "polars.Series.first": [[1073, null]], "polars.Series.flags": [[1074, null]], "polars.Series.floor": [[1075, null]], "polars.Series.gather": [[1076, null]], "polars.Series.gather_every": [[1077, null]], "polars.Series.ge": [[1078, null]], "polars.Series.get_chunks": [[1079, null]], "polars.Series.gt": [[1080, null]], "polars.Series.has_nulls": [[1081, null]], "polars.Series.has_validity": [[1082, null]], "polars.Series.hash": [[1083, null]], "polars.Series.head": [[1084, null]], "polars.Series.hist": [[1085, null]], "polars.Series.implode": [[1086, null]], "polars.Series.interpolate": [[1087, null]], "polars.Series.interpolate_by": [[1088, null]], "polars.Series.is_between": [[1089, null]], "polars.Series.is_duplicated": [[1090, null]], "polars.Series.is_empty": [[1091, null]], "polars.Series.is_finite": [[1092, null]], "polars.Series.is_first_distinct": [[1093, null]], "polars.Series.is_in": [[1094, null]], "polars.Series.is_infinite": [[1095, null]], "polars.Series.is_last_distinct": [[1096, null]], "polars.Series.is_nan": [[1097, null]], "polars.Series.is_not_nan": [[1098, null]], "polars.Series.is_not_null": [[1099, null]], "polars.Series.is_null": [[1100, null]], "polars.Series.is_sorted": [[1101, null]], "polars.Series.is_unique": [[1102, null]], "polars.Series.item": [[1103, null]], "polars.Series.kurtosis": [[1104, null]], "polars.Series.last": [[1105, null]], "polars.Series.le": [[1106, null]], "polars.Series.len": [[1107, null]], "polars.Series.limit": [[1108, null]], "polars.Series.list.all": [[1109, null]], "polars.Series.list.any": [[1110, null]], "polars.Series.list.arg_max": [[1111, null]], "polars.Series.list.arg_min": [[1112, null]], "polars.Series.list.concat": [[1113, null]], "polars.Series.list.contains": [[1114, null]], "polars.Series.list.count_matches": [[1115, null]], "polars.Series.list.diff": [[1116, null]], "polars.Series.list.drop_nulls": [[1117, null]], "polars.Series.list.eval": [[1118, null]], "polars.Series.list.explode": [[1119, null]], "polars.Series.list.first": [[1120, null]], "polars.Series.list.gather": [[1121, null]], "polars.Series.list.gather_every": [[1122, null]], "polars.Series.list.get": [[1123, null]], "polars.Series.list.head": [[1124, null]], "polars.Series.list.join": [[1125, null]], "polars.Series.list.last": [[1126, null]], "polars.Series.list.len": [[1127, null]], "polars.Series.list.max": [[1128, null]], "polars.Series.list.mean": [[1129, null]], "polars.Series.list.median": [[1130, null]], "polars.Series.list.min": [[1131, null]], "polars.Series.list.n_unique": [[1132, null]], "polars.Series.list.reverse": [[1133, null]], "polars.Series.list.sample": [[1134, null]], "polars.Series.list.set_difference": [[1135, null]], "polars.Series.list.set_intersection": [[1136, null]], "polars.Series.list.set_symmetric_difference": [[1137, null]], "polars.Series.list.set_union": [[1138, null]], "polars.Series.list.shift": [[1139, null]], "polars.Series.list.slice": [[1140, null]], "polars.Series.list.sort": [[1141, null]], "polars.Series.list.std": [[1142, null]], "polars.Series.list.sum": [[1143, null]], "polars.Series.list.tail": [[1144, null]], "polars.Series.list.to_array": [[1145, null]], "polars.Series.list.to_struct": [[1146, null]], "polars.Series.list.unique": [[1147, null]], "polars.Series.list.var": [[1148, null]], "polars.Series.log": [[1149, null]], "polars.Series.log10": [[1150, null]], "polars.Series.log1p": [[1151, null]], "polars.Series.lower_bound": [[1152, null]], "polars.Series.lt": [[1153, null]], "polars.Series.map_elements": [[1154, null]], "polars.Series.max": [[1155, null]], "polars.Series.mean": [[1156, null]], "polars.Series.median": [[1157, null]], "polars.Series.min": [[1158, null]], "polars.Series.mode": [[1159, null]], "polars.Series.n_chunks": [[1160, null]], "polars.Series.n_unique": [[1161, null]], "polars.Series.name": [[1162, null]], "polars.Series.nan_max": [[1163, null]], "polars.Series.nan_min": [[1164, null]], "polars.Series.ne": [[1165, null]], "polars.Series.ne_missing": [[1166, null]], "polars.Series.new_from_index": [[1167, null]], "polars.Series.not_": [[1168, null]], "polars.Series.null_count": [[1169, null]], "polars.Series.pct_change": [[1170, null]], "polars.Series.peak_max": [[1171, null]], "polars.Series.peak_min": [[1172, null]], "polars.Series.pow": [[1173, null]], "polars.Series.product": [[1174, null]], "polars.Series.qcut": [[1175, null]], "polars.Series.quantile": [[1176, null]], "polars.Series.rank": [[1177, null]], "polars.Series.rechunk": [[1178, null]], "polars.Series.reinterpret": [[1179, null]], "polars.Series.rename": [[1180, null]], "polars.Series.replace": [[1181, null]], "polars.Series.replace_strict": [[1182, null]], "polars.Series.reshape": [[1183, null]], "polars.Series.reverse": [[1184, null]], "polars.Series.rle": [[1185, null]], "polars.Series.rle_id": [[1186, null]], "polars.Series.rolling_map": [[1187, null]], "polars.Series.rolling_max": [[1188, null]], "polars.Series.rolling_mean": [[1189, null]], "polars.Series.rolling_median": [[1190, null]], "polars.Series.rolling_min": [[1191, null]], "polars.Series.rolling_quantile": [[1192, null]], "polars.Series.rolling_skew": [[1193, null]], "polars.Series.rolling_std": [[1194, null]], "polars.Series.rolling_sum": [[1195, null]], "polars.Series.rolling_var": [[1196, null]], "polars.Series.round": [[1197, null]], "polars.Series.round_sig_figs": [[1198, null]], "polars.Series.sample": [[1199, null]], "polars.Series.scatter": [[1200, null]], "polars.Series.search_sorted": [[1201, null]], "polars.Series.set": [[1202, null]], "polars.Series.set_sorted": [[1203, null]], "polars.Series.shape": [[1204, null]], "polars.Series.shift": [[1205, null]], "polars.Series.shrink_dtype": [[1206, null]], "polars.Series.shrink_to_fit": [[1207, null]], "polars.Series.shuffle": [[1208, null]], "polars.Series.sign": [[1209, null]], "polars.Series.sin": [[1210, null]], "polars.Series.sinh": [[1211, null]], "polars.Series.skew": [[1212, null]], "polars.Series.slice": [[1213, null]], "polars.Series.sort": [[1214, null]], "polars.Series.sqrt": [[1215, null]], "polars.Series.std": [[1216, null]], "polars.Series.str.concat": [[1217, null]], "polars.Series.str.contains": [[1218, null]], "polars.Series.str.contains_any": [[1219, null]], "polars.Series.str.count_matches": [[1220, null]], "polars.Series.str.decode": [[1221, null]], "polars.Series.str.encode": [[1222, null]], "polars.Series.str.ends_with": [[1223, null]], "polars.Series.str.escape_regex": [[1224, null]], "polars.Series.str.explode": [[1225, null]], "polars.Series.str.extract": [[1226, null]], "polars.Series.str.extract_all": [[1227, null]], "polars.Series.str.extract_groups": [[1228, null]], "polars.Series.str.extract_many": [[1229, null]], "polars.Series.str.find": [[1230, null]], "polars.Series.str.find_many": [[1231, null]], "polars.Series.str.head": [[1232, null]], "polars.Series.str.join": [[1233, null]], "polars.Series.str.json_decode": [[1234, null]], "polars.Series.str.json_path_match": [[1235, null]], "polars.Series.str.len_bytes": [[1236, null]], "polars.Series.str.len_chars": [[1237, null]], "polars.Series.str.pad_end": [[1238, null]], "polars.Series.str.pad_start": [[1239, null]], "polars.Series.str.replace": [[1240, null]], "polars.Series.str.replace_all": [[1241, null]], "polars.Series.str.replace_many": [[1242, null]], "polars.Series.str.reverse": [[1243, null]], "polars.Series.str.slice": [[1244, null]], "polars.Series.str.split": [[1245, null]], "polars.Series.str.split_exact": [[1246, null]], "polars.Series.str.splitn": [[1247, null]], "polars.Series.str.starts_with": [[1248, null]], "polars.Series.str.strip_chars": [[1249, null]], "polars.Series.str.strip_chars_end": [[1250, null]], "polars.Series.str.strip_chars_start": [[1251, null]], "polars.Series.str.strip_prefix": [[1252, null]], "polars.Series.str.strip_suffix": [[1253, null]], "polars.Series.str.strptime": [[1254, null]], "polars.Series.str.tail": [[1255, null]], "polars.Series.str.to_date": [[1256, null]], "polars.Series.str.to_datetime": [[1257, null]], "polars.Series.str.to_decimal": [[1258, null]], "polars.Series.str.to_integer": [[1259, null]], "polars.Series.str.to_lowercase": [[1260, null]], "polars.Series.str.to_time": [[1261, null]], "polars.Series.str.to_titlecase": [[1262, null]], "polars.Series.str.to_uppercase": [[1263, null]], "polars.Series.str.zfill": [[1264, null]], "polars.Series.struct.field": [[1265, null]], "polars.Series.struct.fields": [[1266, null]], "polars.Series.struct.json_encode": [[1267, null]], "polars.Series.struct.rename_fields": [[1268, null]], "polars.Series.struct.schema": [[1269, null]], "polars.Series.struct.unnest": [[1270, null]], "polars.Series.sum": [[1271, null]], "polars.Series.tail": [[1272, null]], "polars.Series.tan": [[1273, null]], "polars.Series.tanh": [[1274, null]], "polars.Series.to_arrow": [[1275, null]], "polars.Series.to_dummies": [[1276, null]], "polars.Series.to_frame": [[1277, null]], "polars.Series.to_init_repr": [[1278, null]], "polars.Series.to_jax": [[1279, null]], "polars.Series.to_list": [[1280, null]], "polars.Series.to_numpy": [[1281, null]], "polars.Series.to_pandas": [[1282, null]], "polars.Series.to_physical": [[1283, null]], "polars.Series.to_torch": [[1284, null]], "polars.Series.top_k": [[1285, null]], "polars.Series.unique": [[1286, null]], "polars.Series.unique_counts": [[1287, null]], "polars.Series.upper_bound": [[1288, null]], "polars.Series.value_counts": [[1289, null]], "polars.Series.var": [[1290, null]], "polars.Series.zip_with": [[1291, null]], "polars.StringCache": [[49, null]], "polars.align_frames": [[50, null]], "polars.all": [[716, null]], "polars.all_horizontal": [[717, null]], "polars.any": [[718, null]], "polars.any_horizontal": [[719, null]], "polars.api.register_dataframe_namespace": [[51, null]], "polars.api.register_expr_namespace": [[52, null]], "polars.api.register_lazyframe_namespace": [[53, null]], "polars.api.register_series_namespace": [[54, null]], "polars.approx_n_unique": [[720, null]], "polars.arange": [[721, null]], "polars.arctan2": [[722, null]], "polars.arctan2d": [[723, null]], "polars.arg_sort_by": [[724, null]], "polars.arg_where": [[725, null]], "polars.build_info": [[55, null]], "polars.business_day_count": [[726, null]], "polars.coalesce": [[727, null]], "polars.col": [[795, null]], "polars.collect_all": [[56, null]], "polars.collect_all_async": [[57, null]], "polars.concat": [[58, null]], "polars.concat_arr": [[728, null]], "polars.concat_list": [[729, null]], "polars.concat_str": [[730, null]], "polars.corr": [[731, null]], "polars.count": [[732, null]], "polars.cov": [[733, null]], "polars.cum_count": [[734, null]], "polars.cum_fold": [[735, null]], "polars.cum_reduce": [[736, null]], "polars.cum_sum": [[737, null]], "polars.cum_sum_horizontal": [[738, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[296, null]], "polars.dataframe.group_by.GroupBy.agg": [[297, null]], "polars.dataframe.group_by.GroupBy.all": [[298, null]], "polars.dataframe.group_by.GroupBy.count": [[299, null]], "polars.dataframe.group_by.GroupBy.first": [[300, null]], "polars.dataframe.group_by.GroupBy.head": [[301, null]], "polars.dataframe.group_by.GroupBy.last": [[302, null]], "polars.dataframe.group_by.GroupBy.len": [[303, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[304, null]], "polars.dataframe.group_by.GroupBy.max": [[305, null]], "polars.dataframe.group_by.GroupBy.mean": [[306, null]], "polars.dataframe.group_by.GroupBy.median": [[307, null]], "polars.dataframe.group_by.GroupBy.min": [[308, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[309, null]], "polars.dataframe.group_by.GroupBy.quantile": [[310, null]], "polars.dataframe.group_by.GroupBy.sum": [[311, null]], "polars.dataframe.group_by.GroupBy.tail": [[312, null]], "polars.datatypes.Array": [[59, null]], "polars.datatypes.Binary": [[60, null]], "polars.datatypes.Boolean": [[61, null]], "polars.datatypes.Categorical": [[62, null]], "polars.datatypes.DataType": [[63, null]], "polars.datatypes.Date": [[64, null]], "polars.datatypes.Datetime": [[65, null]], "polars.datatypes.Decimal": [[66, null]], "polars.datatypes.Duration": [[67, null]], "polars.datatypes.Enum": [[68, null]], "polars.datatypes.Float32": [[69, null]], "polars.datatypes.Float64": [[70, null]], "polars.datatypes.Int16": [[71, null]], "polars.datatypes.Int32": [[72, null]], "polars.datatypes.Int64": [[73, null]], "polars.datatypes.Int8": [[74, null]], "polars.datatypes.List": [[75, null]], "polars.datatypes.Null": [[76, null]], "polars.datatypes.Object": [[77, null]], "polars.datatypes.String": [[78, null]], "polars.datatypes.Struct": [[79, null]], "polars.datatypes.Time": [[80, null]], "polars.datatypes.UInt16": [[81, null]], "polars.datatypes.UInt32": [[82, null]], "polars.datatypes.UInt64": [[83, null]], "polars.datatypes.UInt8": [[84, null]], "polars.datatypes.Unknown": [[85, null]], "polars.datatypes.Utf8": [[86, null]], "polars.date": [[739, null]], "polars.date_range": [[740, null]], "polars.date_ranges": [[741, null]], "polars.datetime": [[742, null]], "polars.datetime_range": [[743, null]], "polars.datetime_ranges": [[744, null]], "polars.disable_string_cache": [[87, null]], "polars.duration": [[745, null]], "polars.element": [[746, null]], "polars.enable_string_cache": [[88, null]], "polars.escape_regex": [[89, null]], "polars.exceptions.CategoricalRemappingWarning": [[90, null]], "polars.exceptions.ChronoFormatWarning": [[91, null]], "polars.exceptions.ColumnNotFoundError": [[92, null]], "polars.exceptions.ComputeError": [[93, null]], "polars.exceptions.CustomUFuncWarning": [[94, null]], "polars.exceptions.DataOrientationWarning": [[95, null]], "polars.exceptions.DuplicateError": [[96, null]], "polars.exceptions.InvalidOperationError": [[97, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[98, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[99, null]], "polars.exceptions.NoDataError": [[100, null]], "polars.exceptions.NoRowsReturnedError": [[101, null]], "polars.exceptions.OutOfBoundsError": [[102, null]], "polars.exceptions.PanicException": [[103, null]], "polars.exceptions.ParameterCollisionError": [[104, null]], "polars.exceptions.PerformanceWarning": [[105, null]], "polars.exceptions.PolarsError": [[106, null]], "polars.exceptions.PolarsInefficientMapWarning": [[107, null]], "polars.exceptions.PolarsWarning": [[108, null]], "polars.exceptions.RowsError": [[109, null]], "polars.exceptions.SQLInterfaceError": [[110, null]], "polars.exceptions.SQLSyntaxError": [[111, null]], "polars.exceptions.SchemaError": [[112, null]], "polars.exceptions.SchemaFieldNotFoundError": [[113, null]], "polars.exceptions.ShapeError": [[114, null]], "polars.exceptions.StringCacheMismatchError": [[115, null]], "polars.exceptions.StructFieldNotFoundError": [[116, null]], "polars.exceptions.TooManyRowsReturnedError": [[117, null]], "polars.exceptions.UnstableWarning": [[118, null]], "polars.exceptions.UnsuitableSQLError": [[119, null]], "polars.exclude": [[747, null]], "polars.first": [[748, null]], "polars.fold": [[749, null]], "polars.format": [[750, null]], "polars.from_arrow": [[120, null]], "polars.from_dataframe": [[121, null]], "polars.from_dict": [[122, null]], "polars.from_dicts": [[123, null]], "polars.from_epoch": [[751, null]], "polars.from_numpy": [[124, null]], "polars.from_pandas": [[125, null]], "polars.from_records": [[126, null]], "polars.from_repr": [[127, null]], "polars.get_index_type": [[128, null]], "polars.groups": [[752, null]], "polars.head": [[753, null]], "polars.implode": [[754, null]], "polars.int_range": [[755, null]], "polars.int_ranges": [[756, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[129, null]], "polars.json_normalize": [[130, null]], "polars.last": [[757, null]], "polars.lazyframe.engine_config.GPUEngine": [[888, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[889, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[890, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[891, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[892, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[893, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[894, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[895, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[896, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[897, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[898, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[899, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[900, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[901, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[902, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[903, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[904, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[905, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[906, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[907, null]], "polars.len": [[758, null]], "polars.lit": [[759, null]], "polars.map_batches": [[760, null]], "polars.map_groups": [[761, null]], "polars.max": [[762, null]], "polars.max_horizontal": [[763, null]], "polars.mean": [[764, null]], "polars.mean_horizontal": [[765, null]], "polars.median": [[766, null]], "polars.min": [[767, null]], "polars.min_horizontal": [[768, null]], "polars.n_unique": [[769, null]], "polars.nth": [[770, null]], "polars.ones": [[771, null]], "polars.quantile": [[772, null]], "polars.read_avro": [[131, null]], "polars.read_clipboard": [[132, null]], "polars.read_csv": [[133, null]], "polars.read_csv_batched": [[134, null]], "polars.read_database": [[135, null]], "polars.read_database_uri": [[136, null]], "polars.read_delta": [[137, null]], "polars.read_excel": [[138, null]], "polars.read_ipc": [[139, null]], "polars.read_ipc_schema": [[140, null]], "polars.read_ipc_stream": [[141, null]], "polars.read_json": [[142, null]], "polars.read_ndjson": [[143, null]], "polars.read_ods": [[144, null]], "polars.read_parquet": [[145, null]], "polars.read_parquet_schema": [[146, null]], "polars.reduce": [[773, null]], "polars.repeat": [[774, null]], "polars.rolling_corr": [[775, null]], "polars.rolling_cov": [[776, null]], "polars.scan_csv": [[147, null]], "polars.scan_delta": [[148, null]], "polars.scan_iceberg": [[149, null]], "polars.scan_ipc": [[150, null]], "polars.scan_ndjson": [[151, null]], "polars.scan_parquet": [[152, null]], "polars.scan_pyarrow_dataset": [[153, null]], "polars.select": [[777, null]], "polars.set_random_seed": [[154, null]], "polars.show_versions": [[155, null]], "polars.sql": [[778, null]], "polars.sql_expr": [[779, null]], "polars.std": [[780, null]], "polars.struct": [[781, null]], "polars.sum": [[782, null]], "polars.sum_horizontal": [[783, null]], "polars.tail": [[784, null]], "polars.testing.assert_frame_equal": [[156, null]], "polars.testing.assert_frame_not_equal": [[157, null]], "polars.testing.assert_series_equal": [[158, null]], "polars.testing.assert_series_not_equal": [[159, null]], "polars.testing.parametric.column": [[160, null]], "polars.testing.parametric.columns": [[161, null]], "polars.testing.parametric.create_list_strategy": [[162, null]], "polars.testing.parametric.dataframes": [[163, null]], "polars.testing.parametric.dtypes": [[164, null]], "polars.testing.parametric.lists": [[165, null]], "polars.testing.parametric.load_profile": [[166, null]], "polars.testing.parametric.series": [[167, null]], "polars.testing.parametric.set_profile": [[168, null]], "polars.thread_pool_size": [[169, null]], "polars.threadpool_size": [[170, null]], "polars.time": [[785, null]], "polars.time_range": [[786, null]], "polars.time_ranges": [[787, null]], "polars.using_string_cache": [[171, null]], "polars.var": [[788, null]], "polars.when": [[789, null]], "polars.zeros": [[790, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.json_normalize", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[174, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[921, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[175, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[922, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[176, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1328, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1328, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[177, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[923, "polars.Series.__getitem__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[33, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[59, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[60, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[61, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[62, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[63, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[64, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[65, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[66, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[67, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[68, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[69, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[70, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[71, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[72, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[73, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[74, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[75, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[76, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[77, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[78, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[79, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[80, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[81, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[82, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[83, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[84, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[85, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[888, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1328, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[49, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[160, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[296, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[326, "polars.Expr.abs", false]], "abs() (polars.series method)": [[924, "polars.Series.abs", false]], "add() (polars.expr method)": [[327, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[410, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1008, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[297, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[889, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[328, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[329, "polars.Expr.alias", false]], "alias() (polars.series method)": [[925, "polars.Series.alias", false]], "align_frames() (in module polars)": [[50, "polars.align_frames", false]], "all() (in module polars)": [[716, "polars.all", false]], "all() (in module polars.selectors)": [[919, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[298, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[330, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[346, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[504, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[890, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[926, "polars.Series.all", false]], "all() (polars.series.arr method)": [[941, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1109, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[717, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[919, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[919, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[331, "polars.Expr.and_", false]], "any() (in module polars)": [[718, "polars.any", false]], "any() (polars.expr method)": [[332, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[347, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[505, "polars.Expr.list.any", false]], "any() (polars.series method)": [[927, "polars.Series.any", false]], "any() (polars.series.arr method)": [[942, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1110, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[719, "polars.any_horizontal", false]], "append() (polars.expr method)": [[333, "polars.Expr.append", false]], "append() (polars.series method)": [[928, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[720, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[178, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[334, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[814, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[929, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[721, "polars.arange", false]], "arccos() (polars.expr method)": [[335, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[930, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[336, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[931, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[337, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[932, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[338, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[933, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[339, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[934, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[722, "polars.arctan2", false]], "arctan2d() (in module polars)": [[723, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[340, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[935, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[341, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[348, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[506, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[936, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[943, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1111, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[342, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[349, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[507, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[937, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[944, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1112, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[343, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[938, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[724, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[344, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[939, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[345, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[940, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[725, "polars.arg_where", false]], "array (class in polars.datatypes)": [[59, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[156, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[157, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[158, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[159, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[370, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[411, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1009, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[60, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[919, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[377, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[971, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[378, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[972, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[379, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[973, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[380, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[974, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[381, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[975, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[382, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[976, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[383, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[977, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[384, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[978, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[385, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[979, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[61, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[919, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[179, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[386, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[815, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[980, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[387, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[55, "polars.build_info", false]], "business_day_count() (in module polars)": [[726, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[919, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[919, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[919, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[816, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[905, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[180, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[388, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[817, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[981, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[412, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1010, "polars.Series.dt.cast_time_unit", false]], "categorical (class in polars.datatypes)": [[62, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[919, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[90, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[390, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[986, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[391, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[987, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[413, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1011, "polars.Series.dt.century", false]], "chronoformatwarning": [[91, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[988, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[181, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[818, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[989, "polars.Series.clear", false]], "clip() (polars.expr method)": [[392, "polars.Expr.clip", false]], "clip() (polars.series method)": [[990, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[182, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[819, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[991, "polars.Series.clone", false]], "coalesce() (in module polars)": [[727, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[820, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[56, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[57, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[821, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[183, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[822, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[160, "polars.testing.parametric.column", false]], "columnnotfounderror": [[92, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[184, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[823, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[161, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[414, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1012, "polars.Series.dt.combine", false]], "computeerror": [[93, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[58, "polars.concat", false]], "concat() (polars.expr.list method)": [[508, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[647, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1113, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1217, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[728, "polars.concat_arr", false]], "concat_list() (in module polars)": [[729, "polars.concat_list", false]], "concat_str() (in module polars)": [[730, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[919, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[350, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[371, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[509, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[648, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[945, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[965, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1114, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1218, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[649, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1219, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[415, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1013, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[731, "polars.corr", false]], "corr() (polars.dataframe method)": [[185, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[393, "polars.Expr.cos", false]], "cos() (polars.series method)": [[992, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[394, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[993, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[395, "polars.Expr.cot", false]], "cot() (polars.series method)": [[994, "polars.Series.cot", false]], "count() (in module polars)": [[732, "polars.count", false]], "count() (polars.dataframe method)": [[186, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[299, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[396, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[824, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[891, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[995, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[351, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[510, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[650, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[946, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1115, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1220, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[733, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[162, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialprovidergcp (class in polars)": [[33, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[734, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[397, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[996, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[735, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[398, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[997, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[399, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[998, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[400, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[999, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[736, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[737, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[401, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1000, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[738, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[402, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1001, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[94, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[403, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1002, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[163, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[95, "polars.exceptions.DataOrientationWarning", false]], "datatype (class in polars.datatypes)": [[63, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[64, "polars.datatypes.Date", false]], "date() (in module polars)": [[739, "polars.date", false]], "date() (in module polars.selectors)": [[919, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[416, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1014, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[740, "polars.date_range", false]], "date_ranges() (in module polars)": [[741, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[65, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[742, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[919, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[417, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1015, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[743, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[744, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[418, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1016, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[66, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[919, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[372, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[651, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[966, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1221, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[404, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[187, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[825, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1003, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[188, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[405, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[826, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[406, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[511, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1004, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1116, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[919, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[87, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[407, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1005, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[189, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[827, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[190, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[191, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[408, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[828, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1006, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[192, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[409, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[512, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[829, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1007, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1117, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[419, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1017, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1056, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[193, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[830, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[164, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[96, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[67, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[745, "polars.duration", false]], "duration() (in module polars.selectors)": [[919, "polars.selectors.duration", false]], "element() (in module polars)": [[746, "polars.element", false]], "enable_string_cache() (in module polars)": [[88, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[373, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[652, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[967, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1222, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[919, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[374, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.str method)": [[653, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[968, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.str method)": [[1223, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[454, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1057, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[68, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[420, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1018, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[455, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[554, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1058, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[456, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1059, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[194, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1060, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[89, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[654, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1224, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[195, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1061, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[513, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1118, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[457, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1062, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[458, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1063, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[459, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1064, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[460, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1065, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[747, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[919, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[461, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1309, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1310, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[462, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1066, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[919, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[831, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[196, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[463, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[352, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[514, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[655, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[832, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1067, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[947, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1119, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1225, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[197, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1068, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[464, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1069, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[656, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1226, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[657, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1227, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[658, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1228, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[659, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1229, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[906, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[907, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field() (polars.expr.struct method)": [[695, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1265, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1266, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[198, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[465, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[833, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1070, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[199, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[466, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[834, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1071, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[200, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[467, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[835, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1072, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[660, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1230, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[661, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1231, "polars.Series.str.find_many", false]], "first() (in module polars)": [[748, "polars.first", false]], "first() (in module polars.selectors)": [[919, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[300, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[468, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[353, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[515, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[836, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[892, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1073, "polars.Series.first", false]], "first() (polars.series.arr method)": [[948, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1120, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[201, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1074, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[469, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[919, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[69, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[70, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[470, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1075, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[471, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[749, "polars.fold", false]], "fold() (polars.dataframe method)": [[202, "polars.DataFrame.fold", false]], "format() (in module polars)": [[750, "polars.format", false]], "forward_fill() (polars.expr method)": [[472, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[120, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[121, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[122, "polars.from_dict", false]], "from_dicts() (in module polars)": [[123, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[751, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[473, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[124, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[125, "polars.from_pandas", false]], "from_records() (in module polars)": [[126, "polars.from_records", false]], "from_repr() (in module polars)": [[127, "polars.from_repr", false]], "gather() (polars.expr method)": [[474, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[516, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1076, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1121, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[203, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[475, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[517, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[837, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1077, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1122, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[476, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1078, "polars.Series.ge", false]], "get() (polars.expr method)": [[477, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[354, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[518, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[949, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1123, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[389, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[982, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1079, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[204, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[205, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[206, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[128, "polars.get_index_type", false]], "glimpse() (polars.dataframe method)": [[207, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[888, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[208, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[838, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[209, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[839, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[752, "polars.groups", false]], "gt() (polars.expr method)": [[478, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1080, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[555, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[479, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1081, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1082, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[480, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1083, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[210, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[753, "polars.head", false]], "head() (polars.dataframe method)": [[211, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[301, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[481, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[519, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[662, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[840, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[893, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1084, "polars.Series.head", false]], "head() (polars.series.list method)": [[1124, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1232, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[212, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[482, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1085, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[421, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1019, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[213, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[754, "polars.implode", false]], "implode() (polars.expr method)": [[483, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1086, "polars.Series.implode", false]], "insert_column() (polars.dataframe method)": [[214, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[484, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[841, "polars.LazyFrame.inspect", false]], "int16 (class in polars.datatypes)": [[71, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[72, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[73, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[74, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[755, "polars.int_range", false]], "int_ranges() (in module polars)": [[756, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[919, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[215, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[485, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[842, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1087, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[486, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1088, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[97, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[487, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1089, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[556, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[557, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[216, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[488, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1090, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[217, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1091, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[489, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1092, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[490, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1093, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[491, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1094, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[492, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1095, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[493, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1096, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[422, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1020, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[558, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[983, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[494, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1097, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[495, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1098, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[496, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1099, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[497, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1100, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[559, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[919, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1101, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[218, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[498, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1102, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[423, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1021, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[219, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1103, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[220, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[221, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[222, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[223, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[355, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[520, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[663, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[843, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[950, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1125, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1233, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[224, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[844, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[225, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[845, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[664, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1234, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[696, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1267, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[130, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[665, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1235, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[574, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[499, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1104, "polars.Series.kurtosis", false]], "last() (in module polars)": [[757, "polars.last", false]], "last() (in module polars.selectors)": [[919, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[302, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[500, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[356, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[521, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[846, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[894, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1105, "polars.Series.last", false]], "last() (polars.series.arr method)": [[951, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1126, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[226, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[847, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[501, "polars.Expr.le", false]], "le() (polars.series method)": [[1106, "polars.Series.le", false]], "len() (in module polars)": [[758, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[303, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[502, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[522, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[895, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1107, "polars.Series.len", false]], "len() (polars.series.list method)": [[1127, "polars.Series.list.len", false]], "len_bytes() (polars.expr.str method)": [[666, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1236, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.str method)": [[667, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.str method)": [[1237, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[227, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[503, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[848, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1108, "polars.Series.limit", false]], "list (class in polars.datatypes)": [[75, "polars.datatypes.List", false]], "lists() (in module polars.testing.parametric)": [[165, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[759, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[544, "polars.Expr.log", false]], "log() (polars.series method)": [[1149, "polars.Series.log", false]], "log10() (polars.expr method)": [[545, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1150, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[546, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1151, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[547, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1152, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[548, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1153, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[575, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[760, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[549, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[849, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[550, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1154, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[576, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[761, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[304, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[896, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[228, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[98, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[919, "polars.selectors.matches", false]], "max() (in module polars)": [[762, "polars.max", false]], "max() (polars.dataframe method)": [[229, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[305, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[551, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[357, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[523, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[850, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[897, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1155, "polars.Series.max", false]], "max() (polars.series.arr method)": [[952, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1022, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1128, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[763, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[230, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[764, "polars.mean", false]], "mean() (polars.dataframe method)": [[231, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[306, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[552, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[524, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[851, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[898, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1156, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1023, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1129, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[765, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[232, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[766, "polars.median", false]], "median() (polars.dataframe method)": [[233, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[307, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[553, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[358, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[525, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[852, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[899, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1157, "polars.Series.median", false]], "median() (polars.series.arr method)": [[953, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1024, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1130, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[234, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[853, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[235, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[854, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[424, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1025, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[425, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1026, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[426, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1027, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[767, "polars.min", false]], "min() (polars.dataframe method)": [[236, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[308, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[569, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[359, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[526, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[855, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[900, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1158, "polars.Series.min", false]], "min() (polars.series.arr method)": [[954, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1028, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1131, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[768, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[237, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[427, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1029, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[570, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[571, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1159, "polars.Series.mode", false]], "module": [[917, "module-polars.plugins", false], [919, "module-polars.selectors", false]], "moduleupgraderequirederror": [[99, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[428, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1030, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[429, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1031, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[430, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1032, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[572, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[238, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1160, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[769, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[239, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[309, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[573, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[360, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[527, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[901, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1161, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[955, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1132, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1162, "polars.Series.name", false]], "nan_max() (polars.expr method)": [[583, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1163, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[584, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1164, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[431, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1033, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[585, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[560, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1165, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[586, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1166, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[587, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1167, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[129, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[100, "polars.exceptions.NoDataError", false]], "norowsreturnederror": [[101, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[588, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1168, "polars.Series.not_", false]], "nth() (in module polars)": [[770, "polars.nth", false]], "null (class in polars.datatypes)": [[76, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[240, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[589, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[856, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1169, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[919, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[77, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[432, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1034, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[771, "polars.ones", false]], "or_() (polars.expr method)": [[590, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[433, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1035, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[102, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[561, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[591, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[668, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1238, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[669, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1239, "polars.Series.str.pad_start", false]], "panicexception": [[103, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[104, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[241, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[592, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1170, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[593, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1171, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[594, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1172, "polars.Series.peak_min", false]], "performancewarning": [[105, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[242, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[595, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[857, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[243, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[321, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1305, "polars.Series.plot", false]], "polars.plugins": [[917, "module-polars.plugins", false]], "polars.selectors": [[919, "module-polars.selectors", false]], "polarserror": [[106, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[107, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[108, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[562, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[596, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1173, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[577, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[578, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[244, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[597, "polars.Expr.product", false]], "product() (polars.series method)": [[1174, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[858, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[598, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1175, "polars.Series.qcut", false]], "quantile() (in module polars)": [[772, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[245, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[310, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[599, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[859, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[902, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1176, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[434, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1036, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[600, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[601, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1177, "polars.Series.rank", false]], "read_avro() (in module polars)": [[131, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[132, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[133, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[134, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[135, "polars.read_database", false]], "read_database_uri() (in module polars)": [[136, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[137, "polars.read_delta", false]], "read_excel() (in module polars)": [[138, "polars.read_excel", false]], "read_ipc() (in module polars)": [[139, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[140, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[141, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[142, "polars.read_json", false]], "read_ndjson() (in module polars)": [[143, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[144, "polars.read_ods", false]], "read_parquet() (in module polars)": [[145, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[146, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[246, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[602, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1178, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[773, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1311, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[51, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[52, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1312, "polars.SQLContext.register_globals", false]], "register_lazyframe_namespace() (in module polars.api)": [[53, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1313, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[917, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[54, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[603, "polars.Expr.reinterpret", false]], "reinterpret() (polars.series method)": [[1179, "polars.Series.reinterpret", false]], "rename() (polars.dataframe method)": [[247, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[860, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1180, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[697, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1268, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[774, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[604, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[605, "polars.Expr.replace", false]], "replace() (polars.expr.str method)": [[670, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1181, "polars.Series.replace", false]], "replace() (polars.series.str method)": [[1240, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[671, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1241, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[248, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[672, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1242, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[606, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1182, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[435, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1037, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[607, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1183, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[249, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[608, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[361, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[528, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[673, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[861, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1184, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[956, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1133, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1243, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[609, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1185, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[610, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1186, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[250, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[611, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[862, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[775, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[776, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[612, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1187, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[613, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1188, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[614, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[615, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1189, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[616, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[617, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1190, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[618, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[619, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1191, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[620, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[621, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1192, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[622, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[623, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1193, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[624, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1194, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[625, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[626, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1195, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[627, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[628, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1196, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[629, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[563, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[630, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[436, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1197, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1038, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[631, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1198, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[251, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[252, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[253, "polars.DataFrame.rows_by_key", false]], "rowserror": [[109, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[254, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[632, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[529, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1199, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1134, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[147, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[148, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[149, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[150, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[151, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[152, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[153, "polars.scan_pyarrow_dataset", false]], "scatter() (polars.series method)": [[1200, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[255, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[863, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1269, "polars.Series.struct.schema", false]], "schemaerror": [[112, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[113, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[633, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1201, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[437, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1039, "polars.Series.dt.second", false]], "select() (in module polars)": [[777, "polars.select", false]], "select() (polars.dataframe method)": [[256, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[864, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[257, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[865, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[258, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[564, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[866, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1202, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[530, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1135, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[531, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1136, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[154, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[259, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[634, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[867, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1203, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[532, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1137, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[533, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1138, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[260, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1204, "polars.Series.shape", false]], "shapeerror": [[114, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[261, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[635, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[362, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[534, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[868, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1205, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[957, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1139, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[565, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[869, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[155, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[636, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1206, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[262, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1207, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[637, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1208, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[638, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1209, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[919, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[639, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1210, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[640, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1211, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[45, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[375, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[969, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[641, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1212, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[263, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[642, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[535, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[674, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[870, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1213, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1140, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1244, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[264, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[643, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[363, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[536, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[871, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1214, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[958, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1141, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[644, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[675, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1245, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[676, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1246, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[677, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1247, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[778, "polars.sql", false]], "sql() (polars.dataframe method)": [[265, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[872, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[779, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1328, "polars.SQLContext", false]], "sqlinterfaceerror": [[110, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[111, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[645, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1215, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[919, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[376, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.str method)": [[678, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[970, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.str method)": [[1248, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[780, "polars.std", false]], "std() (polars.dataframe method)": [[266, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[646, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[364, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[537, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[873, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1216, "polars.Series.std", false]], "std() (polars.series.arr method)": [[959, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1142, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[438, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1040, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[78, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[919, "polars.selectors.string", false]], "stringcache (class in polars)": [[49, "polars.StringCache", false]], "stringcachemismatcherror": [[115, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[679, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1249, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[680, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1250, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[681, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1251, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[682, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1252, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[683, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1253, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[684, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1254, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[79, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[781, "polars.struct", false]], "structfieldnotfounderror": [[116, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[322, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[700, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[579, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[580, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[782, "polars.sum", false]], "sum() (polars.dataframe method)": [[267, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[311, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[701, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[365, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[538, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[874, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[903, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1271, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[960, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1143, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[783, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[268, "polars.DataFrame.sum_horizontal", false]], "tables() (polars.sqlcontext method)": [[1314, "polars.SQLContext.tables", false]], "tail() (in module polars)": [[784, "polars.tail", false]], "tail() (polars.dataframe method)": [[269, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[312, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[702, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[539, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[685, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[875, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[904, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1272, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1144, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1255, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[703, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1273, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[704, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1274, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[919, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[169, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[170, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[80, "polars.datatypes.Time", false]], "time() (in module polars)": [[785, "polars.time", false]], "time() (in module polars.selectors)": [[919, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[439, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1041, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[786, "polars.time_range", false]], "time_ranges() (in module polars)": [[787, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[440, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1042, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[540, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1145, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[270, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1275, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[686, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1256, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[687, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1257, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[688, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1258, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[271, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[272, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[273, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1276, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1277, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[274, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1278, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[689, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1259, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[275, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1279, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[366, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1280, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[961, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[984, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[581, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[690, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1260, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[276, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1281, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[277, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1282, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[705, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1283, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[278, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[441, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1043, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[279, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[367, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[541, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[962, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1146, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[691, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1261, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[692, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1262, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[280, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1284, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[582, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[693, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1263, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[117, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[281, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[706, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[876, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1285, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[707, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[442, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1044, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[443, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1045, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[444, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1046, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[445, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1047, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[446, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1048, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[447, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1049, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[448, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1050, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[282, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[566, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[708, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[449, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1051, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[81, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[82, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[83, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[84, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[567, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[283, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[709, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[368, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[542, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[877, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1286, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[963, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1147, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[710, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1287, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[85, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[284, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[698, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[878, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1270, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[285, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[879, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1315, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[919, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[118, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[286, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[119, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[287, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[880, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[711, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1288, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[288, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[985, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[171, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[86, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[712, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1289, "polars.Series.value_counts", false]], "var() (in module polars)": [[788, "polars.var", false]], "var() (polars.dataframe method)": [[289, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[713, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[369, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[543, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[881, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1290, "polars.Series.var", false]], "var() (polars.series.arr method)": [[964, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1148, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[290, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[450, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1052, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[451, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1053, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[789, "polars.when", false]], "where() (polars.expr method)": [[714, "polars.Expr.where", false]], "width (polars.dataframe property)": [[291, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[882, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[292, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[883, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[293, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[884, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[885, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[699, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[294, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[886, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[295, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[887, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[452, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1054, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[34, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[35, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[36, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[37, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[38, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[39, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[40, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[42, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[568, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[43, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[44, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[715, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[453, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1055, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[790, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[694, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1264, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1291, "polars.Series.zip_with", false]]}, "objects": {"polars": [[31, 1, 1, "", "CredentialProvider"], [32, 1, 1, "", "CredentialProviderAWS"], [33, 1, 1, "", "CredentialProviderGCP"], [1328, 1, 1, "", "SQLContext"], [49, 1, 1, "", "StringCache"], [50, 4, 1, "", "align_frames"], [716, 4, 1, "", "all"], [717, 4, 1, "", "all_horizontal"], [718, 4, 1, "", "any"], [719, 4, 1, "", "any_horizontal"], [720, 4, 1, "", "approx_n_unique"], [721, 4, 1, "", "arange"], [722, 4, 1, "", "arctan2"], [723, 4, 1, "", "arctan2d"], [724, 4, 1, "", "arg_sort_by"], [725, 4, 1, "", "arg_where"], [55, 4, 1, "", "build_info"], [726, 4, 1, "", "business_day_count"], [727, 4, 1, "", "coalesce"], [56, 4, 1, "", "collect_all"], [57, 4, 1, "", "collect_all_async"], [58, 4, 1, "", "concat"], [728, 4, 1, "", "concat_arr"], [729, 4, 1, "", "concat_list"], [730, 4, 1, "", "concat_str"], [731, 4, 1, "", "corr"], [732, 4, 1, "", "count"], [733, 4, 1, "", "cov"], [734, 4, 1, "", "cum_count"], [735, 4, 1, "", "cum_fold"], [736, 4, 1, "", "cum_reduce"], [737, 4, 1, "", "cum_sum"], [738, 4, 1, "", "cum_sum_horizontal"], [739, 4, 1, "", "date"], [740, 4, 1, "", "date_range"], [741, 4, 1, "", "date_ranges"], [742, 4, 1, "", "datetime"], [743, 4, 1, "", "datetime_range"], [744, 4, 1, "", "datetime_ranges"], [87, 4, 1, "", "disable_string_cache"], [745, 4, 1, "", "duration"], [746, 4, 1, "", "element"], [88, 4, 1, "", "enable_string_cache"], [89, 4, 1, "", "escape_regex"], [747, 4, 1, "", "exclude"], [748, 4, 1, "", "first"], [749, 4, 1, "", "fold"], [750, 4, 1, "", "format"], [120, 4, 1, "", "from_arrow"], [121, 4, 1, "", "from_dataframe"], [122, 4, 1, "", "from_dict"], [123, 4, 1, "", "from_dicts"], [751, 4, 1, "", "from_epoch"], [124, 4, 1, "", "from_numpy"], [125, 4, 1, "", "from_pandas"], [126, 4, 1, "", "from_records"], [127, 4, 1, "", "from_repr"], [128, 4, 1, "", "get_index_type"], [752, 4, 1, "", "groups"], [753, 4, 1, "", "head"], [754, 4, 1, "", "implode"], [755, 4, 1, "", "int_range"], [756, 4, 1, "", "int_ranges"], [130, 4, 1, "", "json_normalize"], [757, 4, 1, "", "last"], [758, 4, 1, "", "len"], [759, 4, 1, "", "lit"], [760, 4, 1, "", "map_batches"], [761, 4, 1, "", "map_groups"], [762, 4, 1, "", "max"], [763, 4, 1, "", "max_horizontal"], [764, 4, 1, "", "mean"], [765, 4, 1, "", "mean_horizontal"], [766, 4, 1, "", "median"], [767, 4, 1, "", "min"], [768, 4, 1, "", "min_horizontal"], [769, 4, 1, "", "n_unique"], [770, 4, 1, "", "nth"], [771, 4, 1, "", "ones"], [917, 6, 0, "-", "plugins"], [772, 4, 1, "", "quantile"], [131, 4, 1, "", "read_avro"], [132, 4, 1, "", "read_clipboard"], [133, 4, 1, "", "read_csv"], [134, 4, 1, "", "read_csv_batched"], [135, 4, 1, "", "read_database"], [136, 4, 1, "", "read_database_uri"], [137, 4, 1, "", "read_delta"], [138, 4, 1, "", "read_excel"], [139, 4, 1, "", "read_ipc"], [140, 4, 1, "", "read_ipc_schema"], [141, 4, 1, "", "read_ipc_stream"], [142, 4, 1, "", "read_json"], [143, 4, 1, "", "read_ndjson"], [144, 4, 1, "", "read_ods"], [145, 4, 1, "", "read_parquet"], [146, 4, 1, "", "read_parquet_schema"], [773, 4, 1, "", "reduce"], [774, 4, 1, "", "repeat"], [775, 4, 1, "", "rolling_corr"], [776, 4, 1, "", "rolling_cov"], [147, 4, 1, "", "scan_csv"], [148, 4, 1, "", "scan_delta"], [149, 4, 1, "", "scan_iceberg"], [150, 4, 1, "", "scan_ipc"], [151, 4, 1, "", "scan_ndjson"], [152, 4, 1, "", "scan_parquet"], [153, 4, 1, "", "scan_pyarrow_dataset"], [777, 4, 1, "", "select"], [919, 6, 0, "-", "selectors"], [154, 4, 1, "", "set_random_seed"], [155, 4, 1, "", "show_versions"], [778, 4, 1, "", "sql"], [779, 4, 1, "", "sql_expr"], [780, 4, 1, "", "std"], [781, 4, 1, "", "struct"], [782, 4, 1, "", "sum"], [783, 4, 1, "", "sum_horizontal"], [784, 4, 1, "", "tail"], [169, 4, 1, "", "thread_pool_size"], [170, 4, 1, "", "threadpool_size"], [785, 4, 1, "", "time"], [786, 4, 1, "", "time_range"], [787, 4, 1, "", "time_ranges"], [171, 4, 1, "", "using_string_cache"], [788, 4, 1, "", "var"], [789, 4, 1, "", "when"], [790, 4, 1, "", "zeros"]], "polars.Config": [[2, 0, 1, "", "load"], [3, 0, 1, "", "load_from_file"], [4, 0, 1, "", "restore_defaults"], [5, 0, 1, "", "save"], [6, 0, 1, "", "save_to_file"], [7, 0, 1, "", "set_ascii_tables"], [8, 0, 1, "", "set_auto_structify"], [9, 0, 1, "", "set_decimal_separator"], [10, 0, 1, "", "set_float_precision"], [11, 0, 1, "", "set_fmt_float"], [12, 0, 1, "", "set_fmt_str_lengths"], [13, 0, 1, "", "set_fmt_table_cell_list_len"], [14, 0, 1, "", "set_streaming_chunk_size"], [15, 0, 1, "", "set_tbl_cell_alignment"], [16, 0, 1, "", "set_tbl_cell_numeric_alignment"], [17, 0, 1, "", "set_tbl_cols"], [18, 0, 1, "", "set_tbl_column_data_type_inline"], [19, 0, 1, "", "set_tbl_dataframe_shape_below"], [20, 0, 1, "", "set_tbl_formatting"], [21, 0, 1, "", "set_tbl_hide_column_data_types"], [22, 0, 1, "", "set_tbl_hide_column_names"], [23, 0, 1, "", "set_tbl_hide_dataframe_shape"], [24, 0, 1, "", "set_tbl_hide_dtype_separator"], [25, 0, 1, "", "set_tbl_rows"], [26, 0, 1, "", "set_tbl_width_chars"], [27, 0, 1, "", "set_thousands_separator"], [28, 0, 1, "", "set_trim_decimal_zeros"], [29, 0, 1, "", "set_verbose"], [30, 0, 1, "", "state"]], "polars.CredentialProvider": [[31, 0, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 0, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[33, 0, 1, "", "__init__"]], "polars.DataFrame": [[174, 0, 1, "", "__array__"], [175, 0, 1, "", "__arrow_c_stream__"], [176, 0, 1, "", "__dataframe__"], [177, 0, 1, "", "__getitem__"], [178, 0, 1, "", "approx_n_unique"], [179, 0, 1, "", "bottom_k"], [180, 0, 1, "", "cast"], [181, 0, 1, "", "clear"], [182, 0, 1, "", "clone"], [183, 0, 1, "", "collect_schema"], [184, 2, 1, "", "columns"], [185, 0, 1, "", "corr"], [186, 0, 1, "", "count"], [187, 0, 1, "", "describe"], [188, 0, 1, "", "deserialize"], [189, 0, 1, "", "drop"], [190, 0, 1, "", "drop_in_place"], [191, 0, 1, "", "drop_nans"], [192, 0, 1, "", "drop_nulls"], [193, 2, 1, "", "dtypes"], [194, 0, 1, "", "equals"], [195, 0, 1, "", "estimated_size"], [196, 0, 1, "", "explode"], [197, 0, 1, "", "extend"], [198, 0, 1, "", "fill_nan"], [199, 0, 1, "", "fill_null"], [200, 0, 1, "", "filter"], [201, 2, 1, "", "flags"], [202, 0, 1, "", "fold"], [203, 0, 1, "", "gather_every"], [204, 0, 1, "", "get_column"], [205, 0, 1, "", "get_column_index"], [206, 0, 1, "", "get_columns"], [207, 0, 1, "", "glimpse"], [208, 0, 1, "", "group_by"], [209, 0, 1, "", "group_by_dynamic"], [210, 0, 1, "", "hash_rows"], [211, 0, 1, "", "head"], [212, 2, 1, "", "height"], [213, 0, 1, "", "hstack"], [214, 0, 1, "", "insert_column"], [215, 0, 1, "", "interpolate"], [216, 0, 1, "", "is_duplicated"], [217, 0, 1, "", "is_empty"], [218, 0, 1, "", "is_unique"], [219, 0, 1, "", "item"], [220, 0, 1, "", "iter_columns"], [221, 0, 1, "", "iter_rows"], [222, 0, 1, "", "iter_slices"], [223, 0, 1, "", "join"], [224, 0, 1, "", "join_asof"], [225, 0, 1, "", "join_where"], [226, 0, 1, "", "lazy"], [227, 0, 1, "", "limit"], [228, 0, 1, "", "map_rows"], [229, 0, 1, "", "max"], [230, 0, 1, "", "max_horizontal"], [231, 0, 1, "", "mean"], [232, 0, 1, "", "mean_horizontal"], [233, 0, 1, "", "median"], [234, 0, 1, "", "melt"], [235, 0, 1, "", "merge_sorted"], [236, 0, 1, "", "min"], [237, 0, 1, "", "min_horizontal"], [238, 0, 1, "", "n_chunks"], [239, 0, 1, "", "n_unique"], [240, 0, 1, "", "null_count"], [241, 0, 1, "", "partition_by"], [242, 0, 1, "", "pipe"], [243, 0, 1, "", "pivot"], [321, 2, 1, "", "plot"], [244, 0, 1, "", "product"], [245, 0, 1, "", "quantile"], [246, 0, 1, "", "rechunk"], [247, 0, 1, "", "rename"], [248, 0, 1, "", "replace_column"], [249, 0, 1, "", "reverse"], [250, 0, 1, "", "rolling"], [251, 0, 1, "", "row"], [252, 0, 1, "", "rows"], [253, 0, 1, "", "rows_by_key"], [254, 0, 1, "", "sample"], [255, 2, 1, "", "schema"], [256, 0, 1, "", "select"], [257, 0, 1, "", "select_seq"], [258, 0, 1, "", "serialize"], [259, 0, 1, "", "set_sorted"], [260, 2, 1, "", "shape"], [261, 0, 1, "", "shift"], [262, 0, 1, "", "shrink_to_fit"], [263, 0, 1, "", "slice"], [264, 0, 1, "", "sort"], [265, 0, 1, "", "sql"], [266, 0, 1, "", "std"], [322, 2, 1, "", "style"], [267, 0, 1, "", "sum"], [268, 0, 1, "", "sum_horizontal"], [269, 0, 1, "", "tail"], [270, 0, 1, "", "to_arrow"], [271, 0, 1, "", "to_dict"], [272, 0, 1, "", "to_dicts"], [273, 0, 1, "", "to_dummies"], [274, 0, 1, "", "to_init_repr"], [275, 0, 1, "", "to_jax"], [276, 0, 1, "", "to_numpy"], [277, 0, 1, "", "to_pandas"], [278, 0, 1, "", "to_series"], [279, 0, 1, "", "to_struct"], [280, 0, 1, "", "to_torch"], [281, 0, 1, "", "top_k"], [282, 0, 1, "", "transpose"], [283, 0, 1, "", "unique"], [284, 0, 1, "", "unnest"], [285, 0, 1, "", "unpivot"], [286, 0, 1, "", "unstack"], [287, 0, 1, "", "update"], [288, 0, 1, "", "upsample"], [289, 0, 1, "", "var"], [290, 0, 1, "", "vstack"], [291, 2, 1, "", "width"], [292, 0, 1, "", "with_columns"], [293, 0, 1, "", "with_columns_seq"], [294, 0, 1, "", "with_row_count"], [295, 0, 1, "", "with_row_index"], [34, 0, 1, "", "write_avro"], [35, 0, 1, "", "write_clipboard"], [36, 0, 1, "", "write_csv"], [37, 0, 1, "", "write_database"], [38, 0, 1, "", "write_delta"], [39, 0, 1, "", "write_excel"], [40, 0, 1, "", "write_ipc"], [41, 0, 1, "", "write_ipc_stream"], [42, 0, 1, "", "write_json"], [43, 0, 1, "", "write_ndjson"], [44, 0, 1, "", "write_parquet"]], "polars.Expr": [[326, 0, 1, "", "abs"], [327, 0, 1, "", "add"], [328, 0, 1, "", "agg_groups"], [329, 0, 1, "", "alias"], [330, 0, 1, "", "all"], [331, 0, 1, "", "and_"], [332, 0, 1, "", "any"], [333, 0, 1, "", "append"], [334, 0, 1, "", "approx_n_unique"], [335, 0, 1, "", "arccos"], [336, 0, 1, "", "arccosh"], [337, 0, 1, "", "arcsin"], [338, 0, 1, "", "arcsinh"], [339, 0, 1, "", "arctan"], [340, 0, 1, "", "arctanh"], [341, 0, 1, "", "arg_max"], [342, 0, 1, "", "arg_min"], [343, 0, 1, "", "arg_sort"], [344, 0, 1, "", "arg_true"], [345, 0, 1, "", "arg_unique"], [370, 0, 1, "", "backward_fill"], [377, 0, 1, "", "bitwise_and"], [378, 0, 1, "", "bitwise_count_ones"], [379, 0, 1, "", "bitwise_count_zeros"], [380, 0, 1, "", "bitwise_leading_ones"], [381, 0, 1, "", "bitwise_leading_zeros"], [382, 0, 1, "", "bitwise_or"], [383, 0, 1, "", "bitwise_trailing_ones"], [384, 0, 1, "", "bitwise_trailing_zeros"], [385, 0, 1, "", "bitwise_xor"], [386, 0, 1, "", "bottom_k"], [387, 0, 1, "", "bottom_k_by"], [388, 0, 1, "", "cast"], [390, 0, 1, "", "cbrt"], [391, 0, 1, "", "ceil"], [392, 0, 1, "", "clip"], [393, 0, 1, "", "cos"], [394, 0, 1, "", "cosh"], [395, 0, 1, "", "cot"], [396, 0, 1, "", "count"], [397, 0, 1, "", "cum_count"], [398, 0, 1, "", "cum_max"], [399, 0, 1, "", "cum_min"], [400, 0, 1, "", "cum_prod"], [401, 0, 1, "", "cum_sum"], [402, 0, 1, "", "cumulative_eval"], [403, 0, 1, "", "cut"], [404, 0, 1, "", "degrees"], [405, 0, 1, "", "deserialize"], [406, 0, 1, "", "diff"], [407, 0, 1, "", "dot"], [408, 0, 1, "", "drop_nans"], [409, 0, 1, "", "drop_nulls"], [454, 0, 1, "", "entropy"], [455, 0, 1, "", "eq"], [456, 0, 1, "", "eq_missing"], [457, 0, 1, "", "ewm_mean"], [458, 0, 1, "", "ewm_mean_by"], [459, 0, 1, "", "ewm_std"], [460, 0, 1, "", "ewm_var"], [461, 0, 1, "", "exclude"], [462, 0, 1, "", "exp"], [463, 0, 1, "", "explode"], [464, 0, 1, "", "extend_constant"], [465, 0, 1, "", "fill_nan"], [466, 0, 1, "", "fill_null"], [467, 0, 1, "", "filter"], [468, 0, 1, "", "first"], [469, 0, 1, "", "flatten"], [470, 0, 1, "", "floor"], [471, 0, 1, "", "floordiv"], [472, 0, 1, "", "forward_fill"], [473, 0, 1, "", "from_json"], [474, 0, 1, "", "gather"], [475, 0, 1, "", "gather_every"], [476, 0, 1, "", "ge"], [477, 0, 1, "", "get"], [478, 0, 1, "", "gt"], [479, 0, 1, "", "has_nulls"], [480, 0, 1, "", "hash"], [481, 0, 1, "", "head"], [482, 0, 1, "", "hist"], [483, 0, 1, "", "implode"], [484, 0, 1, "", "inspect"], [485, 0, 1, "", "interpolate"], [486, 0, 1, "", "interpolate_by"], [487, 0, 1, "", "is_between"], [488, 0, 1, "", "is_duplicated"], [489, 0, 1, "", "is_finite"], [490, 0, 1, "", "is_first_distinct"], [491, 0, 1, "", "is_in"], [492, 0, 1, "", "is_infinite"], [493, 0, 1, "", "is_last_distinct"], [494, 0, 1, "", "is_nan"], [495, 0, 1, "", "is_not_nan"], [496, 0, 1, "", "is_not_null"], [497, 0, 1, "", "is_null"], [498, 0, 1, "", "is_unique"], [499, 0, 1, "", "kurtosis"], [500, 0, 1, "", "last"], [501, 0, 1, "", "le"], [502, 0, 1, "", "len"], [503, 0, 1, "", "limit"], [544, 0, 1, "", "log"], [545, 0, 1, "", "log10"], [546, 0, 1, "", "log1p"], [547, 0, 1, "", "lower_bound"], [548, 0, 1, "", "lt"], [549, 0, 1, "", "map_batches"], [550, 0, 1, "", "map_elements"], [551, 0, 1, "", "max"], [552, 0, 1, "", "mean"], [553, 0, 1, "", "median"], [569, 0, 1, "", "min"], [570, 0, 1, "", "mod"], [571, 0, 1, "", "mode"], [572, 0, 1, "", "mul"], [573, 0, 1, "", "n_unique"], [583, 0, 1, "", "nan_max"], [584, 0, 1, "", "nan_min"], [585, 0, 1, "", "ne"], [586, 0, 1, "", "ne_missing"], [587, 0, 1, "", "neg"], [588, 0, 1, "", "not_"], [589, 0, 1, "", "null_count"], [590, 0, 1, "", "or_"], [591, 0, 1, "", "over"], [592, 0, 1, "", "pct_change"], [593, 0, 1, "", "peak_max"], [594, 0, 1, "", "peak_min"], [595, 0, 1, "", "pipe"], [596, 0, 1, "", "pow"], [597, 0, 1, "", "product"], [598, 0, 1, "", "qcut"], [599, 0, 1, "", "quantile"], [600, 0, 1, "", "radians"], [601, 0, 1, "", "rank"], [602, 0, 1, "", "rechunk"], [603, 0, 1, "", "reinterpret"], [604, 0, 1, "", "repeat_by"], [605, 0, 1, "", "replace"], [606, 0, 1, "", "replace_strict"], [607, 0, 1, "", "reshape"], [608, 0, 1, "", "reverse"], [609, 0, 1, "", "rle"], [610, 0, 1, "", "rle_id"], [611, 0, 1, "", "rolling"], [612, 0, 1, "", "rolling_map"], [613, 0, 1, "", "rolling_max"], [614, 0, 1, "", "rolling_max_by"], [615, 0, 1, "", "rolling_mean"], [616, 0, 1, "", "rolling_mean_by"], [617, 0, 1, "", "rolling_median"], [618, 0, 1, "", "rolling_median_by"], [619, 0, 1, "", "rolling_min"], [620, 0, 1, "", "rolling_min_by"], [621, 0, 1, "", "rolling_quantile"], [622, 0, 1, "", "rolling_quantile_by"], [623, 0, 1, "", "rolling_skew"], [624, 0, 1, "", "rolling_std"], [625, 0, 1, "", "rolling_std_by"], [626, 0, 1, "", "rolling_sum"], [627, 0, 1, "", "rolling_sum_by"], [628, 0, 1, "", "rolling_var"], [629, 0, 1, "", "rolling_var_by"], [630, 0, 1, "", "round"], [631, 0, 1, "", "round_sig_figs"], [632, 0, 1, "", "sample"], [633, 0, 1, "", "search_sorted"], [634, 0, 1, "", "set_sorted"], [635, 0, 1, "", "shift"], [636, 0, 1, "", "shrink_dtype"], [637, 0, 1, "", "shuffle"], [638, 0, 1, "", "sign"], [639, 0, 1, "", "sin"], [640, 0, 1, "", "sinh"], [641, 0, 1, "", "skew"], [642, 0, 1, "", "slice"], [643, 0, 1, "", "sort"], [644, 0, 1, "", "sort_by"], [645, 0, 1, "", "sqrt"], [646, 0, 1, "", "std"], [700, 0, 1, "", "sub"], [701, 0, 1, "", "sum"], [702, 0, 1, "", "tail"], [703, 0, 1, "", "tan"], [704, 0, 1, "", "tanh"], [705, 0, 1, "", "to_physical"], [706, 0, 1, "", "top_k"], [707, 0, 1, "", "top_k_by"], [708, 0, 1, "", "truediv"], [709, 0, 1, "", "unique"], [710, 0, 1, "", "unique_counts"], [711, 0, 1, "", "upper_bound"], [712, 0, 1, "", "value_counts"], [713, 0, 1, "", "var"], [714, 0, 1, "", "where"], [715, 0, 1, "", "xor"]], "polars.Expr.arr": [[346, 0, 1, "", "all"], [347, 0, 1, "", "any"], [348, 0, 1, "", "arg_max"], [349, 0, 1, "", "arg_min"], [350, 0, 1, "", "contains"], [351, 0, 1, "", "count_matches"], [352, 0, 1, "", "explode"], [353, 0, 1, "", "first"], [354, 0, 1, "", "get"], [355, 0, 1, "", "join"], [356, 0, 1, "", "last"], [357, 0, 1, "", "max"], [358, 0, 1, "", "median"], [359, 0, 1, "", "min"], [360, 0, 1, "", "n_unique"], [361, 0, 1, "", "reverse"], [362, 0, 1, "", "shift"], [363, 0, 1, "", "sort"], [364, 0, 1, "", "std"], [365, 0, 1, "", "sum"], [366, 0, 1, "", "to_list"], [367, 0, 1, "", "to_struct"], [368, 0, 1, "", "unique"], [369, 0, 1, "", "var"]], "polars.Expr.bin": [[371, 0, 1, "", "contains"], [372, 0, 1, "", "decode"], [373, 0, 1, "", "encode"], [374, 0, 1, "", "ends_with"], [375, 0, 1, "", "size"], [376, 0, 1, "", "starts_with"]], "polars.Expr.cat": [[389, 0, 1, "", "get_categories"]], "polars.Expr.dt": [[410, 0, 1, "", "add_business_days"], [411, 0, 1, "", "base_utc_offset"], [412, 0, 1, "", "cast_time_unit"], [413, 0, 1, "", "century"], [414, 0, 1, "", "combine"], [415, 0, 1, "", "convert_time_zone"], [416, 0, 1, "", "date"], [417, 0, 1, "", "datetime"], [418, 0, 1, "", "day"], [419, 0, 1, "", "dst_offset"], [420, 0, 1, "", "epoch"], [421, 0, 1, "", "hour"], [422, 0, 1, "", "is_leap_year"], [423, 0, 1, "", "iso_year"], [424, 0, 1, "", "microsecond"], [425, 0, 1, "", "millennium"], [426, 0, 1, "", "millisecond"], [427, 0, 1, "", "minute"], [428, 0, 1, "", "month"], [429, 0, 1, "", "month_end"], [430, 0, 1, "", "month_start"], [431, 0, 1, "", "nanosecond"], [432, 0, 1, "", "offset_by"], [433, 0, 1, "", "ordinal_day"], [434, 0, 1, "", "quarter"], [435, 0, 1, "", "replace_time_zone"], [436, 0, 1, "", "round"], [437, 0, 1, "", "second"], [438, 0, 1, "", "strftime"], [439, 0, 1, "", "time"], [440, 0, 1, "", "timestamp"], [441, 0, 1, "", "to_string"], [442, 0, 1, "", "total_days"], [443, 0, 1, "", "total_hours"], [444, 0, 1, "", "total_microseconds"], [445, 0, 1, "", "total_milliseconds"], [446, 0, 1, "", "total_minutes"], [447, 0, 1, "", "total_nanoseconds"], [448, 0, 1, "", "total_seconds"], [449, 0, 1, "", "truncate"], [450, 0, 1, "", "week"], [451, 0, 1, "", "weekday"], [452, 0, 1, "", "with_time_unit"], [453, 0, 1, "", "year"]], "polars.Expr.list": [[504, 0, 1, "", "all"], [505, 0, 1, "", "any"], [506, 0, 1, "", "arg_max"], [507, 0, 1, "", "arg_min"], [508, 0, 1, "", "concat"], [509, 0, 1, "", "contains"], [510, 0, 1, "", "count_matches"], [511, 0, 1, "", "diff"], [512, 0, 1, "", "drop_nulls"], [513, 0, 1, "", "eval"], [514, 0, 1, "", "explode"], [515, 0, 1, "", "first"], [516, 0, 1, "", "gather"], [517, 0, 1, "", "gather_every"], [518, 0, 1, "", "get"], [519, 0, 1, "", "head"], [520, 0, 1, "", "join"], [521, 0, 1, "", "last"], [522, 0, 1, "", "len"], [523, 0, 1, "", "max"], [524, 0, 1, "", "mean"], [525, 0, 1, "", "median"], [526, 0, 1, "", "min"], [527, 0, 1, "", "n_unique"], [528, 0, 1, "", "reverse"], [529, 0, 1, "", "sample"], [530, 0, 1, "", "set_difference"], [531, 0, 1, "", "set_intersection"], [532, 0, 1, "", "set_symmetric_difference"], [533, 0, 1, "", "set_union"], [534, 0, 1, "", "shift"], [535, 0, 1, "", "slice"], [536, 0, 1, "", "sort"], [537, 0, 1, "", "std"], [538, 0, 1, "", "sum"], [539, 0, 1, "", "tail"], [540, 0, 1, "", "to_array"], [541, 0, 1, "", "to_struct"], [542, 0, 1, "", "unique"], [543, 0, 1, "", "var"]], "polars.Expr.meta": [[554, 0, 1, "", "eq"], [555, 0, 1, "", "has_multiple_outputs"], [556, 0, 1, "", "is_column"], [557, 0, 1, "", "is_column_selection"], [558, 0, 1, "", "is_literal"], [559, 0, 1, "", "is_regex_projection"], [560, 0, 1, "", "ne"], [561, 0, 1, "", "output_name"], [562, 0, 1, "", "pop"], [563, 0, 1, "", "root_names"], [564, 0, 1, "", "serialize"], [565, 0, 1, "", "show_graph"], [566, 0, 1, "", "tree_format"], [567, 0, 1, "", "undo_aliases"], [568, 0, 1, "", "write_json"]], "polars.Expr.name": [[574, 0, 1, "", "keep"], [575, 0, 1, "", "map"], [576, 0, 1, "", "map_fields"], [577, 0, 1, "", "prefix"], [578, 0, 1, "", "prefix_fields"], [579, 0, 1, "", "suffix"], [580, 0, 1, "", "suffix_fields"], [581, 0, 1, "", "to_lowercase"], [582, 0, 1, "", "to_uppercase"]], "polars.Expr.str": [[647, 0, 1, "", "concat"], [648, 0, 1, "", "contains"], [649, 0, 1, "", "contains_any"], [650, 0, 1, "", "count_matches"], [651, 0, 1, "", "decode"], [652, 0, 1, "", "encode"], [653, 0, 1, "", "ends_with"], [654, 0, 1, "", "escape_regex"], [655, 0, 1, "", "explode"], [656, 0, 1, "", "extract"], [657, 0, 1, "", "extract_all"], [658, 0, 1, "", "extract_groups"], [659, 0, 1, "", "extract_many"], [660, 0, 1, "", "find"], [661, 0, 1, "", "find_many"], [662, 0, 1, "", "head"], [663, 0, 1, "", "join"], [664, 0, 1, "", "json_decode"], [665, 0, 1, "", "json_path_match"], [666, 0, 1, "", "len_bytes"], [667, 0, 1, "", "len_chars"], [668, 0, 1, "", "pad_end"], [669, 0, 1, "", "pad_start"], [670, 0, 1, "", "replace"], [671, 0, 1, "", "replace_all"], [672, 0, 1, "", "replace_many"], [673, 0, 1, "", "reverse"], [674, 0, 1, "", "slice"], [675, 0, 1, "", "split"], [676, 0, 1, "", "split_exact"], [677, 0, 1, "", "splitn"], [678, 0, 1, "", "starts_with"], [679, 0, 1, "", "strip_chars"], [680, 0, 1, "", "strip_chars_end"], [681, 0, 1, "", "strip_chars_start"], [682, 0, 1, "", "strip_prefix"], [683, 0, 1, "", "strip_suffix"], [684, 0, 1, "", "strptime"], [685, 0, 1, "", "tail"], [686, 0, 1, "", "to_date"], [687, 0, 1, "", "to_datetime"], [688, 0, 1, "", "to_decimal"], [689, 0, 1, "", "to_integer"], [690, 0, 1, "", "to_lowercase"], [691, 0, 1, "", "to_time"], [692, 0, 1, "", "to_titlecase"], [693, 0, 1, "", "to_uppercase"], [694, 0, 1, "", "zfill"]], "polars.Expr.struct": [[695, 0, 1, "", "field"], [696, 0, 1, "", "json_encode"], [697, 0, 1, "", "rename_fields"], [698, 0, 1, "", "unnest"], [699, 0, 1, "", "with_fields"]], "polars.LazyFrame": [[814, 0, 1, "", "approx_n_unique"], [815, 0, 1, "", "bottom_k"], [816, 0, 1, "", "cache"], [817, 0, 1, "", "cast"], [818, 0, 1, "", "clear"], [819, 0, 1, "", "clone"], [820, 0, 1, "", "collect"], [821, 0, 1, "", "collect_async"], [822, 0, 1, "", "collect_schema"], [823, 2, 1, "", "columns"], [824, 0, 1, "", "count"], [825, 0, 1, "", "describe"], [826, 0, 1, "", "deserialize"], [827, 0, 1, "", "drop"], [828, 0, 1, "", "drop_nans"], [829, 0, 1, "", "drop_nulls"], [830, 2, 1, "", "dtypes"], [831, 0, 1, "", "explain"], [832, 0, 1, "", "explode"], [833, 0, 1, "", "fill_nan"], [834, 0, 1, "", "fill_null"], [835, 0, 1, "", "filter"], [836, 0, 1, "", "first"], [837, 0, 1, "", "gather_every"], [838, 0, 1, "", "group_by"], [839, 0, 1, "", "group_by_dynamic"], [840, 0, 1, "", "head"], [841, 0, 1, "", "inspect"], [842, 0, 1, "", "interpolate"], [843, 0, 1, "", "join"], [844, 0, 1, "", "join_asof"], [845, 0, 1, "", "join_where"], [846, 0, 1, "", "last"], [847, 0, 1, "", "lazy"], [848, 0, 1, "", "limit"], [849, 0, 1, "", "map_batches"], [850, 0, 1, "", "max"], [851, 0, 1, "", "mean"], [852, 0, 1, "", "median"], [853, 0, 1, "", "melt"], [854, 0, 1, "", "merge_sorted"], [855, 0, 1, "", "min"], [856, 0, 1, "", "null_count"], [857, 0, 1, "", "pipe"], [858, 0, 1, "", "profile"], [859, 0, 1, "", "quantile"], [860, 0, 1, "", "rename"], [861, 0, 1, "", "reverse"], [862, 0, 1, "", "rolling"], [863, 2, 1, "", "schema"], [864, 0, 1, "", "select"], [865, 0, 1, "", "select_seq"], [866, 0, 1, "", "serialize"], [867, 0, 1, "", "set_sorted"], [868, 0, 1, "", "shift"], [869, 0, 1, "", "show_graph"], [45, 0, 1, "", "sink_csv"], [46, 0, 1, "", "sink_ipc"], [47, 0, 1, "", "sink_ndjson"], [48, 0, 1, "", "sink_parquet"], [870, 0, 1, "", "slice"], [871, 0, 1, "", "sort"], [872, 0, 1, "", "sql"], [873, 0, 1, "", "std"], [874, 0, 1, "", "sum"], [875, 0, 1, "", "tail"], [876, 0, 1, "", "top_k"], [877, 0, 1, "", "unique"], [878, 0, 1, "", "unnest"], [879, 0, 1, "", "unpivot"], [880, 0, 1, "", "update"], [881, 0, 1, "", "var"], [882, 2, 1, "", "width"], [883, 0, 1, "", "with_columns"], [884, 0, 1, "", "with_columns_seq"], [885, 0, 1, "", "with_context"], [886, 0, 1, "", "with_row_count"], [887, 0, 1, "", "with_row_index"]], "polars.SQLContext": [[1328, 0, 1, "", "__enter__"], [1328, 0, 1, "", "__exit__"], [1328, 0, 1, "", "__init__"], [1309, 0, 1, "", "execute"], [1310, 0, 1, "", "execute_global"], [1311, 0, 1, "", "register"], [1312, 0, 1, "", "register_globals"], [1313, 0, 1, "", "register_many"], [1314, 0, 1, "", "tables"], [1315, 0, 1, "", "unregister"]], "polars.Series": [[921, 0, 1, "", "__array__"], [922, 0, 1, "", "__arrow_c_stream__"], [923, 0, 1, "", "__getitem__"], [924, 0, 1, "", "abs"], [925, 0, 1, "", "alias"], [926, 0, 1, "", "all"], [927, 0, 1, "", "any"], [928, 0, 1, "", "append"], [929, 0, 1, "", "approx_n_unique"], [930, 0, 1, "", "arccos"], [931, 0, 1, "", "arccosh"], [932, 0, 1, "", "arcsin"], [933, 0, 1, "", "arcsinh"], [934, 0, 1, "", "arctan"], [935, 0, 1, "", "arctanh"], [936, 0, 1, "", "arg_max"], [937, 0, 1, "", "arg_min"], [938, 0, 1, "", "arg_sort"], [939, 0, 1, "", "arg_true"], [940, 0, 1, "", "arg_unique"], [971, 0, 1, "", "bitwise_and"], [972, 0, 1, "", "bitwise_count_ones"], [973, 0, 1, "", "bitwise_count_zeros"], [974, 0, 1, "", "bitwise_leading_ones"], [975, 0, 1, "", "bitwise_leading_zeros"], [976, 0, 1, "", "bitwise_or"], [977, 0, 1, "", "bitwise_trailing_ones"], [978, 0, 1, "", "bitwise_trailing_zeros"], [979, 0, 1, "", "bitwise_xor"], [980, 0, 1, "", "bottom_k"], [981, 0, 1, "", "cast"], [986, 0, 1, "", "cbrt"], [987, 0, 1, "", "ceil"], [988, 0, 1, "", "chunk_lengths"], [989, 0, 1, "", "clear"], [990, 0, 1, "", "clip"], [991, 0, 1, "", "clone"], [992, 0, 1, "", "cos"], [993, 0, 1, "", "cosh"], [994, 0, 1, "", "cot"], [995, 0, 1, "", "count"], [996, 0, 1, "", "cum_count"], [997, 0, 1, "", "cum_max"], [998, 0, 1, "", "cum_min"], [999, 0, 1, "", "cum_prod"], [1000, 0, 1, "", "cum_sum"], [1001, 0, 1, "", "cumulative_eval"], [1002, 0, 1, "", "cut"], [1003, 0, 1, "", "describe"], [1004, 0, 1, "", "diff"], [1005, 0, 1, "", "dot"], [1006, 0, 1, "", "drop_nans"], [1007, 0, 1, "", "drop_nulls"], [1056, 2, 1, "", "dtype"], [1057, 0, 1, "", "entropy"], [1058, 0, 1, "", "eq"], [1059, 0, 1, "", "eq_missing"], [1060, 0, 1, "", "equals"], [1061, 0, 1, "", "estimated_size"], [1062, 0, 1, "", "ewm_mean"], [1063, 0, 1, "", "ewm_mean_by"], [1064, 0, 1, "", "ewm_std"], [1065, 0, 1, "", "ewm_var"], [1066, 0, 1, "", "exp"], [1067, 0, 1, "", "explode"], [1068, 0, 1, "", "extend"], [1069, 0, 1, "", "extend_constant"], [1070, 0, 1, "", "fill_nan"], [1071, 0, 1, "", "fill_null"], [1072, 0, 1, "", "filter"], [1073, 0, 1, "", "first"], [1074, 2, 1, "", "flags"], [1075, 0, 1, "", "floor"], [1076, 0, 1, "", "gather"], [1077, 0, 1, "", "gather_every"], [1078, 0, 1, "", "ge"], [1079, 0, 1, "", "get_chunks"], [1080, 0, 1, "", "gt"], [1081, 0, 1, "", "has_nulls"], [1082, 0, 1, "", "has_validity"], [1083, 0, 1, "", "hash"], [1084, 0, 1, "", "head"], [1085, 0, 1, "", "hist"], [1086, 0, 1, "", "implode"], [1087, 0, 1, "", "interpolate"], [1088, 0, 1, "", "interpolate_by"], [1089, 0, 1, "", "is_between"], [1090, 0, 1, "", "is_duplicated"], [1091, 0, 1, "", "is_empty"], [1092, 0, 1, "", "is_finite"], [1093, 0, 1, "", "is_first_distinct"], [1094, 0, 1, "", "is_in"], [1095, 0, 1, "", "is_infinite"], [1096, 0, 1, "", "is_last_distinct"], [1097, 0, 1, "", "is_nan"], [1098, 0, 1, "", "is_not_nan"], [1099, 0, 1, "", "is_not_null"], [1100, 0, 1, "", "is_null"], [1101, 0, 1, "", "is_sorted"], [1102, 0, 1, "", "is_unique"], [1103, 0, 1, "", "item"], [1104, 0, 1, "", "kurtosis"], [1105, 0, 1, "", "last"], [1106, 0, 1, "", "le"], [1107, 0, 1, "", "len"], [1108, 0, 1, "", "limit"], [1149, 0, 1, "", "log"], [1150, 0, 1, "", "log10"], [1151, 0, 1, "", "log1p"], [1152, 0, 1, "", "lower_bound"], [1153, 0, 1, "", "lt"], [1154, 0, 1, "", "map_elements"], [1155, 0, 1, "", "max"], [1156, 0, 1, "", "mean"], [1157, 0, 1, "", "median"], [1158, 0, 1, "", "min"], [1159, 0, 1, "", "mode"], [1160, 0, 1, "", "n_chunks"], [1161, 0, 1, "", "n_unique"], [1162, 2, 1, "", "name"], [1163, 0, 1, "", "nan_max"], [1164, 0, 1, "", "nan_min"], [1165, 0, 1, "", "ne"], [1166, 0, 1, "", "ne_missing"], [1167, 0, 1, "", "new_from_index"], [1168, 0, 1, "", "not_"], [1169, 0, 1, "", "null_count"], [1170, 0, 1, "", "pct_change"], [1171, 0, 1, "", "peak_max"], [1172, 0, 1, "", "peak_min"], [1305, 2, 1, "", "plot"], [1173, 0, 1, "", "pow"], [1174, 0, 1, "", "product"], [1175, 0, 1, "", "qcut"], [1176, 0, 1, "", "quantile"], [1177, 0, 1, "", "rank"], [1178, 0, 1, "", "rechunk"], [1179, 0, 1, "", "reinterpret"], [1180, 0, 1, "", "rename"], [1181, 0, 1, "", "replace"], [1182, 0, 1, "", "replace_strict"], [1183, 0, 1, "", "reshape"], [1184, 0, 1, "", "reverse"], [1185, 0, 1, "", "rle"], [1186, 0, 1, "", "rle_id"], [1187, 0, 1, "", "rolling_map"], [1188, 0, 1, "", "rolling_max"], [1189, 0, 1, "", "rolling_mean"], [1190, 0, 1, "", "rolling_median"], [1191, 0, 1, "", "rolling_min"], [1192, 0, 1, "", "rolling_quantile"], [1193, 0, 1, "", "rolling_skew"], [1194, 0, 1, "", "rolling_std"], [1195, 0, 1, "", "rolling_sum"], [1196, 0, 1, "", "rolling_var"], [1197, 0, 1, "", "round"], [1198, 0, 1, "", "round_sig_figs"], [1199, 0, 1, "", "sample"], [1200, 0, 1, "", "scatter"], [1201, 0, 1, "", "search_sorted"], [1202, 0, 1, "", "set"], [1203, 0, 1, "", "set_sorted"], [1204, 2, 1, "", "shape"], [1205, 0, 1, "", "shift"], [1206, 0, 1, "", "shrink_dtype"], [1207, 0, 1, "", "shrink_to_fit"], [1208, 0, 1, "", "shuffle"], [1209, 0, 1, "", "sign"], [1210, 0, 1, "", "sin"], [1211, 0, 1, "", "sinh"], [1212, 0, 1, "", "skew"], [1213, 0, 1, "", "slice"], [1214, 0, 1, "", "sort"], [1215, 0, 1, "", "sqrt"], [1216, 0, 1, "", "std"], [1271, 0, 1, "", "sum"], [1272, 0, 1, "", "tail"], [1273, 0, 1, "", "tan"], [1274, 0, 1, "", "tanh"], [1275, 0, 1, "", "to_arrow"], [1276, 0, 1, "", "to_dummies"], [1277, 0, 1, "", "to_frame"], [1278, 0, 1, "", "to_init_repr"], [1279, 0, 1, "", "to_jax"], [1280, 0, 1, "", "to_list"], [1281, 0, 1, "", "to_numpy"], [1282, 0, 1, "", "to_pandas"], [1283, 0, 1, "", "to_physical"], [1284, 0, 1, "", "to_torch"], [1285, 0, 1, "", "top_k"], [1286, 0, 1, "", "unique"], [1287, 0, 1, "", "unique_counts"], [1288, 0, 1, "", "upper_bound"], [1289, 0, 1, "", "value_counts"], [1290, 0, 1, "", "var"], [1291, 0, 1, "", "zip_with"]], "polars.Series.arr": [[941, 0, 1, "", "all"], [942, 0, 1, "", "any"], [943, 0, 1, "", "arg_max"], [944, 0, 1, "", "arg_min"], [945, 0, 1, "", "contains"], [946, 0, 1, "", "count_matches"], [947, 0, 1, "", "explode"], [948, 0, 1, "", "first"], [949, 0, 1, "", "get"], [950, 0, 1, "", "join"], [951, 0, 1, "", "last"], [952, 0, 1, "", "max"], [953, 0, 1, "", "median"], [954, 0, 1, "", "min"], [955, 0, 1, "", "n_unique"], [956, 0, 1, "", "reverse"], [957, 0, 1, "", "shift"], [958, 0, 1, "", "sort"], [959, 0, 1, "", "std"], [960, 0, 1, "", "sum"], [961, 0, 1, "", "to_list"], [962, 0, 1, "", "to_struct"], [963, 0, 1, "", "unique"], [964, 0, 1, "", "var"]], "polars.Series.bin": [[965, 0, 1, "", "contains"], [966, 0, 1, "", "decode"], [967, 0, 1, "", "encode"], [968, 0, 1, "", "ends_with"], [969, 0, 1, "", "size"], [970, 0, 1, "", "starts_with"]], "polars.Series.cat": [[982, 0, 1, "", "get_categories"], [983, 0, 1, "", "is_local"], [984, 0, 1, "", "to_local"], [985, 0, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1008, 0, 1, "", "add_business_days"], [1009, 0, 1, "", "base_utc_offset"], [1010, 0, 1, "", "cast_time_unit"], [1011, 0, 1, "", "century"], [1012, 0, 1, "", "combine"], [1013, 0, 1, "", "convert_time_zone"], [1014, 0, 1, "", "date"], [1015, 0, 1, "", "datetime"], [1016, 0, 1, "", "day"], [1017, 0, 1, "", "dst_offset"], [1018, 0, 1, "", "epoch"], [1019, 0, 1, "", "hour"], [1020, 0, 1, "", "is_leap_year"], [1021, 0, 1, "", "iso_year"], [1022, 0, 1, "", "max"], [1023, 0, 1, "", "mean"], [1024, 0, 1, "", "median"], [1025, 0, 1, "", "microsecond"], [1026, 0, 1, "", "millennium"], [1027, 0, 1, "", "millisecond"], [1028, 0, 1, "", "min"], [1029, 0, 1, "", "minute"], [1030, 0, 1, "", "month"], [1031, 0, 1, "", "month_end"], [1032, 0, 1, "", "month_start"], [1033, 0, 1, "", "nanosecond"], [1034, 0, 1, "", "offset_by"], [1035, 0, 1, "", "ordinal_day"], [1036, 0, 1, "", "quarter"], [1037, 0, 1, "", "replace_time_zone"], [1038, 0, 1, "", "round"], [1039, 0, 1, "", "second"], [1040, 0, 1, "", "strftime"], [1041, 0, 1, "", "time"], [1042, 0, 1, "", "timestamp"], [1043, 0, 1, "", "to_string"], [1044, 0, 1, "", "total_days"], [1045, 0, 1, "", "total_hours"], [1046, 0, 1, "", "total_microseconds"], [1047, 0, 1, "", "total_milliseconds"], [1048, 0, 1, "", "total_minutes"], [1049, 0, 1, "", "total_nanoseconds"], [1050, 0, 1, "", "total_seconds"], [1051, 0, 1, "", "truncate"], [1052, 0, 1, "", "week"], [1053, 0, 1, "", "weekday"], [1054, 0, 1, "", "with_time_unit"], [1055, 0, 1, "", "year"]], "polars.Series.list": [[1109, 0, 1, "", "all"], [1110, 0, 1, "", "any"], [1111, 0, 1, "", "arg_max"], [1112, 0, 1, "", "arg_min"], [1113, 0, 1, "", "concat"], [1114, 0, 1, "", "contains"], [1115, 0, 1, "", "count_matches"], [1116, 0, 1, "", "diff"], [1117, 0, 1, "", "drop_nulls"], [1118, 0, 1, "", "eval"], [1119, 0, 1, "", "explode"], [1120, 0, 1, "", "first"], [1121, 0, 1, "", "gather"], [1122, 0, 1, "", "gather_every"], [1123, 0, 1, "", "get"], [1124, 0, 1, "", "head"], [1125, 0, 1, "", "join"], [1126, 0, 1, "", "last"], [1127, 0, 1, "", "len"], [1128, 0, 1, "", "max"], [1129, 0, 1, "", "mean"], [1130, 0, 1, "", "median"], [1131, 0, 1, "", "min"], [1132, 0, 1, "", "n_unique"], [1133, 0, 1, "", "reverse"], [1134, 0, 1, "", "sample"], [1135, 0, 1, "", "set_difference"], [1136, 0, 1, "", "set_intersection"], [1137, 0, 1, "", "set_symmetric_difference"], [1138, 0, 1, "", "set_union"], [1139, 0, 1, "", "shift"], [1140, 0, 1, "", "slice"], [1141, 0, 1, "", "sort"], [1142, 0, 1, "", "std"], [1143, 0, 1, "", "sum"], [1144, 0, 1, "", "tail"], [1145, 0, 1, "", "to_array"], [1146, 0, 1, "", "to_struct"], [1147, 0, 1, "", "unique"], [1148, 0, 1, "", "var"]], "polars.Series.str": [[1217, 0, 1, "", "concat"], [1218, 0, 1, "", "contains"], [1219, 0, 1, "", "contains_any"], [1220, 0, 1, "", "count_matches"], [1221, 0, 1, "", "decode"], [1222, 0, 1, "", "encode"], [1223, 0, 1, "", "ends_with"], [1224, 0, 1, "", "escape_regex"], [1225, 0, 1, "", "explode"], [1226, 0, 1, "", "extract"], [1227, 0, 1, "", "extract_all"], [1228, 0, 1, "", "extract_groups"], [1229, 0, 1, "", "extract_many"], [1230, 0, 1, "", "find"], [1231, 0, 1, "", "find_many"], [1232, 0, 1, "", "head"], [1233, 0, 1, "", "join"], [1234, 0, 1, "", "json_decode"], [1235, 0, 1, "", "json_path_match"], [1236, 0, 1, "", "len_bytes"], [1237, 0, 1, "", "len_chars"], [1238, 0, 1, "", "pad_end"], [1239, 0, 1, "", "pad_start"], [1240, 0, 1, "", "replace"], [1241, 0, 1, "", "replace_all"], [1242, 0, 1, "", "replace_many"], [1243, 0, 1, "", "reverse"], [1244, 0, 1, "", "slice"], [1245, 0, 1, "", "split"], [1246, 0, 1, "", "split_exact"], [1247, 0, 1, "", "splitn"], [1248, 0, 1, "", "starts_with"], [1249, 0, 1, "", "strip_chars"], [1250, 0, 1, "", "strip_chars_end"], [1251, 0, 1, "", "strip_chars_start"], [1252, 0, 1, "", "strip_prefix"], [1253, 0, 1, "", "strip_suffix"], [1254, 0, 1, "", "strptime"], [1255, 0, 1, "", "tail"], [1256, 0, 1, "", "to_date"], [1257, 0, 1, "", "to_datetime"], [1258, 0, 1, "", "to_decimal"], [1259, 0, 1, "", "to_integer"], [1260, 0, 1, "", "to_lowercase"], [1261, 0, 1, "", "to_time"], [1262, 0, 1, "", "to_titlecase"], [1263, 0, 1, "", "to_uppercase"], [1264, 0, 1, "", "zfill"]], "polars.Series.struct": [[1265, 0, 1, "", "field"], [1266, 3, 1, "", "fields"], [1267, 0, 1, "", "json_encode"], [1268, 0, 1, "", "rename_fields"], [1269, 3, 1, "", "schema"], [1270, 0, 1, "", "unnest"]], "polars.StringCache": [[49, 0, 1, "", "__init__"]], "polars.api": [[51, 4, 1, "", "register_dataframe_namespace"], [52, 4, 1, "", "register_expr_namespace"], [53, 4, 1, "", "register_lazyframe_namespace"], [54, 4, 1, "", "register_series_namespace"]], "polars.dataframe.group_by.GroupBy": [[296, 0, 1, "", "__iter__"], [297, 0, 1, "", "agg"], [298, 0, 1, "", "all"], [299, 0, 1, "", "count"], [300, 0, 1, "", "first"], [301, 0, 1, "", "head"], [302, 0, 1, "", "last"], [303, 0, 1, "", "len"], [304, 0, 1, "", "map_groups"], [305, 0, 1, "", "max"], [306, 0, 1, "", "mean"], [307, 0, 1, "", "median"], [308, 0, 1, "", "min"], [309, 0, 1, "", "n_unique"], [310, 0, 1, "", "quantile"], [311, 0, 1, "", "sum"], [312, 0, 1, "", "tail"]], "polars.datatypes": [[59, 1, 1, "", "Array"], [60, 1, 1, "", "Binary"], [61, 1, 1, "", "Boolean"], [62, 1, 1, "", "Categorical"], [63, 1, 1, "", "DataType"], [64, 1, 1, "", "Date"], [65, 1, 1, "", "Datetime"], [66, 1, 1, "", "Decimal"], [67, 1, 1, "", "Duration"], [68, 1, 1, "", "Enum"], [69, 1, 1, "", "Float32"], [70, 1, 1, "", "Float64"], [71, 1, 1, "", "Int16"], [72, 1, 1, "", "Int32"], [73, 1, 1, "", "Int64"], [74, 1, 1, "", "Int8"], [75, 1, 1, "", "List"], [76, 1, 1, "", "Null"], [77, 1, 1, "", "Object"], [78, 1, 1, "", "String"], [79, 1, 1, "", "Struct"], [80, 1, 1, "", "Time"], [81, 1, 1, "", "UInt16"], [82, 1, 1, "", "UInt32"], [83, 1, 1, "", "UInt64"], [84, 1, 1, "", "UInt8"], [85, 1, 1, "", "Unknown"], [86, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[59, 0, 1, "", "__init__"]], "polars.datatypes.Binary": [[60, 0, 1, "", "__init__"]], "polars.datatypes.Boolean": [[61, 0, 1, "", "__init__"]], "polars.datatypes.Categorical": [[62, 0, 1, "", "__init__"]], "polars.datatypes.DataType": [[63, 0, 1, "", "__init__"]], "polars.datatypes.Date": [[64, 0, 1, "", "__init__"]], "polars.datatypes.Datetime": [[65, 0, 1, "", "__init__"]], "polars.datatypes.Decimal": [[66, 0, 1, "", "__init__"]], "polars.datatypes.Duration": [[67, 0, 1, "", "__init__"]], "polars.datatypes.Enum": [[68, 0, 1, "", "__init__"]], "polars.datatypes.Float32": [[69, 0, 1, "", "__init__"]], "polars.datatypes.Float64": [[70, 0, 1, "", "__init__"]], "polars.datatypes.Int16": [[71, 0, 1, "", "__init__"]], "polars.datatypes.Int32": [[72, 0, 1, "", "__init__"]], "polars.datatypes.Int64": [[73, 0, 1, "", "__init__"]], "polars.datatypes.Int8": [[74, 0, 1, "", "__init__"]], "polars.datatypes.List": [[75, 0, 1, "", "__init__"]], "polars.datatypes.Null": [[76, 0, 1, "", "__init__"]], "polars.datatypes.Object": [[77, 0, 1, "", "__init__"]], "polars.datatypes.String": [[78, 0, 1, "", "__init__"]], "polars.datatypes.Struct": [[79, 0, 1, "", "__init__"]], "polars.datatypes.Time": [[80, 0, 1, "", "__init__"]], "polars.datatypes.UInt16": [[81, 0, 1, "", "__init__"]], "polars.datatypes.UInt32": [[82, 0, 1, "", "__init__"]], "polars.datatypes.UInt64": [[83, 0, 1, "", "__init__"]], "polars.datatypes.UInt8": [[84, 0, 1, "", "__init__"]], "polars.datatypes.Unknown": [[85, 0, 1, "", "__init__"]], "polars.exceptions": [[90, 5, 1, "", "CategoricalRemappingWarning"], [91, 5, 1, "", "ChronoFormatWarning"], [92, 5, 1, "", "ColumnNotFoundError"], [93, 5, 1, "", "ComputeError"], [94, 5, 1, "", "CustomUFuncWarning"], [95, 5, 1, "", "DataOrientationWarning"], [96, 5, 1, "", "DuplicateError"], [97, 5, 1, "", "InvalidOperationError"], [98, 5, 1, "", "MapWithoutReturnDtypeWarning"], [99, 5, 1, "", "ModuleUpgradeRequiredError"], [100, 5, 1, "", "NoDataError"], [101, 5, 1, "", "NoRowsReturnedError"], [102, 5, 1, "", "OutOfBoundsError"], [103, 5, 1, "", "PanicException"], [104, 5, 1, "", "ParameterCollisionError"], [105, 5, 1, "", "PerformanceWarning"], [106, 5, 1, "", "PolarsError"], [107, 5, 1, "", "PolarsInefficientMapWarning"], [108, 5, 1, "", "PolarsWarning"], [109, 5, 1, "", "RowsError"], [110, 5, 1, "", "SQLInterfaceError"], [111, 5, 1, "", "SQLSyntaxError"], [112, 5, 1, "", "SchemaError"], [113, 5, 1, "", "SchemaFieldNotFoundError"], [114, 5, 1, "", "ShapeError"], [115, 5, 1, "", "StringCacheMismatchError"], [116, 5, 1, "", "StructFieldNotFoundError"], [117, 5, 1, "", "TooManyRowsReturnedError"], [118, 5, 1, "", "UnstableWarning"], [119, 5, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[129, 0, 1, "", "next_batches"]], "polars.lazyframe.engine_config": [[888, 1, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[888, 0, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[889, 0, 1, "", "agg"], [890, 0, 1, "", "all"], [891, 0, 1, "", "count"], [892, 0, 1, "", "first"], [893, 0, 1, "", "head"], [894, 0, 1, "", "last"], [895, 0, 1, "", "len"], [896, 0, 1, "", "map_groups"], [897, 0, 1, "", "max"], [898, 0, 1, "", "mean"], [899, 0, 1, "", "median"], [900, 0, 1, "", "min"], [901, 0, 1, "", "n_unique"], [902, 0, 1, "", "quantile"], [903, 0, 1, "", "sum"], [904, 0, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[905, 0, 1, "", "cancel"], [906, 0, 1, "", "fetch"], [907, 0, 1, "", "fetch_blocking"]], "polars.plugins": [[917, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[919, 4, 1, "", "all"], [919, 4, 1, "", "alpha"], [919, 4, 1, "", "alphanumeric"], [919, 4, 1, "", "binary"], [919, 4, 1, "", "boolean"], [919, 4, 1, "", "by_dtype"], [919, 4, 1, "", "by_index"], [919, 4, 1, "", "by_name"], [919, 4, 1, "", "categorical"], [919, 4, 1, "", "contains"], [919, 4, 1, "", "date"], [919, 4, 1, "", "datetime"], [919, 4, 1, "", "decimal"], [919, 4, 1, "", "digit"], [919, 4, 1, "", "duration"], [919, 4, 1, "", "ends_with"], [919, 4, 1, "", "exclude"], [919, 4, 1, "", "expand_selector"], [919, 4, 1, "", "first"], [919, 4, 1, "", "float"], [919, 4, 1, "", "integer"], [919, 4, 1, "", "is_selector"], [919, 4, 1, "", "last"], [919, 4, 1, "", "matches"], [919, 4, 1, "", "numeric"], [919, 4, 1, "", "signed_integer"], [919, 4, 1, "", "starts_with"], [919, 4, 1, "", "string"], [919, 4, 1, "", "temporal"], [919, 4, 1, "", "time"], [919, 4, 1, "", "unsigned_integer"]], "polars.testing": [[156, 4, 1, "", "assert_frame_equal"], [157, 4, 1, "", "assert_frame_not_equal"], [158, 4, 1, "", "assert_series_equal"], [159, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[160, 1, 1, "", "column"], [161, 4, 1, "", "columns"], [162, 4, 1, "", "create_list_strategy"], [163, 4, 1, "", "dataframes"], [164, 4, 1, "", "dtypes"], [165, 4, 1, "", "lists"], [166, 4, 1, "", "load_profile"], [167, 4, 1, "", "series"], [168, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[160, 0, 1, "", "__init__"]]}, "objnames": {"0": ["py", "method", "Python method"], "1": ["py", "class", "Python class"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "exception", "Python exception"], "6": ["py", "module", "Python module"]}, "objtypes": {"0": "py:method", "1": "py:class", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:exception", "6": "py:module"}, "terms": {"": [1, 11, 36, 37, 38, 39, 44, 45, 54, 59, 79, 89, 91, 97, 120, 127, 133, 134, 135, 136, 138, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 167, 179, 180, 191, 192, 195, 200, 203, 208, 209, 214, 220, 223, 224, 234, 241, 243, 248, 250, 253, 256, 257, 264, 273, 276, 281, 283, 284, 285, 286, 287, 292, 293, 318, 355, 387, 388, 415, 420, 438, 441, 461, 467, 471, 499, 520, 549, 550, 562, 571, 576, 583, 584, 591, 592, 603, 610, 644, 648, 656, 657, 658, 660, 662, 670, 671, 674, 675, 677, 684, 685, 686, 687, 691, 695, 697, 699, 707, 716, 717, 718, 719, 724, 731, 734, 737, 738, 747, 748, 750, 751, 757, 760, 761, 762, 763, 765, 767, 768, 770, 777, 779, 781, 782, 783, 789, 795, 799, 815, 817, 828, 829, 838, 839, 844, 853, 864, 865, 871, 876, 877, 878, 879, 880, 883, 884, 896, 913, 918, 919, 923, 924, 925, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 963, 964, 965, 966, 967, 968, 969, 970, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1011, 1012, 1013, 1016, 1017, 1018, 1020, 1022, 1023, 1024, 1026, 1027, 1028, 1031, 1032, 1035, 1038, 1039, 1040, 1043, 1051, 1053, 1054, 1055, 1056, 1061, 1062, 1064, 1065, 1066, 1067, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1081, 1083, 1084, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1232, 1233, 1234, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1300, 1305, 1309, 1313, 1316, 1323, 1324], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 37, 38, 39, 44, 48, 50, 51, 52, 54, 58, 66, 75, 121, 130, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 153, 155, 160, 161, 162, 163, 164, 165, 167, 170, 176, 177, 178, 180, 181, 182, 183, 185, 186, 187, 188, 189, 191, 193, 194, 198, 199, 200, 202, 203, 206, 207, 208, 209, 210, 214, 215, 219, 221, 222, 223, 226, 228, 230, 231, 232, 233, 234, 237, 238, 239, 240, 243, 244, 245, 248, 250, 252, 253, 254, 255, 256, 263, 264, 265, 266, 268, 273, 274, 275, 276, 277, 278, 280, 282, 286, 288, 289, 292, 294, 295, 297, 299, 300, 302, 304, 305, 306, 307, 308, 309, 310, 311, 318, 321, 322, 326, 328, 329, 331, 335, 336, 337, 338, 339, 340, 343, 344, 345, 348, 349, 351, 354, 364, 367, 369, 375, 388, 390, 391, 392, 393, 394, 395, 402, 403, 404, 408, 409, 410, 416, 417, 421, 424, 426, 427, 431, 437, 439, 441, 444, 445, 447, 448, 452, 455, 456, 457, 458, 459, 460, 462, 464, 465, 466, 467, 470, 471, 473, 475, 476, 478, 480, 482, 485, 486, 489, 492, 494, 495, 496, 497, 499, 501, 506, 507, 510, 513, 516, 517, 518, 524, 525, 537, 541, 543, 544, 545, 546, 548, 549, 551, 552, 553, 557, 562, 565, 568, 569, 570, 572, 574, 583, 584, 585, 586, 587, 589, 590, 592, 595, 596, 598, 599, 600, 601, 605, 606, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 636, 638, 639, 640, 641, 645, 646, 647, 650, 655, 656, 657, 660, 661, 699, 700, 701, 703, 704, 705, 708, 713, 714, 716, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 733, 735, 742, 746, 749, 755, 756, 758, 761, 764, 765, 766, 770, 772, 773, 778, 785, 786, 787, 788, 789, 790, 795, 799, 814, 817, 818, 819, 822, 824, 825, 827, 828, 830, 831, 833, 834, 835, 837, 838, 839, 842, 843, 847, 849, 852, 853, 856, 858, 859, 863, 864, 869, 871, 872, 873, 881, 883, 885, 886, 887, 889, 891, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 913, 919, 923, 930, 931, 932, 933, 934, 935, 936, 938, 940, 943, 949, 959, 962, 964, 969, 981, 984, 986, 987, 989, 992, 993, 994, 1001, 1002, 1003, 1005, 1006, 1007, 1008, 1015, 1019, 1023, 1024, 1025, 1027, 1029, 1033, 1039, 1043, 1046, 1047, 1049, 1050, 1054, 1057, 1062, 1063, 1064, 1065, 1070, 1075, 1077, 1082, 1083, 1085, 1087, 1088, 1092, 1095, 1097, 1098, 1099, 1100, 1103, 1104, 1111, 1112, 1115, 1118, 1121, 1122, 1123, 1129, 1130, 1142, 1146, 1148, 1149, 1150, 1151, 1152, 1156, 1157, 1163, 1164, 1170, 1173, 1175, 1176, 1177, 1181, 1182, 1186, 1187, 1189, 1190, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1201, 1209, 1210, 1211, 1212, 1215, 1216, 1217, 1220, 1225, 1226, 1227, 1230, 1231, 1235, 1240, 1273, 1274, 1276, 1279, 1281, 1282, 1283, 1284, 1288, 1290, 1300, 1305, 1309, 1315, 1317, 1318, 1319, 1322, 1323, 1325, 1326, 1328, 1330, 1331], "00": [27, 39, 65, 180, 187, 209, 288, 318, 411, 412, 415, 419, 429, 430, 432, 435, 436, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 614, 616, 618, 620, 622, 625, 627, 629, 684, 687, 691, 742, 743, 744, 745, 785, 786, 787, 799, 817, 825, 839, 913, 919, 1009, 1010, 1013, 1014, 1015, 1017, 1018, 1019, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1240, 1254, 1257, 1261, 1323], "000": [9, 10, 27, 39, 318, 1240, 1331], "0000": [280, 318, 1284, 1300, 1331], "000000": [372, 373, 441, 651, 966, 967, 1221], "00000001": [11, 715, 799], "00000010": [715, 799], "00000011": [715, 799], "00000100": [715, 799], "00001000": [715, 799], "00001010": [715, 799], "00001011": [715, 799], "0000e": 11, "0000ff": [372, 373, 651, 966, 967, 1221], "0001": 441, "000100": 441, "000101": 441, "0005": 919, "00050": 919, "000800": 1043, "001": [52, 694, 745, 1046, 1047, 1049, 1264], "002": [745, 1046, 1047, 1049], "005": [1057, 1300], "00prefix": 919, "00z": [684, 687, 1254, 1257], "01": [28, 50, 64, 65, 163, 180, 187, 207, 209, 224, 250, 288, 318, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 452, 453, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 684, 686, 687, 691, 726, 739, 740, 741, 742, 743, 744, 745, 799, 817, 825, 839, 844, 862, 913, 919, 1008, 1010, 1012, 1013, 1014, 1015, 1018, 1019, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1037, 1038, 1040, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1254, 1256, 1257, 1261, 1323, 1326], "010": [9, 689, 1259], "01000": 28, "01000010": [715, 799], "01000110": [715, 799], "012": [631, 799, 1198, 1300], "0123": [694, 1264], "01234": [631, 799, 1198, 1300], "012345": 1043, "015625": [1173, 1300], "02": [50, 180, 187, 207, 209, 250, 288, 318, 410, 412, 414, 420, 429, 430, 432, 435, 440, 441, 443, 446, 448, 452, 611, 614, 616, 618, 620, 622, 625, 627, 629, 630, 684, 686, 687, 691, 726, 739, 740, 741, 742, 743, 744, 745, 799, 817, 825, 839, 862, 913, 919, 962, 1010, 1012, 1014, 1015, 1018, 1019, 1024, 1025, 1029, 1031, 1032, 1033, 1037, 1038, 1041, 1042, 1045, 1048, 1050, 1051, 1146, 1254, 1256, 1257, 1261, 1323, 1324], "03": [50, 127, 133, 180, 209, 224, 250, 288, 318, 412, 414, 415, 420, 429, 430, 432, 435, 436, 438, 440, 441, 442, 443, 446, 448, 449, 452, 458, 471, 611, 614, 616, 618, 620, 622, 625, 627, 629, 686, 691, 739, 740, 741, 742, 743, 744, 745, 799, 817, 839, 844, 862, 913, 919, 1010, 1012, 1013, 1018, 1019, 1024, 1025, 1031, 1032, 1033, 1037, 1038, 1040, 1042, 1044, 1045, 1048, 1050, 1256, 1261], "037037": [1173, 1300], "04": [153, 180, 187, 209, 288, 318, 414, 415, 429, 430, 435, 436, 438, 442, 443, 446, 448, 452, 614, 616, 618, 620, 622, 625, 627, 629, 684, 726, 739, 742, 743, 745, 799, 817, 825, 839, 913, 919, 1013, 1025, 1029, 1031, 1032, 1033, 1037, 1040, 1044, 1045, 1048, 1050, 1054, 1254, 1323], "047198": 1325, "05": [16, 153, 156, 157, 158, 159, 163, 180, 187, 288, 318, 410, 413, 414, 415, 416, 417, 421, 424, 425, 426, 427, 429, 430, 431, 435, 437, 438, 439, 441, 442, 726, 739, 740, 742, 743, 817, 825, 913, 919, 1012, 1013, 1014, 1015, 1037, 1038, 1040, 1041, 1043, 1044, 1051, 1323, 1324, 1326], "050545": 127, "0522623626787952": [1104, 1300], "0545": [1014, 1015, 1041], "05t10": 1043, "06": [163, 180, 288, 318, 410, 414, 428, 434, 435, 436, 437, 449, 450, 739, 742, 817, 913, 919, 1008, 1037, 1038, 1043, 1051], "060": [416, 417, 421, 424, 426, 427, 431, 437, 439], "0601749420166": [195, 318], "06293300616044681": [1057, 1300], "07": [16, 133, 163, 187, 318, 410, 413, 414, 425, 435, 436, 441, 449, 684, 739, 740, 742, 743, 751, 825, 913, 919, 1008, 1012, 1037, 1043, 1254, 1323, 1326], "071068": [187, 318, 825, 913], "08": [133, 156, 157, 158, 159, 187, 224, 250, 265, 318, 410, 414, 429, 430, 436, 441, 611, 684, 743, 745, 799, 825, 844, 862, 913, 919, 1008, 1038, 1051, 1254, 1323, 1324], "085537": [1066, 1300], "09": [50, 133, 187, 250, 318, 410, 414, 429, 430, 441, 591, 611, 688, 739, 740, 742, 787, 799, 825, 862, 913, 919, 1008, 1258], "090909": [592, 799], "094395": 1325, "098612": [546, 799, 1149, 1151, 1300, 1322], "0999": [413, 425], "0_": [39, 318], "0m": [419, 1017], "0\u00b5": 441, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 48, 50, 51, 52, 53, 54, 58, 59, 75, 79, 92, 95, 96, 97, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 134, 137, 138, 139, 142, 143, 144, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 159, 160, 163, 167, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 349, 351, 352, 353, 354, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 502, 503, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 558, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 653, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 667, 670, 671, 672, 676, 677, 678, 679, 680, 681, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 721, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 795, 799, 814, 815, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 848, 850, 851, 852, 853, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 919, 923, 924, 925, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 969, 980, 981, 984, 986, 987, 988, 990, 991, 992, 993, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1111, 1112, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1226, 1228, 1229, 1230, 1231, 1233, 1234, 1235, 1236, 1237, 1240, 1241, 1242, 1246, 1247, 1264, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1300, 1305, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1331], "10": [13, 16, 17, 27, 34, 36, 38, 39, 40, 41, 44, 48, 50, 58, 127, 133, 134, 136, 147, 155, 182, 187, 191, 197, 206, 207, 209, 211, 213, 214, 215, 220, 224, 227, 238, 242, 244, 248, 250, 256, 265, 269, 292, 297, 300, 302, 305, 306, 307, 308, 309, 310, 311, 318, 329, 333, 341, 342, 343, 345, 392, 398, 401, 406, 410, 411, 413, 414, 416, 417, 419, 421, 424, 425, 426, 427, 429, 430, 431, 435, 436, 437, 439, 441, 449, 452, 458, 479, 480, 481, 485, 491, 503, 511, 517, 519, 525, 535, 537, 539, 543, 545, 561, 563, 574, 589, 591, 592, 595, 605, 606, 611, 642, 689, 699, 702, 715, 726, 727, 735, 740, 742, 743, 746, 749, 751, 753, 759, 760, 784, 787, 799, 820, 821, 825, 828, 839, 840, 842, 844, 848, 857, 858, 862, 864, 874, 875, 883, 889, 892, 894, 897, 898, 899, 900, 901, 902, 903, 913, 919, 990, 1004, 1008, 1009, 1011, 1012, 1017, 1026, 1037, 1043, 1051, 1054, 1057, 1063, 1084, 1094, 1108, 1116, 1124, 1130, 1140, 1142, 1144, 1148, 1150, 1154, 1170, 1182, 1200, 1202, 1259, 1272, 1279, 1281, 1284, 1300, 1309, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1326, 1331], "100": [10, 17, 27, 39, 123, 126, 130, 133, 134, 135, 138, 142, 143, 144, 147, 151, 225, 243, 261, 318, 441, 605, 606, 635, 649, 659, 661, 664, 672, 688, 744, 799, 845, 868, 913, 919, 1059, 1150, 1166, 1181, 1182, 1188, 1189, 1191, 1205, 1219, 1231, 1234, 1242, 1258, 1300, 1320, 1331], "1000": [135, 195, 274, 295, 318, 334, 799, 887, 913, 1046, 1150, 1278, 1300, 1331], "10000": [133, 222, 318], "100000": [10, 27], "1000000": [11, 1049], "1001": [295, 318, 887, 913], "1002": [295, 318, 887, 913], "10047419486152048166": [210, 318], "1005": [334, 799], "100_000": [849, 913], "100\u00b5": 441, "101": [9, 27, 225, 318, 414, 441, 689, 845, 913, 919, 1259, 1331], "101000": 414, "10101": [27, 1326], "1010101": 9, "101514": [187, 318, 825, 913], "102": [225, 318, 845, 913], "1024": [36, 44, 45, 48, 133, 134, 135, 143, 151, 318, 375, 913, 969], "1040361802642726": [1104, 1300], "107149": 1325, "10734580197236529959": [1083, 1300], "1073741824": [636, 799], "10783150408545073287": [210, 318], "107_930_000": 1309, "10_000": [39, 318], "10i": [209, 318, 839, 913], "10m": [436, 449, 1038, 1051], "10t00": 441, "11": [10, 16, 44, 48, 155, 163, 178, 187, 224, 250, 318, 329, 429, 430, 432, 436, 449, 473, 485, 517, 568, 592, 601, 611, 612, 626, 642, 715, 782, 787, 795, 799, 814, 820, 821, 825, 840, 844, 848, 858, 862, 875, 913, 919, 1034, 1038, 1051, 1154, 1187, 1300, 1318], "110": [191, 318, 672, 689, 828, 913, 1259], "1101441246220388612": [480, 799], "111": [10, 1320], "11111": 1039, "111110": 1039, "11111001": [715, 799], "11111010": [715, 799], "11111111": 10, "112": [636, 799, 1331], "11330": 162, "1152921504606846976": [1179, 1300], "116": 162, "11638928888656214026": [480, 799], "118034": [873, 913], "11aa": 1323, "11aabb": 1323, "11h": [411, 1009], "12": [26, 39, 50, 127, 133, 155, 163, 187, 209, 220, 224, 225, 250, 265, 288, 318, 329, 400, 411, 413, 414, 418, 425, 428, 429, 430, 432, 433, 434, 436, 441, 449, 450, 451, 458, 485, 517, 549, 565, 592, 600, 611, 626, 636, 650, 670, 688, 736, 739, 742, 743, 744, 760, 785, 786, 787, 799, 825, 839, 840, 844, 845, 848, 862, 869, 875, 913, 919, 1009, 1011, 1012, 1023, 1024, 1026, 1030, 1038, 1043, 1051, 1063, 1154, 1197, 1220, 1241, 1258, 1300, 1322, 1323, 1324, 1326, 1328, 1331], "120": [225, 318, 745, 845, 913, 1325], "1200": [631, 799], "120134": [688, 1258], "121": 1331, "123": [9, 558, 650, 657, 671, 694, 789, 919, 1220, 1227, 1264, 1277, 1300], "123000": 919, "1232e": [992, 994, 1300], "1234": [27, 631, 799], "12345": [751, 987, 1043, 1075, 1197, 1300], "1234500": 919, "123456": [9, 919], "1234567": 27, "123456780": 127, "12346": 751, "123465": 919, "123a123": 671, "123abc": [670, 1240, 1241], "125": [1, 39, 54, 318, 327, 596, 778, 799, 872, 913, 1170, 1173, 1300], "127": [1288, 1300, 1319], "128": [52, 66, 1170, 1300], "129": [636, 799], "13": [181, 182, 187, 198, 199, 206, 214, 225, 226, 238, 250, 292, 300, 302, 305, 306, 307, 308, 309, 310, 311, 318, 329, 410, 416, 417, 421, 424, 426, 427, 431, 437, 439, 561, 563, 611, 688, 729, 735, 738, 742, 749, 783, 785, 788, 799, 818, 819, 825, 833, 834, 845, 847, 862, 883, 892, 894, 897, 898, 899, 900, 901, 902, 903, 913, 1008, 1038, 1051, 1052, 1154, 1258, 1300, 1319], "130": [130, 225, 318, 845, 913], "13382926553367784577": [480, 799], "134821952": 1309, "134_821_952": 1309, "135": [723, 1325], "13614470193936745724": [480, 799], "13756996518000038261": [1083, 1300], "13d": 441, "13h": [411, 1009], "14": [38, 155, 187, 225, 228, 300, 302, 305, 306, 307, 308, 309, 310, 311, 318, 411, 416, 417, 421, 424, 426, 427, 431, 437, 439, 441, 485, 558, 601, 742, 785, 786, 799, 825, 845, 892, 894, 897, 898, 899, 900, 901, 902, 903, 913, 919, 1009, 1038, 1043], "140": [225, 318, 845, 913], "141592653589793": 10, "141593": [600, 799, 930, 1300, 1322, 1325], "142857": [1170, 1300], "143": [688, 1258, 1331], "1433": [37, 318], "1436e16": 163, "1438741209321515184": [210, 318], "1440": [446, 1048], "1443e235": 1331, "149": 1331, "14d": 919, "14h": 441, "15": [10, 39, 155, 187, 209, 214, 225, 228, 250, 318, 402, 406, 430, 436, 441, 449, 458, 595, 611, 626, 736, 742, 785, 786, 799, 825, 839, 845, 862, 913, 919, 1001, 1004, 1038, 1043, 1051, 1063, 1300, 1319, 1323], "150": [225, 318, 845, 913, 1189, 1300], "1500": [155, 166], "15000": [222, 318], "153061": [499, 799], "15836": 163, "15_000": [222, 318], "16": [1, 39, 52, 71, 81, 155, 169, 187, 209, 225, 250, 292, 318, 398, 401, 441, 485, 565, 572, 591, 596, 611, 689, 699, 735, 745, 746, 749, 799, 825, 839, 845, 862, 869, 883, 913, 919, 1038, 1051, 1170, 1210, 1259, 1273, 1300, 1319, 1322, 1323, 1328], "160": [225, 318, 845, 913], "165": [1038, 1051], "1656e15": [994, 1300], "166667": [1170, 1300], "1666683077": 751, "1666683099": 751, "167": 50, "16996": 1331, "16h": 919, "17": [155, 163, 195, 224, 297, 318, 458, 591, 612, 630, 751, 786, 799, 844, 889, 913, 992, 994, 1038, 1063, 1187, 1300, 1331], "170": [225, 318, 845, 913], "17293822569102704640": [1179, 1300], "174": 1331, "175201": [640, 799, 1211, 1300], "1755e": [160, 163], "1764": 54, "17888890": [195, 318], "179": 1331, "17_500": [222, 318], "18": [37, 127, 187, 235, 250, 318, 401, 436, 449, 452, 485, 574, 591, 611, 699, 799, 825, 854, 858, 862, 913, 919, 1043, 1054, 1317, 1328], "180": [404, 600, 799, 1325], "1844": 163, "18446744073709551614": [1179, 1300], "185_000_000": 1309, "186": 1331, "1875": [628, 799, 881, 913], "1897": [413, 425, 1011, 1026], "18d": 919, "19": [138, 163, 224, 250, 318, 413, 436, 611, 616, 618, 620, 622, 688, 799, 844, 862, 913, 1011, 1038, 1051, 1258], "1920": 1323, "196": 1324, "1964": [858, 913], "1969": [1323, 1324], "1970": [64, 65, 153, 1309], "1972": 1309, "1976": [423, 453], "1977": [423, 453], "1978": [416, 417, 421, 423, 424, 426, 427, 431, 437, 439, 453, 1324], "1979": [423, 453], "1980": 441, "1985": [740, 743], "1990": [133, 1309], "1993": 1309, "1994": 1309, "1995": 133, "1998": [432, 1034], "1999": [265, 318, 432, 441, 919, 1034, 1043, 1326], "199992": [849, 913], "199994": [849, 913], "199996": [849, 913], "199998": [849, 913], "1_000_000": [195, 318, 1061, 1300], "1_234_500": 919, "1d": [209, 224, 250, 288, 318, 412, 432, 436, 441, 443, 446, 449, 452, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 745, 759, 786, 787, 799, 839, 844, 862, 913, 919, 1010, 1018, 1024, 1034, 1038, 1042, 1045, 1048, 1051, 1063, 1300], "1e": [11, 156, 157, 158, 159], "1e6": 11, "1h": [209, 224, 250, 288, 318, 419, 432, 436, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1017, 1019, 1034, 1038, 1051, 1063, 1300], "1i": [209, 250, 288, 318, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 799, 839, 862, 913, 1063, 1300], "1m": [209, 224, 250, 288, 318, 432, 436, 448, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1046, 1047, 1049, 1050, 1051, 1063, 1300], "1mo": [209, 224, 250, 288, 318, 415, 429, 430, 432, 435, 436, 442, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1013, 1030, 1031, 1032, 1034, 1035, 1036, 1037, 1038, 1044, 1051, 1052, 1063, 1300], "1n": [209, 224, 250, 288, 318, 432, 436, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051, 1063, 1300], "1q": [209, 224, 250, 288, 318, 432, 436, 449, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051], "1st_col": 919, "1u": [209, 224, 250, 288, 318, 432, 436, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051, 1063, 1300], "1w": [209, 224, 250, 288, 318, 432, 436, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051, 1063, 1300], "1w2d": [740, 741], "1y": [209, 224, 250, 288, 318, 432, 436, 449, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051], "1y2mo": [432, 1034], "1zy3": [650, 1220], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 58, 59, 75, 79, 92, 95, 97, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 136, 142, 143, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 163, 165, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 211, 212, 213, 214, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 326, 327, 328, 329, 331, 333, 334, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 386, 387, 388, 390, 391, 392, 395, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 410, 411, 413, 414, 415, 416, 417, 418, 419, 422, 425, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 471, 472, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 565, 566, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 641, 642, 643, 644, 645, 647, 649, 650, 651, 652, 653, 654, 656, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 709, 710, 711, 712, 714, 715, 716, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 764, 765, 766, 767, 769, 770, 773, 777, 778, 779, 780, 781, 782, 784, 787, 788, 789, 795, 799, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 918, 919, 923, 924, 925, 928, 931, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 969, 980, 984, 986, 987, 988, 989, 991, 992, 994, 995, 996, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1009, 1012, 1014, 1015, 1017, 1019, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1031, 1032, 1036, 1037, 1038, 1041, 1051, 1053, 1054, 1055, 1056, 1057, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1107, 1108, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1210, 1212, 1213, 1214, 1215, 1216, 1217, 1220, 1226, 1228, 1230, 1231, 1232, 1234, 1235, 1237, 1240, 1241, 1246, 1247, 1249, 1250, 1251, 1254, 1255, 1257, 1258, 1259, 1260, 1263, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1280, 1281, 1282, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1300, 1305, 1309, 1310, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1331], "20": [37, 38, 39, 133, 138, 155, 160, 161, 162, 163, 167, 170, 178, 187, 191, 197, 213, 214, 235, 242, 244, 248, 265, 275, 276, 280, 294, 299, 318, 341, 342, 343, 392, 406, 413, 416, 417, 421, 424, 425, 426, 427, 431, 436, 437, 439, 441, 449, 452, 473, 480, 485, 549, 557, 568, 595, 614, 616, 618, 620, 622, 625, 627, 629, 655, 699, 714, 742, 751, 759, 778, 786, 799, 814, 825, 828, 831, 854, 857, 872, 886, 891, 913, 919, 1004, 1011, 1015, 1026, 1038, 1043, 1051, 1054, 1066, 1082, 1181, 1225, 1279, 1281, 1284, 1300, 1316, 1317, 1320, 1326], "200": [444, 445, 447, 605, 606, 799, 919, 1059, 1166, 1181, 1182, 1188, 1189, 1191, 1300, 1320], "2000": [413, 422, 425, 429, 430, 432, 919, 1011, 1020, 1026, 1031, 1032, 1034, 1039, 1309, 1323], "200000": [444, 849, 913], "200000000": 447, "2001": [16, 412, 413, 418, 420, 422, 425, 428, 432, 433, 434, 436, 440, 449, 450, 451, 452, 614, 616, 618, 620, 622, 625, 627, 629, 684, 799, 919, 1010, 1011, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1033, 1034, 1035, 1036, 1038, 1042, 1051, 1052, 1053, 1054, 1055, 1254], "2002": [133, 422, 432, 1020, 1034, 1055], "2003": [432, 751, 1034], "2004": [432, 1034], "2005": [432, 1034], "2006": [432, 1034], "2008": 1309, "200m": [444, 445, 447], "2010": [265, 318, 441, 919], "2011": [411, 1009], "2012": [411, 1009, 1326], "2016": [224, 318, 844, 913], "2017": [224, 318, 844, 913], "2018": [224, 318, 435, 844, 913, 1037], "2019": [224, 318, 844, 913], "202": 1324, "2020": [137, 148, 180, 187, 207, 224, 250, 318, 321, 410, 415, 419, 435, 438, 441, 442, 443, 444, 445, 446, 447, 448, 458, 611, 684, 686, 687, 726, 799, 817, 825, 844, 862, 913, 919, 1008, 1013, 1017, 1037, 1040, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1063, 1254, 1256, 1257, 1300, 1324], "2021": [180, 187, 207, 209, 288, 318, 684, 759, 817, 825, 839, 913, 919, 1014, 1015, 1021, 1041, 1254, 1323], "2022": [50, 180, 187, 207, 318, 414, 436, 449, 684, 740, 741, 743, 744, 745, 751, 817, 825, 913, 919, 1012, 1021, 1038, 1051, 1254], "2023": [16, 39, 127, 155, 222, 318, 414, 745, 759, 919, 1012], "2024": [155, 410, 416, 417, 421, 424, 426, 427, 431, 437, 439, 591, 726, 739, 740, 742, 743, 745, 799, 919, 1008, 1323, 1326], "2025": [410, 726, 919, 1008], "2026": 1324, "2030": 1323, "2031": 919, "2040": 441, "2047317070637311557": [210, 318], "2055938745": 127, "2065": [416, 417, 421, 424, 426, 427, 431, 437, 439], "2068": 163, "207": 1324, "2077": [265, 318, 441, 919, 1043, 1323, 1324], "2095": 163, "20_000": [39, 318], "20t08": 441, "20t18": 1043, "20word": 136, "21": [155, 187, 235, 267, 318, 413, 614, 616, 618, 620, 622, 625, 627, 629, 742, 751, 799, 825, 854, 913, 919, 1011, 1317], "213": 1331, "2147483647": 1331, "2147483648": [1152, 1300], "21d": 919, "22": [44, 48, 155, 163, 318, 418, 433, 436, 449, 451, 452, 612, 614, 616, 618, 620, 622, 625, 627, 629, 684, 742, 795, 799, 913, 919, 1038, 1051, 1054, 1187, 1254, 1300, 1323, 1324, 1331], "221": 1331, "2246e": [1210, 1273, 1300], "225": [436, 449, 1325], "22_000_000": 1309, "23": [10, 163, 187, 209, 250, 280, 318, 414, 418, 421, 433, 436, 441, 451, 611, 614, 616, 618, 620, 622, 625, 627, 629, 742, 745, 785, 786, 787, 799, 825, 839, 862, 872, 913, 919, 1012, 1019, 1284, 1300, 1330, 1331], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1309, "2337": [39, 318], "234": 27, "2345": 919, "23456789": 10, "235": 1331, "23h": 919, "24": [52, 155, 209, 224, 228, 250, 265, 288, 318, 400, 402, 418, 432, 433, 436, 443, 449, 451, 572, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 1001, 1034, 1038, 1045, 1051, 1103, 1300, 1323, 1330], "24030": 162, "249": [715, 799], "25": [1, 27, 39, 54, 127, 187, 191, 209, 224, 250, 275, 280, 288, 292, 318, 375, 406, 418, 419, 433, 436, 441, 449, 451, 458, 596, 598, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 708, 742, 743, 744, 745, 751, 761, 786, 787, 799, 825, 828, 839, 844, 851, 862, 881, 883, 913, 919, 969, 1003, 1004, 1017, 1038, 1043, 1051, 1057, 1063, 1085, 1170, 1175, 1240, 1300, 1317, 1322, 1328, 1329], "250": [715, 799, 1189, 1300, 1320, 1331], "2500": [222, 280, 318], "254508": [458, 799, 1063, 1300], "255": 1331, "256": [228, 318, 375, 969, 1170, 1300, 1322], "2560": 969, "259921": [390, 799, 986, 1300, 1322], "25_000_000": 1309, "26": [37, 39, 155, 160, 161, 162, 163, 167, 187, 318, 419, 450, 825, 913, 1017], "266667": [187, 318, 825, 913], "27": [1, 54, 275, 311, 318, 401, 428, 434, 450, 699, 799, 903, 919, 1173, 1279, 1300, 1330, 1331], "270": 1325, "28": [271, 276, 318, 327, 435, 452, 799, 1037, 1054, 1281, 1300, 1323, 1325, 1330, 1331], "283185": [600, 799], "2846": 318, "285714": [486, 799, 1088, 1300], "289962": 1325, "28_341_469": 1309, "29": [16, 155, 411, 429, 1009, 1031], "29096": 1331, "290994": [873, 913], "292432": [931, 1300], "292893": [458, 799, 1063, 1300], "2_color_scal": [39, 318], "2d": [250, 275, 276, 318, 432, 611, 759, 799, 862, 913, 1009, 1016], "2h": [614, 616, 618, 620, 622, 625, 627, 629, 799], "2i": [209, 318, 839, 913], "2m": [919, 1029], "2x": 162, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 50, 51, 52, 53, 54, 58, 59, 75, 92, 95, 97, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 136, 138, 142, 143, 144, 147, 153, 155, 156, 157, 158, 159, 162, 163, 164, 165, 167, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 327, 328, 329, 330, 332, 343, 344, 345, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 387, 388, 389, 390, 391, 392, 396, 397, 398, 399, 400, 401, 402, 403, 406, 407, 408, 409, 410, 412, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 434, 435, 436, 437, 438, 439, 440, 441, 442, 449, 450, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 498, 499, 500, 501, 502, 503, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 538, 539, 540, 541, 544, 545, 546, 547, 548, 549, 550, 570, 571, 572, 573, 574, 575, 577, 579, 581, 582, 585, 588, 589, 591, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 641, 643, 644, 645, 648, 649, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 670, 671, 672, 673, 674, 675, 676, 677, 678, 685, 686, 691, 692, 695, 696, 697, 698, 699, 700, 702, 706, 707, 710, 711, 712, 714, 715, 720, 721, 722, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 799, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 846, 847, 848, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 918, 919, 924, 925, 928, 930, 932, 933, 934, 936, 937, 938, 939, 940, 943, 944, 945, 946, 947, 948, 949, 951, 952, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 980, 981, 982, 984, 986, 987, 988, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1010, 1012, 1013, 1016, 1018, 1019, 1020, 1022, 1023, 1024, 1026, 1028, 1029, 1030, 1035, 1037, 1038, 1039, 1040, 1042, 1043, 1044, 1046, 1047, 1049, 1051, 1053, 1054, 1056, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1107, 1108, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1145, 1146, 1147, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1219, 1221, 1222, 1223, 1226, 1227, 1228, 1231, 1232, 1233, 1234, 1236, 1237, 1240, 1241, 1242, 1243, 1244, 1248, 1255, 1256, 1261, 1262, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1280, 1281, 1282, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1300, 1305, 1309, 1310, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1331], "30": [39, 187, 197, 209, 213, 242, 248, 271, 292, 318, 341, 342, 343, 406, 414, 416, 417, 421, 424, 426, 427, 428, 429, 431, 434, 435, 436, 437, 439, 441, 442, 449, 450, 480, 557, 636, 742, 759, 785, 786, 799, 825, 831, 839, 857, 883, 913, 919, 1004, 1012, 1031, 1037, 1038, 1043, 1044, 1051, 1082, 1300, 1316, 1317, 1320, 1322, 1323, 1325, 1326, 1329, 1331], "300": [271, 318, 479, 589, 606, 799, 919, 1182, 1188, 1189, 1191, 1300, 1320], "3000": 919, "3002": [413, 425, 1011, 1026], "30103": [545, 799, 1322], "3022416320763508302": [1083, 1300], "30_000": [39, 318], "30m": [209, 318, 436, 449, 839, 913, 1038, 1051], "30t16": 441, "31": [54, 187, 265, 318, 413, 414, 418, 425, 429, 432, 442, 655, 684, 739, 742, 751, 759, 778, 825, 913, 919, 1009, 1011, 1012, 1016, 1026, 1031, 1043, 1044, 1181, 1225, 1254, 1300, 1324, 1326, 1331], "31t06": 1043, "32": [52, 64, 69, 72, 82, 219, 224, 250, 318, 572, 611, 636, 799, 844, 862, 913, 1005, 1035, 1170, 1192, 1300, 1317, 1323], "321": [27, 1331], "3212": [688, 1258], "321cba": 1323, "3265500": 919, "32971": [452, 1054], "32974": [452, 1054], "32976": [452, 1054], "32bit": [275, 318], "33": [187, 235, 318, 630, 799, 825, 854, 913, 1192, 1300, 1324], "333": [16, 631, 799, 1059, 1166, 1198, 1300], "33333": 1326, "333333": [215, 318, 574, 842, 913, 1170, 1196, 1300, 1317], "34": [187, 318, 670, 684, 825, 913, 1241, 1254], "3420": [688, 1258], "343622": [641, 799], "345": [666, 667, 1236, 1237], "3450": [1198, 1300], "3456": 919, "34776706224699483": [1212, 1300], "35": [39, 318, 406, 441, 742, 799, 1004, 1300], "350": [479, 589, 799, 1189, 1300], "3500": [1198, 1300], "356": [418, 433, 451], "356194": [722, 723, 1325], "357": [418, 433, 451], "358": [418, 433, 451], "359": [418, 433, 451], "36": [187, 318, 825, 913, 1328], "360": [404, 600, 799, 1325], "361": 1331, "363961": [537, 1142], "366": [433, 1035], "37": [12, 919], "370h": [458, 799, 1063, 1300], "37338": 1331, "38": [39, 127, 160, 163, 318], "38180177416060584": [623, 799, 1193, 1300], "381802": [623, 799, 1193, 1300], "386294": [546, 799, 1151, 1300, 1322], "389056": [462, 799, 1066, 1300, 1322], "39": [627, 751, 799], "39m": 919, "3_color_scal": [39, 318], "3d12h4m25": [209, 224, 250, 288, 318, 436, 449, 458, 611, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1038, 1051, 1063, 1300], "3f": [136, 684, 687, 1254, 1257], "3i": [209, 250, 318, 839, 913], "3rd": [1232, 1255], "3xy": [650, 1220], "4": [1, 8, 13, 17, 25, 34, 36, 38, 39, 40, 41, 44, 50, 51, 52, 53, 54, 58, 59, 75, 95, 120, 121, 122, 123, 124, 125, 126, 127, 130, 147, 155, 167, 176, 177, 178, 179, 180, 181, 182, 186, 188, 192, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 235, 237, 238, 239, 241, 242, 243, 244, 250, 252, 253, 260, 261, 264, 268, 269, 270, 271, 272, 273, 276, 279, 281, 282, 284, 285, 286, 287, 288, 290, 291, 292, 294, 295, 297, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 326, 327, 328, 329, 331, 333, 345, 352, 353, 354, 356, 357, 358, 359, 360, 362, 364, 365, 366, 367, 369, 370, 375, 386, 387, 388, 390, 391, 392, 396, 397, 400, 401, 402, 404, 407, 414, 417, 418, 425, 433, 434, 435, 436, 437, 438, 441, 443, 446, 448, 449, 451, 455, 456, 458, 462, 463, 465, 466, 467, 469, 470, 471, 472, 474, 475, 476, 477, 478, 481, 483, 484, 485, 486, 487, 496, 497, 501, 502, 503, 510, 511, 512, 513, 514, 516, 517, 519, 527, 529, 530, 531, 532, 533, 534, 535, 539, 540, 545, 548, 549, 550, 570, 572, 574, 575, 577, 579, 581, 582, 585, 586, 587, 590, 591, 593, 594, 595, 596, 599, 601, 605, 606, 607, 608, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 633, 635, 638, 642, 643, 644, 645, 648, 650, 654, 657, 660, 662, 666, 667, 668, 669, 670, 671, 674, 675, 676, 677, 682, 683, 684, 685, 689, 694, 695, 697, 698, 699, 700, 702, 705, 706, 707, 708, 714, 715, 717, 719, 720, 722, 723, 724, 725, 727, 728, 729, 730, 731, 733, 735, 736, 737, 738, 739, 742, 743, 744, 746, 748, 749, 753, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 778, 779, 780, 781, 782, 783, 784, 786, 787, 788, 789, 795, 799, 814, 815, 817, 818, 819, 820, 821, 824, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 862, 868, 869, 870, 871, 872, 873, 874, 875, 876, 878, 879, 880, 881, 882, 883, 886, 887, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 918, 919, 923, 928, 931, 938, 945, 947, 948, 949, 951, 952, 953, 954, 955, 957, 959, 960, 961, 962, 963, 964, 969, 980, 987, 988, 990, 996, 1001, 1003, 1005, 1015, 1019, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1036, 1037, 1038, 1040, 1045, 1048, 1050, 1051, 1052, 1053, 1060, 1063, 1067, 1068, 1070, 1071, 1076, 1077, 1079, 1084, 1085, 1087, 1088, 1089, 1090, 1094, 1097, 1098, 1099, 1100, 1102, 1108, 1115, 1116, 1117, 1118, 1119, 1124, 1128, 1131, 1132, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1144, 1145, 1160, 1163, 1164, 1167, 1170, 1171, 1172, 1173, 1177, 1178, 1181, 1182, 1183, 1186, 1190, 1192, 1193, 1194, 1195, 1196, 1199, 1201, 1205, 1206, 1209, 1212, 1213, 1214, 1218, 1220, 1224, 1227, 1230, 1232, 1236, 1237, 1238, 1239, 1244, 1246, 1247, 1252, 1253, 1254, 1255, 1259, 1264, 1265, 1268, 1270, 1272, 1278, 1281, 1283, 1285, 1291, 1300, 1305, 1309, 1310, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1328, 1329, 1330, 1331], "40": [39, 187, 197, 224, 242, 318, 436, 441, 449, 480, 543, 688, 699, 799, 825, 844, 857, 913, 919, 1021, 1051, 1148, 1258, 1316, 1317, 1320, 1323], "400": [287, 318, 444, 445, 447, 880, 913, 1188, 1189, 1191, 1300, 1320], "4000000": [1061, 1300], "404": [225, 318, 656, 658, 845, 913, 1226, 1228], "4096": 1322, "41": [187, 318, 627, 799, 825, 913, 1317, 1331], "412277": 163, "414214": [645, 799, 1215, 1300, 1322], "4160": 54, "416147": 1325, "4164": [224, 318, 844, 913], "42": [54, 187, 210, 235, 250, 318, 441, 611, 799, 825, 854, 862, 913, 1083, 1300, 1316, 1330], "424778": [600, 799], "428571": [457, 799, 1062, 1300], "429101": 1317, "4294967296": [44, 318], "43": [187, 250, 318, 401, 611, 627, 799, 825, 862, 913], "4321": 919, "433013": [624, 799, 873, 913], "44": [10, 235, 318, 407, 799, 854, 913], "4411": [224, 318, 844, 913], "44225": [986, 1300], "444": 10, "44444444444": 10, "45": [39, 187, 250, 318, 414, 436, 449, 611, 627, 650, 657, 696, 723, 742, 759, 785, 786, 799, 825, 862, 913, 919, 1012, 1038, 1043, 1051, 1220, 1227, 1267, 1322, 1323, 1325, 1329, 1331], "450": [1189, 1300], "4500000": 919, "456": [9, 10, 414, 919, 1012, 1277, 1300], "456000": [414, 1012], "456001\u00b5": 919, "4566": [224, 318, 844, 913], "456789": [441, 919, 1039], "456789\u00b5": 919, "456m": 919, "457658": 1325, "459148": [454, 799], "46": 919, "4696": [224, 318, 844, 913], "47": [50, 187, 318, 627, 799, 825, 913, 919, 1317], "470": [858, 913], "47033": [623, 799, 1193, 1300], "47033046033698594": [623, 799, 1193, 1300], "475": [858, 913], "48": [12, 163, 250, 318, 611, 699, 799, 862, 913, 919], "4827": [224, 318, 844, 913], "485": 1331, "49": [187, 318, 825, 913, 919], "492474": [458, 799, 1063, 1300], "498": [225, 318, 845, 913], "4_500_000": 919, "4ab4a": 1323, "4d": [458, 799, 1063, 1300], "4f6228": [39, 318], "4f71": [39, 318], "4x": [221, 318], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 34, 36, 38, 40, 41, 44, 50, 51, 53, 54, 58, 95, 120, 123, 124, 125, 126, 127, 129, 134, 155, 156, 158, 161, 163, 167, 177, 180, 181, 182, 187, 188, 191, 196, 197, 198, 199, 200, 202, 203, 204, 206, 207, 208, 209, 211, 212, 214, 215, 217, 219, 220, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 237, 238, 239, 241, 243, 244, 245, 250, 253, 260, 261, 264, 265, 268, 269, 270, 271, 272, 273, 275, 276, 279, 280, 282, 285, 286, 287, 288, 291, 292, 294, 295, 297, 299, 300, 301, 302, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 327, 328, 331, 346, 347, 352, 353, 354, 356, 358, 362, 367, 369, 375, 386, 387, 388, 391, 392, 402, 403, 404, 406, 407, 410, 413, 414, 415, 416, 417, 421, 424, 425, 426, 427, 431, 435, 437, 438, 439, 441, 442, 448, 452, 456, 458, 460, 461, 464, 466, 470, 471, 475, 476, 478, 481, 483, 485, 487, 490, 493, 494, 495, 496, 497, 501, 503, 510, 513, 514, 516, 517, 519, 522, 524, 525, 529, 530, 531, 532, 533, 534, 538, 539, 543, 549, 570, 572, 574, 586, 590, 591, 592, 593, 594, 595, 596, 598, 599, 601, 605, 606, 607, 608, 610, 611, 612, 613, 615, 616, 617, 618, 619, 621, 624, 626, 627, 628, 629, 630, 633, 644, 650, 660, 661, 662, 665, 666, 667, 685, 689, 700, 702, 706, 707, 708, 720, 722, 723, 725, 726, 727, 728, 729, 731, 733, 735, 736, 737, 738, 739, 740, 742, 745, 746, 747, 748, 749, 753, 755, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 778, 780, 782, 783, 784, 788, 795, 799, 817, 818, 819, 820, 821, 825, 828, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 847, 848, 851, 852, 858, 862, 868, 869, 870, 871, 872, 873, 874, 875, 879, 880, 882, 883, 886, 887, 889, 891, 892, 893, 894, 897, 898, 899, 900, 901, 902, 903, 904, 913, 919, 928, 931, 935, 938, 941, 942, 945, 947, 948, 949, 951, 953, 957, 962, 963, 964, 969, 980, 988, 990, 997, 1001, 1002, 1003, 1004, 1005, 1008, 1011, 1012, 1013, 1014, 1015, 1016, 1026, 1037, 1039, 1040, 1041, 1043, 1044, 1050, 1052, 1053, 1054, 1060, 1063, 1065, 1067, 1068, 1069, 1079, 1084, 1085, 1087, 1089, 1093, 1096, 1108, 1115, 1118, 1119, 1124, 1127, 1130, 1134, 1135, 1136, 1137, 1138, 1139, 1143, 1144, 1148, 1152, 1160, 1167, 1170, 1171, 1172, 1175, 1176, 1177, 1178, 1182, 1183, 1186, 1187, 1188, 1189, 1191, 1192, 1195, 1199, 1201, 1206, 1212, 1215, 1220, 1230, 1231, 1232, 1235, 1236, 1255, 1259, 1272, 1279, 1281, 1284, 1285, 1288, 1291, 1300, 1305, 1310, 1313, 1315, 1317, 1318, 1319, 1322, 1323, 1324, 1325, 1328, 1330, 1331], "50": [12, 27, 39, 187, 197, 207, 318, 392, 436, 441, 449, 740, 741, 799, 825, 913, 919, 990, 1003, 1051, 1240, 1300, 1316, 1317], "500": [39, 287, 318, 416, 417, 421, 424, 426, 427, 431, 437, 439, 880, 913, 1025, 1027, 1033, 1188, 1189, 1191, 1300], "5000": [280, 318, 1284, 1300], "50000": 134, "500000": [424, 1025], "500000000": [431, 1033], "5000555": 919, "500_000": [416, 417, 421, 424, 426, 427, 431, 437, 439], "500m": [1025, 1027, 1033], "51": 919, "512": [44, 135, 221, 318, 375, 596, 799, 969, 1170, 1300], "51966": [689, 1259], "52": [292, 318, 450, 630, 799, 883, 913], "523599": 1325, "527525": [1194, 1300], "53": [450, 1052, 1328], "533316061": 1309, "533_316_061": 1309, "54": [462, 799, 1104, 1300, 1322, 1331], "540": [404, 600, 799], "540302": 1325, "543": 9, "543081": [394, 799, 993, 1300], "5432": 135, "54321": 9, "544": 1331, "544705": 731, "549306": [935, 1300], "55": [39, 52, 318, 1319, 1323, 1324], "5555": 919, "55550": 919, "56": [127, 670, 703, 799, 1241], "566371": [600, 799], "567": 27, "56789": [987, 1075, 1197, 1300], "57": [627, 799, 1197, 1300, 1325, 1331], "570796": [335, 337, 799, 930, 932, 1300, 1325], "575050513": [160, 163], "58": [243, 318], "581139": [1003, 1300], "584963": [544, 799], "587401": [390, 799, 1322], "59": [127, 187, 318, 414, 427, 437, 441, 471, 742, 785, 786, 787, 799, 825, 913, 919, 1012, 1029, 1039], "59815": [462, 799, 1322], "5_000_555": 919, "5th": [39, 318], "6": [1, 8, 13, 34, 36, 38, 39, 40, 41, 42, 43, 44, 49, 51, 53, 58, 87, 88, 95, 120, 123, 124, 125, 126, 138, 142, 143, 155, 177, 180, 183, 184, 188, 189, 190, 192, 193, 194, 196, 197, 200, 203, 204, 205, 206, 207, 209, 211, 213, 214, 215, 217, 219, 220, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 236, 237, 240, 243, 244, 245, 247, 248, 250, 251, 252, 253, 254, 255, 256, 258, 261, 263, 264, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278, 282, 284, 285, 286, 288, 289, 290, 291, 292, 294, 295, 301, 311, 312, 318, 321, 322, 327, 331, 352, 353, 354, 356, 362, 370, 387, 388, 400, 401, 407, 410, 414, 418, 428, 432, 433, 434, 444, 445, 447, 450, 451, 454, 456, 465, 466, 471, 472, 475, 481, 483, 485, 503, 504, 505, 514, 517, 530, 531, 532, 533, 537, 549, 550, 586, 590, 597, 600, 601, 602, 607, 609, 611, 613, 615, 617, 619, 621, 624, 626, 627, 628, 633, 638, 644, 650, 655, 666, 667, 689, 700, 702, 707, 715, 717, 719, 726, 728, 735, 736, 737, 739, 742, 746, 749, 755, 760, 761, 765, 778, 782, 795, 799, 817, 820, 821, 822, 823, 826, 827, 829, 830, 831, 832, 835, 836, 837, 839, 840, 842, 843, 844, 846, 848, 849, 856, 858, 860, 862, 863, 864, 866, 868, 869, 870, 871, 872, 875, 878, 879, 882, 883, 886, 887, 893, 903, 904, 913, 919, 945, 947, 948, 949, 951, 957, 988, 992, 994, 999, 1000, 1005, 1008, 1034, 1043, 1053, 1060, 1067, 1079, 1085, 1109, 1110, 1119, 1122, 1135, 1136, 1137, 1138, 1142, 1160, 1174, 1177, 1178, 1183, 1185, 1190, 1192, 1194, 1196, 1201, 1206, 1209, 1220, 1225, 1236, 1259, 1271, 1281, 1300, 1305, 1310, 1313, 1315, 1317, 1318, 1322, 1328, 1329, 1331], "60": [39, 130, 197, 243, 318, 421, 426, 427, 437, 448, 471, 627, 684, 799, 1035, 1039, 1050, 1179, 1254, 1300, 1325], "600": [287, 318, 444, 445, 447, 880, 913, 919], "60000": 424, "600000": 919, "60000000": 431, "60206": [545, 799, 1322], "605551": 780, "605551275463989": 780, "609438": 1322, "60_000": [416, 417, 421, 424, 426, 427, 431, 437, 439], "61": [243, 318], "625": [621, 799], "626172": [652, 1222], "63": [627, 799], "63204": 1331, "6331e16": [1273, 1300, 1325], "636253": 1325, "64": [1, 52, 54, 65, 67, 70, 73, 80, 83, 154, 176, 280, 318, 395, 572, 596, 799, 1170, 1173, 1300, 1322], "64030": [689, 1259], "642093": 1325, "647961": 163, "64bit": [155, 603, 799, 1179, 1300], "65": [191, 318, 828, 913, 1057, 1300], "650": [479, 589, 799], "65280": [689, 1259], "654": [27, 778, 872, 913], "65432": 1326, "654321": 558, "65536": 1322, "66": [224, 287, 318, 627, 715, 799, 844, 880, 913, 1104, 1192, 1300], "663053": 127, "666": 919, "666000": 919, "666667": [187, 215, 289, 306, 318, 457, 764, 799, 825, 842, 881, 898, 913, 1062, 1300], "666f6f": [652, 1222], "676": [225, 318, 845, 913], "678": [650, 657, 1220, 1227], "6789": [28, 919], "67890": 28, "686241": 1317, "69": [627, 799, 1104, 1300], "693147": [546, 799, 1149, 1151, 1300, 1322], "6_000_000": 1309, "7": [1, 16, 27, 34, 36, 38, 39, 40, 41, 42, 43, 44, 51, 53, 58, 142, 143, 155, 170, 177, 180, 183, 184, 185, 187, 189, 190, 193, 194, 196, 200, 203, 205, 209, 211, 213, 215, 223, 227, 229, 231, 233, 235, 236, 240, 243, 245, 247, 248, 250, 251, 253, 254, 255, 256, 258, 261, 263, 266, 267, 268, 269, 274, 276, 277, 278, 286, 288, 289, 290, 318, 321, 322, 327, 331, 353, 354, 356, 365, 401, 413, 414, 418, 425, 433, 435, 436, 441, 449, 451, 462, 475, 481, 485, 486, 503, 517, 530, 531, 532, 533, 590, 591, 601, 607, 611, 626, 627, 644, 660, 688, 702, 726, 735, 736, 739, 742, 743, 749, 754, 760, 761, 778, 782, 799, 817, 822, 823, 825, 827, 830, 832, 835, 837, 839, 840, 842, 843, 848, 854, 856, 859, 860, 862, 863, 864, 868, 872, 875, 913, 919, 935, 948, 949, 951, 960, 1011, 1012, 1016, 1021, 1026, 1037, 1038, 1043, 1051, 1053, 1066, 1088, 1103, 1122, 1135, 1136, 1137, 1138, 1182, 1183, 1195, 1201, 1230, 1258, 1300, 1305, 1310, 1315, 1317, 1318, 1319, 1322, 1324, 1328, 1331], "70": [187, 318, 715, 743, 799, 825, 913, 1104, 1300, 1317], "700": [287, 318, 880, 913], "702963": [39, 318], "7051579356916758811": 149, "707107": [364, 459, 624, 625, 722, 799, 959, 1064, 1300, 1325], "712389": 1325, "714": 1331, "714286": [486, 799, 1088, 1300], "718281828459045": [10, 454, 544, 799, 1057, 1149, 1300], "718282": [462, 799, 1066, 1300, 1322], "720": [404, 600, 799], "7264": 1331, "732051": [1215, 1300], "7415e16": 163, "742": [225, 318, 845, 913], "75": [39, 187, 191, 318, 331, 590, 598, 613, 615, 617, 619, 624, 626, 628, 761, 799, 825, 828, 913, 919, 1003, 1085, 1104, 1175, 1240, 1300, 1317, 1325, 1331], "7500": [222, 318], "7508": 1331, "754": [708, 799], "754888": [454, 799], "761594": [704, 799, 1274, 1300], "7654": 919, "765431": 1039, "7654321": 27, "76933c": [39, 318], "77": 1043, "78": [9, 670, 1241], "780": 9, "784": [224, 318, 844, 913], "785398": [339, 722, 723, 799, 934, 1300, 1325], "789": [10, 919], "79": [1104, 1300], "7d": 919, "8": [1, 11, 34, 36, 38, 40, 41, 42, 43, 44, 45, 50, 51, 53, 54, 58, 74, 78, 84, 142, 143, 155, 177, 180, 183, 184, 185, 187, 189, 190, 192, 193, 194, 196, 200, 203, 205, 207, 211, 213, 220, 223, 224, 225, 227, 228, 229, 231, 233, 236, 245, 247, 248, 250, 251, 253, 254, 255, 256, 258, 261, 263, 265, 266, 267, 269, 274, 276, 277, 278, 286, 289, 290, 292, 318, 331, 333, 345, 353, 354, 356, 398, 401, 402, 414, 441, 475, 482, 485, 486, 511, 513, 517, 530, 531, 532, 533, 572, 590, 591, 596, 607, 608, 612, 636, 642, 644, 668, 669, 684, 715, 720, 726, 731, 733, 736, 738, 746, 748, 753, 754, 757, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 778, 780, 783, 784, 788, 799, 817, 822, 823, 825, 827, 829, 830, 832, 835, 837, 840, 843, 844, 845, 848, 849, 858, 860, 863, 864, 868, 872, 875, 883, 913, 919, 948, 949, 951, 994, 1001, 1021, 1085, 1088, 1103, 1116, 1118, 1122, 1135, 1136, 1137, 1138, 1170, 1173, 1183, 1186, 1187, 1190, 1192, 1194, 1196, 1238, 1239, 1254, 1300, 1309, 1310, 1315, 1317, 1318, 1319, 1322, 1323, 1324, 1328, 1331], "80": [39, 191, 318, 828, 913], "800": [444, 445, 447, 1043], "8000": 135, "803065983": 127, "81": 1322, "814697265625": [1061, 1300], "816497": [266, 318], "8192": 133, "82": [224, 318, 844, 913], "8257e14": 1331, "83": [224, 318, 844, 913], "833": [224, 318, 844, 913], "833333": [306, 898], "848062": 1325, "848808": 163, "85": [39, 318, 1104, 1300, 1331], "850": [479, 589, 799], "8568409950394724": [1057, 1300], "8589934592": [636, 799], "86": 1331, "8601": 1323, "87": 1331, "876": 9, "88": [187, 318, 825, 913], "881374": [338, 799, 933, 1300], "888": [778, 872, 913], "8_000_000": 1309, "8a": [966, 967], "8nin": 1331, "9": [1, 9, 34, 36, 38, 39, 40, 41, 44, 50, 58, 177, 185, 187, 200, 202, 211, 215, 225, 227, 228, 243, 250, 252, 253, 256, 268, 269, 286, 290, 292, 311, 318, 327, 331, 333, 345, 353, 354, 356, 361, 363, 398, 401, 404, 414, 441, 467, 475, 485, 491, 511, 517, 528, 536, 574, 590, 591, 600, 607, 611, 612, 623, 626, 627, 638, 642, 657, 688, 696, 699, 729, 735, 736, 739, 742, 754, 787, 799, 825, 835, 840, 842, 845, 848, 862, 864, 875, 883, 903, 913, 919, 943, 944, 948, 949, 951, 956, 958, 1003, 1016, 1025, 1027, 1033, 1038, 1051, 1052, 1094, 1103, 1116, 1122, 1133, 1141, 1183, 1187, 1193, 1195, 1197, 1209, 1227, 1258, 1267, 1300, 1309, 1310, 1315, 1318, 1319, 1328], "90": [187, 225, 318, 688, 825, 845, 913, 1258, 1317, 1325], "901234": [987, 1075, 1197, 1300], "909": [224, 318, 844, 913], "910": [224, 318, 657, 844, 913, 1227], "910t": [650, 657, 1220, 1227], "914": [224, 318, 844, 913], "9223372036854775807": [711, 799], "9223372036854775808": [547, 799], "927295": 1325, "928571": [460, 799, 1065, 1300], "93": [1104, 1300], "94": [328, 799], "9477376373212048": [1104, 1300], "95": [17, 328, 799, 919], "95b3d7": [39, 318], "96": [17, 187, 318, 328, 799, 825, 913, 1104, 1300], "961": 54, "963624": [459, 799, 1064, 1300], "964028": [243, 318], "96_067_179": 1309, "97": [17, 214, 318, 328, 799, 1104, 1300], "9774092659964970114": [480, 799], "978307200": [420, 1018], "978307200000": 440, "978307200000000": [420, 440, 1018, 1042], "978307200000000000": 1042, "978393600": [420, 1018], "978393600000": 440, "978393600000000": [420, 440, 1018, 1042], "978393600000000000": 1042, "978480000": [420, 1018], "978480000000": 440, "978480000000000": [420, 440, 1018, 1042], "978480000000000000": 1042, "98": [17, 214, 243, 318, 386, 474, 477, 643, 688, 706, 799, 1258], "987": [27, 558], "987000": 919, "9876": 9, "987654": [27, 919], "987654321": 10, "9876543210": 127, "987m": 919, "988": 10, "99": [17, 39, 198, 199, 214, 217, 243, 287, 318, 328, 386, 464, 466, 474, 477, 643, 706, 789, 799, 833, 834, 880, 913, 1043, 1057, 1069, 1300, 1322], "9914e218": 163, "993": [1085, 1300], "998347": [243, 318], "999": [413, 425, 919, 1011, 1026, 1320, 1331], "999000": 919, "999954": [243, 318], "999999": [694, 742, 785, 786, 787, 919, 1043, 1264], "999999\u00b5": 919, "9bbb59": [39, 318], "A": [13, 36, 39, 44, 45, 56, 57, 62, 68, 127, 133, 134, 135, 136, 147, 149, 154, 169, 184, 193, 202, 209, 223, 224, 230, 232, 237, 243, 268, 271, 286, 287, 288, 292, 293, 318, 326, 408, 409, 414, 438, 441, 455, 456, 464, 476, 478, 489, 492, 494, 495, 501, 541, 548, 549, 562, 576, 585, 586, 608, 613, 615, 617, 619, 621, 624, 626, 628, 648, 649, 650, 656, 657, 658, 659, 660, 661, 662, 665, 667, 670, 671, 672, 674, 685, 694, 729, 745, 746, 750, 799, 823, 830, 839, 843, 844, 860, 880, 883, 884, 913, 919, 1006, 1007, 1012, 1040, 1043, 1059, 1069, 1166, 1188, 1189, 1191, 1194, 1195, 1196, 1218, 1219, 1220, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1237, 1240, 1241, 1242, 1244, 1255, 1264, 1300, 1309, 1310, 1313, 1326, 1328], "AND": [716, 717, 778, 919, 1319], "ANDs": [377, 799, 971, 1300], "AS": [265, 318, 778, 779, 872, 913, 1309, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1330], "And": [692, 1262], "As": [12, 49, 87, 88, 120, 122, 123, 124, 126, 138, 142, 143, 151, 200, 275, 280, 318, 541, 789, 835, 913], "At": [44, 243, 318], "BY": [778, 872, 913, 1309, 1312, 1318, 1327, 1328], "Be": 913, "By": [5, 12, 14, 30, 50, 133, 134, 147, 209, 223, 224, 250, 252, 261, 266, 288, 289, 318, 362, 432, 436, 449, 534, 537, 543, 591, 606, 611, 614, 616, 618, 620, 622, 625, 627, 629, 635, 646, 713, 731, 733, 740, 741, 743, 744, 745, 759, 780, 786, 787, 788, 799, 820, 839, 843, 844, 862, 868, 873, 881, 913, 957, 1034, 1038, 1051, 1139, 1182, 1205, 1216, 1290, 1300], "For": [14, 38, 39, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 191, 192, 197, 223, 224, 243, 250, 275, 304, 318, 429, 430, 441, 457, 459, 460, 471, 541, 550, 562, 603, 641, 648, 656, 657, 658, 660, 662, 685, 735, 745, 749, 750, 795, 799, 828, 829, 844, 862, 896, 913, 917, 1043, 1062, 1064, 1065, 1068, 1154, 1179, 1212, 1218, 1226, 1227, 1228, 1230, 1232, 1255, 1279, 1300], "IF": 1321, "If": [36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 55, 56, 57, 58, 66, 120, 121, 122, 123, 124, 125, 126, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 164, 165, 166, 176, 192, 197, 200, 207, 209, 211, 219, 220, 221, 224, 227, 228, 232, 239, 243, 250, 252, 253, 254, 258, 261, 263, 265, 268, 269, 272, 273, 275, 276, 282, 283, 285, 286, 287, 318, 321, 330, 332, 355, 362, 367, 388, 410, 414, 415, 429, 430, 438, 441, 467, 482, 487, 499, 520, 529, 534, 535, 541, 549, 550, 557, 558, 564, 566, 591, 596, 598, 601, 603, 605, 606, 607, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 635, 637, 641, 642, 647, 657, 658, 660, 662, 663, 664, 674, 675, 676, 677, 679, 680, 681, 684, 685, 686, 687, 691, 694, 712, 716, 718, 721, 725, 726, 730, 731, 735, 740, 741, 743, 744, 745, 748, 749, 755, 756, 757, 759, 761, 771, 774, 775, 776, 781, 786, 787, 789, 790, 799, 820, 821, 829, 831, 835, 839, 843, 844, 849, 853, 860, 862, 866, 868, 870, 872, 877, 879, 880, 888, 896, 906, 913, 917, 919, 926, 927, 950, 957, 962, 981, 990, 1008, 1012, 1013, 1031, 1032, 1040, 1043, 1068, 1084, 1085, 1089, 1103, 1104, 1108, 1125, 1134, 1139, 1140, 1146, 1154, 1173, 1175, 1177, 1179, 1181, 1182, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1201, 1203, 1205, 1208, 1212, 1213, 1217, 1227, 1228, 1230, 1232, 1233, 1234, 1240, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1254, 1255, 1256, 1257, 1261, 1264, 1272, 1275, 1279, 1281, 1289, 1300, 1305, 1309, 1310, 1312, 1320, 1328], "In": [50, 57, 135, 137, 148, 149, 152, 163, 167, 172, 177, 195, 197, 200, 209, 224, 225, 228, 239, 243, 250, 276, 285, 318, 321, 549, 550, 611, 670, 671, 799, 821, 835, 839, 844, 845, 862, 879, 913, 1061, 1068, 1173, 1178, 1241, 1300, 1305], "It": [31, 32, 33, 45, 46, 47, 48, 49, 56, 57, 66, 68, 88, 130, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 174, 187, 225, 235, 242, 265, 275, 280, 286, 287, 295, 304, 318, 321, 322, 402, 403, 436, 482, 541, 550, 561, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 728, 775, 776, 795, 799, 816, 820, 821, 825, 831, 845, 849, 854, 872, 880, 887, 896, 913, 921, 985, 1001, 1002, 1038, 1085, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1200, 1202, 1279, 1284, 1300, 1305], "Its": [210, 318, 480, 799, 1083, 1300], "NO": 919, "NOT": [123, 220, 259, 318, 541, 560, 634, 799, 867, 913, 1328], "No": 20, "Not": [198, 318, 465, 494, 495, 799, 820, 833, 913, 1070, 1300], "ON": 1328, "OR": [718, 719, 835, 913, 919, 1319], "ORs": [382, 799, 976, 1300], "On": [708, 799, 847, 913], "One": [50, 187, 239, 275, 280, 318, 331, 590, 720, 732, 748, 754, 757, 764, 766, 769, 770, 779, 799, 825, 913, 919, 1003, 1300], "Or": [208, 209, 224, 250, 264, 288, 297, 318, 458, 611, 644, 740, 741, 743, 744, 786, 787, 789, 795, 799, 838, 839, 844, 862, 871, 889, 913, 1063, 1300], "That": [139, 849, 913], "The": [20, 37, 38, 39, 44, 48, 49, 50, 55, 56, 59, 64, 65, 67, 68, 75, 79, 80, 88, 89, 91, 120, 122, 123, 124, 126, 133, 134, 135, 136, 138, 142, 143, 144, 145, 147, 149, 150, 151, 152, 153, 156, 157, 158, 159, 163, 164, 165, 167, 169, 179, 187, 188, 190, 191, 192, 193, 196, 197, 200, 207, 208, 209, 210, 215, 221, 224, 225, 228, 235, 241, 243, 250, 251, 252, 253, 256, 257, 258, 265, 275, 276, 281, 284, 288, 292, 293, 295, 296, 297, 304, 318, 329, 370, 371, 372, 373, 386, 387, 403, 405, 408, 409, 410, 418, 428, 432, 433, 436, 438, 441, 449, 450, 461, 464, 467, 471, 472, 480, 512, 516, 549, 550, 564, 591, 598, 601, 604, 605, 606, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 638, 641, 647, 651, 652, 656, 661, 662, 663, 664, 668, 669, 670, 671, 679, 680, 681, 682, 683, 684, 685, 695, 699, 705, 706, 707, 726, 729, 747, 751, 759, 761, 775, 776, 777, 778, 781, 789, 791, 792, 794, 795, 799, 800, 801, 804, 806, 807, 808, 815, 820, 825, 826, 828, 829, 831, 832, 835, 838, 839, 842, 844, 845, 849, 854, 858, 862, 864, 865, 866, 872, 876, 878, 883, 884, 887, 889, 896, 913, 917, 918, 919, 925, 928, 965, 966, 967, 980, 989, 1002, 1003, 1006, 1007, 1008, 1016, 1030, 1034, 1035, 1038, 1040, 1043, 1051, 1052, 1068, 1069, 1072, 1083, 1117, 1121, 1154, 1173, 1175, 1177, 1181, 1182, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1209, 1212, 1217, 1221, 1222, 1231, 1232, 1233, 1234, 1238, 1239, 1240, 1241, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1281, 1283, 1285, 1292, 1294, 1296, 1300, 1301, 1306, 1307, 1308, 1309, 1314, 1328, 1329, 1331], "Then": 152, "There": 1328, "These": [1, 32, 39, 129, 135, 136, 172, 282, 318, 449, 798, 799, 917, 1038, 1051], "To": [38, 57, 198, 318, 392, 408, 409, 465, 466, 648, 655, 656, 657, 660, 670, 671, 680, 681, 682, 683, 692, 799, 833, 913, 990, 1006, 1007, 1070, 1218, 1225, 1226, 1227, 1230, 1240, 1241, 1262, 1281, 1300, 1328], "Will": [56, 57, 820, 821, 831, 858, 869, 913, 1300], "With": [142, 219, 261, 318, 362, 534, 635, 799, 820, 868, 913, 957, 1103, 1139, 1205, 1300], "_": [1, 50, 54, 243, 273, 277, 318, 355, 520, 649, 657, 659, 661, 666, 667, 672, 675, 676, 984, 1219, 1227, 1231, 1236, 1237, 1242, 1246, 1276, 1300], "__array_ufunc__": 921, "__call__": 795, "__dataframe__": 121, "__enter__": 1328, "__exit__": 1328, "__getattr__": 795, "__getitem__": 695, "__init__": [1, 31, 32, 33, 49, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 160, 888, 1328], "__name__": [222, 318], "_bar_": 750, "_btm_by_a": [387, 799], "_btm_by_b": [387, 799], "_by_ca": [387, 707, 799], "_by_cb": [387, 707, 799], "_df": [1, 51], "_diff": [292, 318, 883, 913], "_eager": [820, 913], "_expr": [1, 52], "_foo": 555, "_geventdataframeresult": [57, 821, 913], "_is_not_nan": [495, 799], "_is_odd": [256, 318, 864, 913], "_isnan": [494, 799], "_isnul": [497, 799], "_kwarg": [820, 913], "_ldf": 1, "_lf": 53, "_lower_boundari": [209, 318, 839, 913], "_mean_squar": [297, 889], "_not_nul": [496, 799], "_o": [666, 667, 1236, 1237], "_revers": [575, 579, 608, 799], "_right": [223, 224, 225, 318, 843, 844, 845, 913], "_suffix": 580, "_sum": [297, 889], "_top_by_a": [707, 799], "_top_by_b": [707, 799], "_train": [885, 913], "_upper_boundari": [209, 318, 839, 913], "_world": 750, "a1": [39, 51, 53, 318], "a101": 1331, "a123": [39, 318], "a2": [39, 51, 53, 318], "a_1": [676, 1246, 1276, 1300], "a_2": [1276, 1300], "a_3": [1276, 1300], "a_a": 779, "a_agg_list": [209, 318, 839, 913], "a_b_doubl": 746, "a_btm_by_a": [387, 799], "a_btm_by_b": [387, 799], "a_by_ca": [387, 707, 799], "a_by_cb": [387, 707, 799], "a_div_2": 1322, "a_div_5": 1322, "a_interpol": [486, 799], "a_is_even": [265, 318, 778, 872, 913], "a_isnul": [497, 799], "a_lag_": 729, "a_log2": 1322, "a_mod_2": 1322, "a_not_nul": [496, 799], "a_revers": [575, 579, 608, 799], "a_rol": 729, "a_suffix": 580, "a_times_2": [550, 799], "a_times_b": [549, 799], "a_top_by_a": [707, 799], "a_top_by_b": [707, 799], "a_txt": 779, "aa": [461, 648, 660, 747, 799, 919, 1003, 1218, 1230, 1300, 1323], "aaa": [1, 39, 318, 648, 660, 695, 697, 698, 919, 1218, 1230], "aaaa": [966, 967], "aabcdef": 681, "aad": [966, 967], "aag": 26, "aazz": 1323, "ab": [211, 227, 269, 292, 318, 671, 695, 697, 698, 799, 883, 913, 919, 1084, 1108, 1272, 1300, 1321, 1323], "ab12": 671, "ab12cd34ef": 671, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 327, 654, 657, 670, 680, 799, 919, 1224, 1227, 1240, 1241], "abc123": 1323, "abc456": [670, 1240, 1241, 1323], "abcabc": 671, "abcd": 1323, "abcdeff": 680, "abf": [137, 148, 149], "abl": [95, 135, 541], "about": [95, 135, 641, 648, 656, 657, 660, 670, 671, 799, 917, 1212, 1218, 1226, 1227, 1230, 1240, 1241, 1300, 1331], "abov": [39, 224, 243, 318, 789, 844, 913], "abs_a": 1322, "absolut": [137, 148, 149, 156, 157, 158, 159, 326, 457, 459, 460, 799, 924, 1062, 1064, 1065, 1300, 1322], "acc": [735, 736, 749, 773], "accent": 919, "accept": [131, 133, 134, 137, 139, 141, 143, 145, 147, 150, 151, 152, 163, 179, 189, 208, 256, 257, 261, 264, 281, 292, 293, 297, 318, 327, 387, 392, 461, 487, 591, 605, 606, 644, 672, 699, 707, 715, 717, 719, 724, 727, 728, 729, 730, 738, 747, 763, 765, 768, 777, 781, 783, 789, 795, 799, 815, 827, 838, 864, 865, 868, 871, 876, 883, 884, 889, 913, 917, 918, 990, 1089, 1173, 1181, 1182, 1205, 1242, 1300], "access": [40, 51, 52, 53, 54, 139, 143, 145, 147, 149, 150, 151, 152, 176, 183, 221, 251, 252, 265, 318, 658, 695, 822, 872, 885, 913, 918, 1228, 1331], "accord": [251, 318, 598, 740, 741, 743, 744, 786, 787, 799, 1021, 1175, 1300], "accordingli": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146], "account": [39, 127, 136, 149, 318, 432, 457, 459, 460, 799, 1034, 1062, 1064, 1065, 1300], "accumul": [735, 736, 749, 773], "acg": 26, "achiev": [228, 243, 304, 318, 550, 667, 799, 1154, 1237, 1300], "aco": 1321, "acosd": 1321, "across": [39, 50, 136, 188, 210, 230, 232, 237, 258, 268, 318, 405, 480, 564, 717, 719, 735, 736, 738, 763, 765, 768, 783, 799, 826, 866, 913, 1083, 1300], "action": [38, 318], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 513, 657, 1118, 1227], "actual": [39, 123, 163, 167, 253, 318, 1207, 1300, 1323, 1330], "ad": [37, 39, 123, 138, 209, 265, 275, 280, 282, 287, 292, 293, 318, 333, 441, 464, 557, 558, 699, 735, 736, 778, 799, 839, 872, 880, 883, 884, 913, 919, 1043, 1069, 1279, 1284, 1300], "adbc": [37, 135, 136, 318], "adbc_driver_manag": 155, "adbc_ingest": [37, 318], "add": [38, 39, 134, 197, 209, 228, 292, 293, 294, 295, 318, 321, 403, 577, 578, 579, 580, 598, 699, 745, 749, 789, 799, 839, 843, 883, 884, 885, 886, 887, 913, 1068, 1300, 1305], "add_calendar_dai": 745, "add_calendar_month": 745, "add_calendar_year": 745, "add_chart": [39, 318], "add_dai": 745, "add_format": [39, 318], "add_hour": 745, "add_milli": 745, "add_second": 745, "add_seri": [39, 318], "add_week": 745, "add_worksheet": [39, 318], "addit": [29, 35, 37, 38, 39, 123, 132, 137, 138, 148, 149, 161, 163, 165, 167, 192, 196, 208, 226, 241, 256, 257, 264, 277, 284, 292, 293, 297, 318, 327, 419, 461, 464, 591, 644, 648, 656, 657, 660, 670, 671, 695, 699, 724, 727, 728, 729, 730, 747, 777, 778, 781, 795, 799, 832, 838, 864, 865, 871, 878, 883, 884, 889, 913, 919, 1009, 1017, 1069, 1218, 1226, 1227, 1230, 1240, 1241, 1282, 1300, 1310, 1328], "addition": [58, 251, 318, 919], "address": 657, "adjac": [39, 318], "adjust": [457, 459, 460, 641, 799, 1062, 1064, 1065, 1212, 1300], "adl": [137, 148, 149], "adlf": 149, "advanc": [39, 243, 318, 367, 541, 574, 577, 579, 581, 582, 962, 1146, 1331], "advantag": [39, 172, 242, 318], "advis": [39, 49, 88, 318], "aedt": 742, "aeiuo": [660, 1230], "af1": 50, "af2": 50, "af3": 50, "affect": [37, 156, 157, 158, 159, 318], "afm": 149, "afoo": [885, 913], "after": [39, 58, 123, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 179, 197, 281, 284, 318, 386, 387, 461, 591, 601, 694, 706, 707, 799, 815, 876, 878, 913, 980, 1068, 1177, 1264, 1285, 1300, 1315], "afterward": [49, 789], "ag": [235, 318, 854, 913, 1329], "again": [550, 799], "against": [37, 97, 133, 135, 200, 265, 318, 513, 660, 778, 835, 872, 913, 1118, 1230, 1309, 1328, 1330, 1331], "agg": [208, 209, 243, 250, 318, 328, 387, 467, 469, 474, 477, 549, 550, 591, 643, 644, 707, 714, 740, 743, 761, 799, 820, 821, 831, 838, 839, 858, 862, 869, 913, 919], "agg_group": [752, 799], "agg_list": [549, 799], "aggreg": [133, 134, 137, 145, 148, 202, 208, 209, 229, 231, 233, 236, 239, 243, 244, 245, 250, 266, 267, 286, 289, 297, 298, 300, 302, 318, 328, 377, 382, 385, 467, 483, 549, 550, 591, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 716, 717, 718, 719, 735, 736, 737, 738, 749, 754, 762, 763, 765, 767, 768, 773, 782, 783, 799, 839, 849, 850, 851, 852, 855, 856, 859, 862, 873, 874, 881, 889, 890, 892, 894, 913, 917, 971, 976, 979, 1086, 1187, 1188, 1189, 1191, 1194, 1195, 1196, 1300, 1316, 1318, 1321, 1327], "aggregate_funct": [243, 318, 919], "aho": [649, 659, 661, 672, 1219, 1229, 1231, 1242], "aiosqlit": 135, "alchemy_conn": 135, "algorithm": [178, 318, 334, 649, 659, 661, 672, 720, 799, 814, 913, 929, 1219, 1229, 1231, 1242, 1300], "alia": [1, 12, 50, 52, 54, 86, 183, 209, 227, 243, 250, 284, 292, 295, 318, 321, 327, 331, 371, 372, 373, 374, 376, 386, 397, 398, 399, 400, 401, 403, 406, 411, 412, 414, 415, 416, 417, 418, 419, 420, 421, 423, 424, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 446, 448, 449, 450, 451, 452, 455, 456, 469, 471, 476, 478, 484, 487, 490, 493, 501, 503, 525, 537, 543, 548, 550, 554, 557, 558, 560, 562, 567, 570, 572, 574, 585, 586, 590, 592, 596, 598, 601, 603, 631, 633, 648, 649, 650, 651, 653, 654, 656, 657, 659, 660, 661, 662, 666, 667, 672, 673, 674, 675, 676, 677, 678, 682, 683, 685, 695, 696, 697, 698, 700, 705, 706, 708, 714, 715, 721, 722, 723, 727, 728, 729, 730, 740, 743, 745, 746, 749, 750, 755, 758, 760, 761, 773, 781, 786, 789, 799, 839, 841, 848, 862, 878, 883, 887, 913, 1002, 1009, 1010, 1013, 1016, 1017, 1018, 1019, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1108, 1175, 1180, 1226, 1227, 1231, 1241, 1246, 1247, 1300], "alias": [265, 318, 557, 558, 872, 913], "alic": [133, 1329], "align": [10, 15, 16, 39, 50, 58, 318, 1329], "align_fram": 58, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 36, 38, 39, 44, 45, 48, 50, 56, 63, 89, 106, 108, 120, 125, 130, 133, 134, 137, 138, 139, 141, 143, 144, 145, 147, 148, 150, 151, 160, 161, 164, 167, 172, 177, 178, 180, 187, 189, 191, 192, 199, 211, 216, 218, 220, 221, 222, 223, 225, 226, 227, 232, 234, 238, 239, 243, 246, 247, 251, 252, 253, 257, 263, 264, 268, 269, 273, 275, 276, 280, 283, 285, 286, 287, 288, 293, 295, 318, 321, 331, 333, 355, 370, 387, 396, 402, 408, 409, 410, 411, 441, 461, 466, 472, 479, 480, 483, 485, 489, 492, 496, 497, 502, 512, 513, 520, 538, 541, 549, 571, 574, 575, 577, 578, 579, 580, 581, 582, 589, 591, 601, 606, 608, 612, 636, 642, 644, 650, 654, 657, 658, 662, 665, 671, 679, 680, 681, 685, 707, 717, 726, 728, 735, 736, 737, 738, 747, 749, 754, 755, 758, 765, 773, 781, 782, 783, 789, 795, 799, 805, 811, 814, 817, 820, 821, 825, 827, 828, 829, 831, 834, 843, 845, 849, 853, 858, 860, 865, 869, 870, 871, 877, 879, 880, 884, 885, 887, 913, 919, 950, 1001, 1003, 1006, 1007, 1008, 1009, 1043, 1084, 1090, 1102, 1108, 1117, 1118, 1125, 1143, 1146, 1177, 1182, 1187, 1213, 1220, 1224, 1227, 1228, 1232, 1235, 1241, 1249, 1250, 1251, 1255, 1272, 1281, 1300, 1304, 1305, 1310, 1312, 1317, 1318, 1323, 1327, 1328, 1330, 1331], "all_compat": 1312, "all_data": 1328, "all_horizont": [191, 192, 318, 716, 828, 829, 913], "all_stat": 30, "alloc": [133, 134, 195, 246, 318, 799, 888, 917, 1061, 1300], "allow": [1, 8, 38, 39, 45, 46, 47, 48, 49, 88, 97, 121, 135, 138, 147, 150, 151, 152, 153, 160, 163, 164, 167, 176, 221, 224, 226, 251, 252, 254, 276, 277, 280, 283, 296, 318, 432, 438, 441, 529, 549, 550, 557, 558, 603, 632, 684, 686, 687, 799, 843, 844, 849, 853, 877, 885, 913, 917, 919, 1034, 1040, 1043, 1134, 1154, 1179, 1199, 1254, 1256, 1257, 1281, 1282, 1300, 1323, 1331], "allow_alias": [557, 558], "allow_chunk": [163, 167], "allow_copi": [121, 176, 276, 318, 1281, 1300], "allow_dupl": [598, 799, 1175, 1300], "allow_infin": [163, 167], "allow_missing_column": [145, 152], "allow_nul": [160, 163, 167, 1331], "allow_object": 759, "allow_parallel": [224, 318, 843, 844, 913], "allow_pyarrow_filt": 153, "allow_time_zon": [163, 164, 167], "allowed_dtyp": [163, 164, 167, 1331], "almost": [57, 228, 304, 318, 684, 686, 687, 821, 913, 1154, 1254, 1256, 1257, 1300], "along": [143, 145, 147, 150, 151, 152], "alpha": [457, 459, 460, 799, 831, 858, 869, 913, 919, 1062, 1064, 1065, 1300], "alpha_i": [458, 799, 1063, 1300], "alphabet": [919, 1331], "alphanumer": [692, 919, 1262], "alreadi": [37, 38, 96, 275, 318, 402, 513, 565, 712, 799, 869, 913, 1001, 1118, 1289, 1300], "also": [27, 36, 39, 45, 49, 123, 135, 138, 139, 144, 145, 147, 152, 162, 163, 166, 167, 172, 193, 208, 209, 235, 239, 243, 250, 252, 256, 264, 275, 287, 292, 295, 318, 398, 401, 410, 432, 435, 441, 467, 487, 550, 557, 558, 591, 601, 605, 606, 644, 670, 671, 672, 679, 680, 695, 726, 735, 736, 739, 742, 749, 751, 773, 789, 798, 799, 805, 838, 839, 854, 862, 864, 871, 880, 883, 885, 887, 913, 919, 1008, 1037, 1089, 1177, 1181, 1182, 1220, 1240, 1241, 1242, 1249, 1300, 1304, 1310, 1312, 1315, 1319, 1323, 1326, 1328, 1329], "alt": [318, 321, 1300, 1305], "altair": [155, 318, 321, 1300, 1305], "altern": [39, 318, 795, 1320], "although": [265, 318, 872, 913], "alwai": [13, 36, 38, 45, 66, 68, 133, 179, 200, 208, 223, 224, 228, 281, 304, 318, 386, 387, 549, 561, 684, 706, 707, 789, 799, 815, 835, 843, 844, 849, 876, 913, 919, 980, 1154, 1254, 1285, 1300, 1309, 1310, 1328, 1331], "am": [673, 1243], "amarillo": 1323, "amazonaw": 32, "ambigu": [435, 436, 449, 684, 687, 742, 1037, 1038, 1051, 1254, 1257], "america": 743, "amount": [49, 67, 88, 143, 147, 150, 151, 550, 745, 799, 1317], "amsterdam": [435, 1037], "an": [1, 30, 36, 37, 38, 39, 45, 46, 47, 51, 53, 54, 66, 67, 93, 97, 100, 103, 110, 112, 120, 122, 123, 126, 133, 134, 135, 136, 138, 140, 143, 144, 145, 147, 149, 150, 151, 152, 161, 163, 167, 180, 181, 182, 183, 189, 195, 198, 202, 204, 209, 220, 221, 222, 224, 225, 228, 239, 243, 247, 248, 250, 251, 255, 265, 270, 276, 280, 282, 286, 287, 292, 295, 304, 318, 321, 329, 351, 354, 366, 372, 377, 380, 382, 383, 385, 398, 399, 400, 401, 402, 403, 410, 414, 415, 432, 435, 438, 452, 458, 466, 467, 473, 474, 477, 510, 513, 516, 518, 540, 541, 549, 550, 562, 564, 574, 575, 596, 597, 598, 606, 607, 611, 612, 613, 615, 617, 619, 621, 624, 626, 628, 647, 648, 651, 657, 660, 664, 684, 686, 687, 689, 691, 705, 708, 716, 721, 725, 740, 741, 743, 744, 746, 748, 751, 755, 756, 757, 758, 759, 771, 773, 774, 777, 781, 786, 787, 789, 790, 795, 799, 817, 818, 819, 821, 825, 827, 831, 835, 839, 844, 845, 849, 858, 860, 862, 863, 869, 872, 880, 883, 885, 887, 888, 896, 910, 913, 917, 918, 919, 946, 949, 961, 966, 971, 974, 976, 977, 979, 989, 991, 997, 998, 999, 1000, 1001, 1008, 1012, 1040, 1054, 1061, 1063, 1103, 1115, 1118, 1121, 1123, 1145, 1154, 1182, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1200, 1202, 1217, 1218, 1221, 1227, 1230, 1234, 1254, 1256, 1257, 1259, 1261, 1281, 1283, 1300, 1318, 1320, 1323, 1327, 1328, 1330], "ana": [673, 1243], "anan": [673, 1243], "ananab": 1323, "and_": 799, "ang": 1323, "angl": [722, 723], "ani": [4, 31, 32, 33, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 55, 56, 57, 65, 66, 68, 120, 121, 122, 123, 124, 125, 126, 130, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 174, 177, 179, 185, 189, 191, 192, 197, 199, 200, 202, 204, 219, 221, 222, 223, 224, 225, 228, 232, 242, 247, 251, 252, 253, 265, 268, 271, 272, 275, 276, 277, 280, 281, 283, 286, 287, 295, 318, 321, 322, 327, 330, 331, 355, 386, 387, 388, 402, 403, 436, 437, 455, 456, 466, 467, 471, 474, 476, 478, 482, 491, 501, 508, 513, 520, 548, 549, 550, 557, 567, 570, 572, 574, 575, 577, 579, 581, 582, 585, 586, 590, 595, 598, 605, 606, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 637, 647, 649, 663, 680, 681, 682, 683, 684, 686, 687, 689, 691, 700, 706, 707, 708, 715, 716, 717, 719, 728, 730, 731, 732, 759, 761, 775, 776, 789, 799, 815, 820, 821, 827, 828, 829, 831, 834, 835, 843, 844, 845, 857, 860, 872, 876, 877, 880, 887, 888, 913, 917, 919, 921, 923, 926, 950, 980, 985, 1001, 1002, 1038, 1039, 1058, 1059, 1068, 1071, 1076, 1078, 1080, 1085, 1094, 1103, 1106, 1113, 1118, 1125, 1153, 1154, 1165, 1166, 1175, 1181, 1182, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1200, 1201, 1217, 1219, 1233, 1254, 1256, 1257, 1259, 1261, 1279, 1280, 1281, 1282, 1284, 1285, 1300, 1305, 1328, 1331], "anna": [235, 318, 854, 913], "anoth": [90, 162, 180, 188, 194, 208, 224, 258, 318, 402, 405, 412, 486, 516, 554, 560, 564, 605, 614, 616, 618, 620, 622, 625, 627, 629, 660, 799, 817, 826, 838, 844, 866, 885, 913, 1001, 1010, 1060, 1068, 1088, 1121, 1181, 1182, 1230, 1300, 1322, 1323], "anti": [223, 318, 843, 896, 913, 1200, 1202, 1300, 1316], "any_horizont": 718, "anyth": [38, 251, 318], "anywher": [374, 376, 684, 686, 687, 1254, 1256, 1257], "ap": 1323, "apach": [34, 40, 41, 44, 131, 135, 136, 139, 141, 149, 175, 318, 922], "apaya": [685, 1255], "api": [0, 32, 121, 143, 145, 147, 150, 151, 152, 153, 176, 228, 304, 318, 550, 761, 799, 896, 1154, 1300, 1327], "apia": [411, 1009], "app": [678, 1248], "appear": [39, 62, 123, 158, 159, 318, 671, 710, 799, 919, 1287, 1300, 1329], "append": [37, 38, 163, 197, 223, 224, 225, 318, 602, 789, 799, 843, 844, 845, 913, 1068, 1300], "appl": [184, 213, 223, 247, 248, 271, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 318, 387, 608, 653, 678, 707, 799, 843, 860, 891, 892, 894, 895, 897, 898, 899, 900, 901, 902, 903, 913, 1223, 1248, 1316, 1323], "appli": [10, 20, 36, 39, 45, 58, 135, 147, 160, 163, 167, 187, 202, 225, 228, 242, 264, 265, 275, 304, 318, 343, 413, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 434, 437, 439, 450, 451, 453, 459, 460, 549, 550, 595, 613, 614, 615, 616, 619, 620, 626, 627, 644, 670, 671, 684, 686, 687, 691, 724, 735, 736, 749, 760, 761, 773, 778, 789, 799, 825, 845, 849, 857, 871, 872, 896, 913, 990, 1011, 1014, 1015, 1016, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1036, 1039, 1041, 1052, 1053, 1055, 1064, 1065, 1154, 1188, 1189, 1191, 1195, 1240, 1241, 1254, 1256, 1257, 1261, 1300, 1309], "applic": [276, 318, 550, 799], "appropri": [39, 153, 200, 276, 318, 441, 601, 799, 835, 913, 1043, 1177, 1300], "approx": [334, 799], "approx_n_uniqu": [318, 799, 913, 1300], "approxim": [44, 178, 318, 334, 458, 720, 799, 814, 913, 929, 1063, 1300, 1322, 1331], "april": [438, 1040, 1323, 1324], "ar": [1, 10, 11, 17, 20, 30, 32, 33, 36, 38, 39, 45, 46, 47, 48, 49, 50, 57, 58, 87, 88, 95, 101, 117, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 163, 164, 165, 167, 172, 176, 179, 185, 187, 191, 192, 195, 198, 200, 201, 202, 207, 208, 209, 221, 223, 224, 225, 226, 228, 234, 235, 241, 243, 250, 251, 252, 253, 256, 257, 259, 261, 264, 271, 275, 276, 277, 280, 281, 285, 287, 288, 292, 293, 296, 297, 318, 330, 332, 346, 362, 367, 386, 387, 392, 398, 400, 401, 410, 436, 441, 449, 454, 456, 457, 458, 459, 460, 465, 467, 487, 489, 491, 492, 494, 495, 496, 497, 499, 504, 534, 541, 549, 586, 591, 598, 601, 604, 605, 606, 607, 611, 614, 616, 618, 620, 622, 623, 625, 627, 629, 635, 638, 641, 643, 644, 649, 658, 662, 664, 665, 668, 669, 670, 671, 672, 674, 685, 687, 689, 694, 699, 701, 705, 706, 707, 716, 717, 719, 724, 727, 728, 729, 730, 731, 738, 740, 741, 743, 744, 763, 765, 768, 777, 781, 783, 786, 787, 789, 791, 792, 794, 798, 799, 800, 801, 804, 805, 806, 807, 808, 811, 815, 820, 821, 825, 828, 829, 833, 835, 838, 839, 843, 844, 845, 849, 853, 854, 858, 860, 862, 864, 865, 867, 868, 871, 876, 879, 880, 883, 884, 885, 889, 913, 917, 919, 926, 927, 941, 957, 962, 980, 983, 990, 999, 1000, 1008, 1038, 1043, 1051, 1057, 1059, 1061, 1062, 1063, 1064, 1065, 1070, 1072, 1074, 1089, 1092, 1094, 1095, 1097, 1098, 1099, 1100, 1104, 1109, 1139, 1146, 1166, 1175, 1177, 1181, 1182, 1183, 1193, 1205, 1209, 1212, 1219, 1228, 1232, 1234, 1238, 1239, 1240, 1241, 1244, 1255, 1257, 1259, 1264, 1271, 1279, 1281, 1282, 1283, 1285, 1292, 1294, 1296, 1300, 1301, 1304, 1306, 1307, 1308, 1310, 1312, 1315, 1320, 1328, 1331], "arbitrari": [77, 204, 318, 405, 799, 826, 913, 919], "arbitrarili": [228, 318], "arcco": [799, 1300], "arccosh": [799, 1300], "arcsin": [799, 1300], "arcsinh": [799, 1300], "arctan": [722, 723, 799, 1300], "arctan2": 723, "arctanh": [799, 1300], "aren": [36, 45, 318, 913], "arg": [31, 49, 60, 61, 63, 64, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 200, 242, 318, 343, 595, 724, 750, 799, 835, 857, 913, 917, 1154, 1300, 1313], "arg_max": [799, 1300], "arg_min": [799, 1300], "arg_sort": [799, 1300], "arg_tru": [725, 799, 1300], "arg_uniqu": [799, 1300], "arg_wher": [344, 799], "argmax": [549, 799], "argument": [35, 38, 44, 132, 133, 137, 145, 147, 148, 163, 165, 167, 185, 189, 196, 208, 209, 224, 241, 242, 250, 256, 257, 264, 277, 284, 288, 292, 293, 297, 318, 436, 449, 461, 467, 487, 549, 591, 595, 611, 644, 679, 680, 681, 699, 716, 722, 723, 724, 727, 728, 729, 730, 732, 747, 777, 781, 789, 795, 799, 827, 832, 838, 839, 844, 857, 862, 864, 865, 871, 878, 883, 884, 889, 910, 913, 917, 919, 1038, 1051, 1089, 1249, 1250, 1251, 1282, 1300, 1322, 1323], "aris": 135, "arithmet": [202, 318], "arm": 155, "arm64": 155, "around": [36, 45, 318, 913], "arr": [276, 318, 791, 1281, 1292, 1300], "arr_bar": 1318, "arr_foo": 1318, "arrai": [120, 124, 133, 134, 137, 145, 148, 174, 195, 196, 270, 275, 276, 277, 318, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 398, 399, 400, 401, 508, 523, 524, 525, 526, 528, 537, 538, 540, 543, 545, 549, 607, 613, 615, 617, 619, 621, 624, 626, 628, 634, 705, 728, 746, 778, 799, 832, 913, 918, 921, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 997, 998, 999, 1000, 1005, 1061, 1113, 1128, 1129, 1130, 1131, 1133, 1141, 1142, 1143, 1145, 1148, 1150, 1151, 1183, 1188, 1189, 1191, 1194, 1195, 1196, 1203, 1207, 1275, 1279, 1281, 1282, 1283, 1300, 1321, 1327, 1330], "array_agg": 1321, "array_contain": 1321, "array_get": 1321, "array_length": 1321, "array_low": 1321, "array_mean": 1321, "array_revers": 1321, "array_sum": 1321, "array_to_str": 1321, "array_uniqu": 1321, "array_upp": 1321, "arraylik": [1005, 1300], "arrow": [40, 41, 46, 120, 135, 136, 139, 141, 150, 175, 221, 252, 253, 270, 272, 276, 318, 913, 922, 1275, 1281, 1300], "arrowinvaliderror": [38, 318], "as_": [1300, 1305], "as_dict": [134, 241, 318], "as_expr": 919, "as_seri": [180, 271, 318, 817, 913, 919], "asarrai": [174, 921], "ascend": [209, 250, 318, 611, 799, 839, 862, 913], "ascii": [7, 20, 649, 659, 661, 662, 666, 667, 672, 674, 685, 694, 919, 1219, 1229, 1231, 1232, 1236, 1237, 1242, 1244, 1255, 1264], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [649, 659, 661, 672, 1219, 1229, 1231, 1242], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1331, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 919, "ascii_uppercas": [286, 318], "asd": [650, 657, 1220, 1227], "asia": [127, 919, 1014, 1015, 1041], "asid": 441, "asin": 1321, "asind": 1321, "asof": [224, 318, 844, 913], "asof_join": [224, 318], "asofjoinstrategi": [224, 318, 844, 913], "assert": [156, 157, 158, 159, 163, 167, 250, 318, 811, 919], "assert_frame_equ": [157, 158, 194, 318, 1331], "assert_frame_not_equ": [156, 159], "assert_series_equ": [156, 159, 1060, 1300, 1331], "assert_series_not_equ": [157, 158], "assert_someth": 161, "assertionerror": [156, 157, 158, 159], "assign": [161, 209, 303, 318, 367, 541, 591, 601, 676, 677, 799, 839, 895, 913, 962, 1146, 1177, 1246, 1247, 1300], "associ": [37, 39, 50, 136, 138, 162, 165, 253, 318, 918, 1311, 1313, 1317], "assum": [32, 253, 318, 849, 896, 913, 1323], "assume_rol": 32, "assumpt": [549, 799], "async": [135, 821, 913], "async_engin": 135, "asynchron": [57, 135, 821, 913], "asyncio": [57, 135, 821, 913], "asyncresult": [57, 821, 913], "ata": 26, "atan": 1321, "atan2": [722, 723, 1321], "atan2_ab": 1325, "atan2d": [723, 1321], "atan2d_ab": 1325, "atand": 1321, "atg": 26, "atgataaaggag": 26, "atol": [156, 157, 158, 159], "attain": [644, 799], "attempt": [1, 405, 799, 826, 913], "attr": [318, 321, 1300, 1305], "attribut": [59, 62, 65, 66, 67, 68, 75, 79, 160, 318, 321, 791, 792, 794, 795, 800, 801, 804, 806, 807, 808, 888, 913, 1292, 1294, 1296, 1300, 1301, 1305, 1306, 1307, 1308], "attributeerror": 1, "audi": [271, 318, 608, 799], "august": 441, "australia": 742, "auth": 33, "authent": [38, 137, 145, 147, 148, 149, 150, 152, 318], "author": 1, "auto": [58, 120, 122, 123, 124, 126, 142, 143, 145, 147, 150, 151, 152, 282, 318, 913, 1331], "auto_structifi": [256, 292, 318, 864, 883, 913], "autofilt": [39, 318], "autofit": [39, 318], "autogener": [133, 134, 138, 144, 147], "automat": [8, 36, 45, 120, 122, 123, 124, 126, 127, 133, 134, 135, 136, 138, 142, 143, 145, 147, 150, 151, 163, 167, 169, 256, 265, 292, 318, 549, 606, 679, 680, 681, 778, 799, 864, 872, 883, 913, 917, 1181, 1182, 1249, 1250, 1251, 1284, 1300, 1310, 1312, 1315, 1328], "autumn": [670, 671], "avail": [39, 44, 48, 129, 135, 136, 137, 148, 149, 161, 172, 243, 265, 317, 318, 441, 601, 778, 791, 792, 794, 798, 799, 800, 801, 804, 805, 806, 807, 808, 811, 872, 911, 912, 913, 917, 919, 1003, 1177, 1292, 1294, 1296, 1300, 1301, 1304, 1306, 1307, 1308, 1319], "available_timezon": [65, 919], "averag": [39, 318, 457, 458, 459, 460, 601, 799, 1062, 1063, 1064, 1065, 1177, 1300, 1317], "avg": 1321, "avocado": 1323, "avoid": [163, 167, 200, 252, 318, 329, 799, 835, 913], "avro": [34, 131, 318, 811], "avrocompress": [34, 318], "aw": [32, 137, 143, 145, 147, 148, 150, 151, 152], "awai": 1322, "await": [57, 135, 821, 907, 913], "awar": [10, 135, 221, 252, 253, 272, 318, 458, 649, 659, 661, 672, 687, 799, 913, 1063, 1219, 1229, 1231, 1242, 1257, 1300], "aws_access_key_id": [38, 137, 148, 152, 318], "aws_region": [38, 148, 152, 318], "aws_secret_access_kei": [38, 137, 148, 152, 318], "awsassumerolekwarg": 32, "axi": [234, 285, 318, 722, 723, 853, 879, 913], "aya": [674, 1244, 1255], "az": [137, 148, 149], "azur": [38, 137, 143, 145, 147, 148, 149, 150, 151, 152, 318], "azure_storage_account_kei": [137, 148, 149], "azure_storage_account_nam": [137, 148, 149], "b": [1, 10, 34, 36, 38, 40, 41, 44, 53, 58, 79, 92, 95, 120, 121, 122, 123, 124, 125, 126, 127, 133, 135, 138, 176, 177, 178, 179, 181, 182, 183, 184, 186, 188, 189, 190, 191, 192, 193, 194, 195, 196, 198, 199, 200, 202, 203, 205, 206, 207, 208, 209, 210, 211, 213, 214, 216, 218, 219, 220, 221, 222, 223, 226, 227, 229, 231, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 251, 252, 253, 254, 255, 256, 258, 261, 263, 264, 265, 266, 267, 269, 270, 271, 273, 274, 276, 277, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 327, 329, 330, 332, 333, 343, 345, 350, 355, 370, 371, 372, 373, 374, 375, 376, 387, 388, 396, 403, 407, 438, 441, 461, 463, 465, 466, 467, 469, 472, 479, 480, 483, 485, 486, 487, 489, 492, 494, 495, 496, 497, 502, 508, 513, 520, 530, 531, 532, 533, 549, 550, 555, 564, 571, 574, 575, 576, 577, 578, 579, 580, 588, 589, 591, 595, 598, 601, 605, 606, 608, 610, 636, 642, 644, 651, 655, 660, 664, 670, 671, 695, 696, 707, 710, 714, 716, 717, 718, 719, 720, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 746, 747, 748, 749, 750, 753, 754, 755, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 775, 776, 778, 780, 781, 782, 783, 784, 788, 795, 799, 814, 815, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 843, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 897, 898, 899, 900, 901, 902, 903, 904, 913, 919, 925, 928, 950, 965, 966, 967, 968, 969, 970, 983, 984, 985, 1002, 1005, 1040, 1043, 1057, 1060, 1061, 1068, 1071, 1089, 1094, 1113, 1135, 1136, 1137, 1138, 1175, 1180, 1221, 1225, 1230, 1234, 1240, 1241, 1265, 1267, 1268, 1270, 1282, 1287, 1300, 1310, 1312, 1313, 1315, 1316, 1317, 1318, 1323, 1324, 1325, 1328], "b1": [51, 53], "b2": [51, 53], "b345": [39, 318], "b4": [39, 318], "b_b": [265, 318], "b_btm_by_a": [387, 799], "b_btm_by_b": [387, 799], "b_by_ca": [387, 707, 799], "b_by_cb": [387, 707, 799], "b_is_not_nan": [495, 799], "b_isnan": [494, 799], "b_isnul": [497, 799], "b_not_nul": [496, 799], "b_revers": [575, 579, 608, 799], "b_suffix": 580, "b_sum": [297, 889], "b_top_by_a": [707, 799], "b_top_by_b": [707, 799], "ba": [405, 461, 564, 678, 747, 799, 919], "back": [4, 50, 152, 197, 209, 258, 276, 277, 318, 564, 591, 671, 799, 820, 839, 866, 888, 913, 1068, 1282, 1300], "backend": [38, 135, 136, 137, 148, 149, 318, 321, 1300, 1305], "background": [318, 322, 820, 912, 913], "backward": [44, 48, 199, 224, 318, 370, 410, 430, 466, 799, 834, 844, 913, 1008, 1032, 1071, 1300], "backward_fil": [472, 635, 799], "bad": [670, 671, 1240, 1241], "balanc": [166, 168, 1331], "ballon_dor": [656, 658, 1226, 1228], "banana": [184, 271, 300, 302, 305, 306, 307, 308, 309, 310, 311, 318, 387, 608, 653, 678, 707, 799, 892, 894, 897, 898, 899, 900, 901, 902, 903, 1323], "banded_column": [39, 318], "banded_row": [39, 318], "bar": [34, 36, 38, 40, 41, 42, 43, 44, 130, 142, 143, 180, 183, 184, 185, 189, 190, 191, 192, 193, 194, 197, 200, 202, 204, 205, 206, 211, 213, 214, 215, 217, 223, 227, 228, 229, 230, 231, 232, 233, 236, 237, 240, 243, 245, 247, 248, 251, 254, 255, 256, 258, 263, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278, 283, 284, 289, 290, 291, 296, 318, 321, 389, 405, 484, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 641, 650, 652, 655, 657, 658, 673, 675, 677, 682, 683, 720, 731, 732, 733, 748, 753, 754, 757, 758, 762, 764, 766, 767, 769, 770, 777, 780, 784, 788, 789, 795, 799, 817, 822, 823, 827, 828, 829, 830, 835, 841, 842, 843, 856, 860, 863, 864, 877, 878, 882, 913, 918, 919, 982, 1125, 1212, 1220, 1222, 1225, 1227, 1228, 1243, 1247, 1252, 1253, 1300, 1314, 1316, 1317, 1318, 1320, 1323, 1326], "bar2": 1323, "bar22": [202, 318], "bar_": 675, "bar_3": [273, 318], "bar_4": [273, 318], "bar_a": [243, 318], "bar_at_2": 1318, "bar_avg": 1317, "bar_b": [243, 318], "bar_color": [39, 318], "bar_max": 1317, "bar_median": 1317, "bar_min": 1317, "bar_negative_border_color_sam": [39, 318], "bar_negative_color_sam": [39, 318], "bar_std": 1317, "bar_sum": 1317, "bar_var": 1317, "bare": [557, 558, 919], "base": [31, 39, 63, 106, 108, 165, 192, 200, 209, 225, 250, 318, 411, 419, 454, 457, 458, 459, 460, 467, 482, 486, 544, 545, 549, 550, 596, 598, 606, 611, 614, 616, 618, 620, 622, 625, 627, 629, 689, 799, 835, 839, 845, 862, 913, 919, 1009, 1017, 1057, 1062, 1063, 1064, 1065, 1085, 1088, 1149, 1150, 1154, 1173, 1175, 1181, 1182, 1259, 1291, 1300, 1316, 1322, 1331], "base64": [372, 373, 651, 652, 966, 967, 1221, 1222], "base_nam": [282, 318], "base_utc_offset": [419, 1017], "baseexcept": 1328, "basi": [39, 138, 163, 318], "basic": [39, 174, 318, 556, 921, 1331], "basic_chart": [39, 318], "batch": [41, 56, 57, 129, 134, 135, 141, 143, 151, 153, 252, 280, 318, 820, 821, 849, 913], "batch_siz": [36, 45, 133, 134, 135, 143, 151, 153, 280, 318, 913], "batchedcsvread": 134, "baz": [204, 214, 215, 284, 318, 658, 675, 677, 748, 757, 770, 795, 842, 878, 913, 918, 919, 1228, 1247, 1314, 1320, 1323], "bb": [919, 1003, 1300, 1323, 1328], "bbb": [1, 39, 318, 695, 697, 698, 919], "bc": [660, 671, 782, 1230], "bcbc45": 1323, "bea": 12, "bear": 919, "beauti": 12, "becaus": [143, 151, 195, 209, 226, 228, 286, 304, 318, 471, 513, 541, 799, 839, 896, 913, 1061, 1118, 1154, 1300], "becom": [165, 317, 911, 912], "bed3": [39, 318], "been": [5, 30, 39, 170, 176, 299, 318, 473, 550, 568, 601, 799, 891, 1177, 1300], "beetl": [271, 318, 608, 799], "befor": [39, 64, 65, 133, 135, 138, 147, 153, 156, 157, 158, 159, 169, 172, 197, 209, 224, 265, 275, 280, 284, 318, 380, 381, 383, 384, 400, 401, 402, 549, 591, 592, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 655, 694, 701, 729, 775, 776, 799, 839, 841, 844, 878, 913, 917, 974, 975, 977, 978, 999, 1000, 1001, 1068, 1170, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1225, 1264, 1271, 1300, 1316], "beforehand": [684, 686, 687, 1254, 1256, 1257], "begin": [12, 39, 318, 457, 459, 460, 656, 685, 799, 1062, 1064, 1065, 1226, 1255, 1300], "behav": [200, 318, 467, 550, 680, 681, 799, 835, 913], "behavior": [44, 48, 145, 152, 191, 192, 200, 223, 224, 318, 354, 473, 516, 518, 655, 748, 757, 799, 828, 829, 835, 843, 844, 910, 913, 949, 1121, 1123, 1225], "behaviour": [10, 50, 58, 191, 192, 265, 318, 648, 656, 657, 660, 670, 671, 708, 778, 799, 828, 829, 872, 913, 1218, 1226, 1227, 1230, 1240, 1241], "behind": 169, "being": [13, 31, 32, 33, 45, 46, 47, 48, 56, 57, 66, 68, 130, 133, 134, 135, 138, 143, 144, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 180, 196, 225, 265, 273, 275, 280, 286, 287, 318, 321, 322, 402, 403, 436, 482, 550, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 655, 726, 728, 746, 775, 776, 799, 817, 820, 821, 831, 832, 845, 872, 880, 913, 985, 1001, 1002, 1038, 1085, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1225, 1276, 1279, 1284, 1300, 1305, 1331], "belong": [1, 209, 318, 839, 913], "below": [19, 38, 137, 138, 148, 149, 192, 200, 243, 318, 441, 466, 662, 670, 671, 685, 740, 741, 743, 744, 786, 787, 789, 795, 799, 835, 913, 1043, 1232, 1240, 1241, 1255], "benchmark": 133, "best": [228, 304, 318, 550, 799, 1154, 1300], "better": [228, 275, 276, 304, 318, 550, 667, 799, 816, 896, 913, 1200, 1202, 1237, 1300], "between": [24, 58, 91, 160, 161, 163, 167, 177, 185, 245, 252, 310, 318, 355, 388, 406, 407, 441, 487, 511, 520, 530, 531, 532, 533, 592, 598, 599, 621, 622, 647, 663, 722, 723, 726, 731, 733, 772, 775, 776, 799, 859, 902, 913, 950, 981, 984, 1004, 1005, 1043, 1089, 1116, 1125, 1135, 1136, 1137, 1138, 1170, 1175, 1176, 1192, 1217, 1233, 1300, 1317, 1325], "between_ab": [487, 799], "beyond": [692, 1262], "bia": [459, 460, 499, 623, 641, 799, 1064, 1065, 1104, 1193, 1212, 1300], "bias": [499, 641, 799, 1104, 1212, 1300], "big": 134, "big_fil": 134, "bigidx": 128, "bigqueri": 136, "bin": [403, 482, 598, 689, 715, 792, 799, 1002, 1085, 1175, 1259, 1294, 1300, 1305], "bin_count": [482, 799, 1085, 1300], "bin_i": [715, 799], "bin_x": [715, 799], "bin_xor_xi": [715, 799], "binari": [40, 135, 188, 258, 318, 371, 372, 373, 374, 375, 376, 405, 564, 651, 799, 826, 866, 913, 919, 965, 966, 968, 969, 970, 1221, 1319], "binary_str": [715, 799], "bind": 138, "birthdai": 133, "bit": [64, 65, 66, 67, 69, 70, 71, 72, 73, 74, 80, 81, 82, 83, 84, 378, 379, 380, 381, 383, 384, 603, 648, 799, 972, 974, 975, 977, 978, 1179, 1218, 1300, 1319, 1323], "bit_and": 1321, "bit_count": 1321, "bit_length": 1321, "bit_or": 1321, "bit_xor": 1321, "bitmap": [195, 318, 1061, 1300], "bitwis": [331, 377, 382, 385, 590, 715, 716, 717, 718, 719, 799, 971, 976, 979, 1300, 1319, 1321], "bitwise_and": [799, 1300], "bitwise_count_on": [799, 1300], "bitwise_count_zero": [799, 1300], "bitwise_leading_on": [799, 1300], "bitwise_leading_zero": [799, 1300], "bitwise_or": [799, 1300], "bitwise_trailing_on": [799, 1300], "bitwise_trailing_zero": [799, 1300], "bitwise_xor": [799, 1300], "bla": [650, 657, 1220, 1227], "black": [228, 318, 371, 372, 373, 374, 376], "blindli": [513, 1118], "block": [20, 57, 208, 283, 318, 789, 821, 838, 860, 877, 886, 887, 896, 913, 1200, 1202, 1300], "blue": [49, 87, 88, 371, 372, 373, 374, 376, 712, 799, 1289, 1300], "bob": [133, 235, 318, 854, 913, 1329], "bodi": [39, 318, 322], "bold": [39, 318], "bom": [36, 45, 318, 913], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 36, 38, 39, 44, 45, 46, 47, 48, 50, 56, 57, 58, 87, 120, 121, 122, 123, 125, 126, 127, 130, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 171, 174, 176, 179, 180, 181, 182, 187, 189, 194, 199, 200, 201, 202, 206, 207, 208, 209, 213, 214, 216, 217, 218, 221, 223, 224, 232, 241, 243, 247, 251, 252, 253, 254, 259, 262, 264, 265, 268, 271, 273, 276, 277, 281, 282, 283, 284, 287, 288, 290, 292, 300, 302, 305, 308, 318, 329, 330, 331, 332, 333, 343, 346, 347, 350, 354, 355, 363, 368, 371, 372, 374, 376, 387, 388, 397, 398, 399, 400, 401, 402, 403, 410, 422, 437, 454, 455, 456, 457, 459, 460, 476, 478, 479, 482, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 504, 505, 509, 513, 516, 518, 520, 529, 536, 542, 548, 549, 550, 554, 555, 556, 557, 558, 559, 560, 561, 565, 566, 585, 586, 588, 590, 593, 594, 598, 601, 603, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 632, 634, 636, 641, 643, 644, 647, 648, 649, 650, 651, 653, 659, 660, 661, 663, 670, 671, 672, 675, 676, 678, 684, 686, 687, 689, 691, 695, 697, 698, 707, 709, 712, 715, 716, 717, 718, 719, 721, 724, 725, 726, 730, 731, 734, 735, 740, 741, 743, 744, 755, 756, 759, 761, 771, 774, 778, 781, 786, 787, 789, 790, 799, 815, 817, 818, 820, 821, 825, 827, 831, 834, 835, 838, 839, 843, 844, 849, 853, 858, 860, 867, 869, 871, 872, 876, 877, 878, 879, 880, 883, 888, 892, 894, 897, 900, 913, 917, 918, 919, 921, 926, 927, 938, 941, 942, 945, 949, 950, 958, 963, 965, 966, 968, 970, 981, 983, 985, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1008, 1020, 1039, 1057, 1059, 1060, 1062, 1064, 1065, 1072, 1074, 1081, 1082, 1085, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1109, 1110, 1114, 1118, 1121, 1123, 1125, 1134, 1141, 1147, 1154, 1166, 1168, 1171, 1172, 1175, 1177, 1178, 1179, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1202, 1203, 1207, 1212, 1214, 1217, 1218, 1219, 1220, 1221, 1223, 1229, 1230, 1231, 1233, 1240, 1241, 1242, 1245, 1246, 1248, 1254, 1256, 1257, 1259, 1261, 1276, 1281, 1282, 1286, 1289, 1300, 1309, 1310, 1312, 1318, 1323, 1328], "boolean": [50, 163, 179, 200, 202, 264, 281, 318, 330, 331, 332, 346, 347, 350, 371, 374, 376, 387, 422, 467, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 504, 505, 509, 588, 590, 593, 594, 644, 664, 707, 714, 715, 724, 725, 781, 789, 799, 815, 835, 871, 876, 913, 919, 926, 927, 939, 941, 942, 945, 965, 1020, 1072, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1109, 1110, 1114, 1168, 1171, 1172, 1202, 1218, 1291, 1300, 1320], "border": 20, "both": [10, 25, 36, 45, 49, 87, 88, 135, 152, 183, 209, 223, 224, 225, 235, 250, 251, 277, 287, 318, 333, 392, 403, 441, 461, 487, 598, 611, 614, 616, 618, 620, 622, 625, 627, 629, 674, 740, 741, 743, 744, 786, 787, 795, 799, 810, 839, 843, 844, 845, 854, 862, 880, 913, 919, 990, 1043, 1089, 1244, 1282, 1300, 1328, 1329], "boto3": 32, "bottom": [179, 318, 387, 799, 815, 913], "bottom_k": [281, 318, 387, 706, 707, 799, 876, 913, 1285, 1300], "bottom_k_bi": [386, 706, 707, 799], "bound": [102, 133, 134, 195, 209, 318, 354, 392, 487, 516, 518, 541, 547, 711, 721, 740, 741, 743, 744, 786, 787, 799, 839, 913, 949, 990, 1061, 1089, 1121, 1123, 1152, 1288, 1300, 1318], "boundari": [209, 318, 392, 482, 692, 799, 839, 913, 990, 1085, 1262, 1300], "box": [20, 228, 318], "box_draw": 20, "branch": [56, 57, 820, 821, 831, 858, 869, 913], "break": [31, 32, 33, 45, 46, 47, 48, 56, 57, 66, 68, 130, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 225, 265, 275, 280, 286, 287, 318, 321, 322, 402, 403, 436, 482, 550, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 728, 775, 776, 799, 820, 821, 831, 845, 872, 880, 913, 985, 1001, 1002, 1038, 1085, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1279, 1284, 1300, 1305], "breakpoint": [403, 482, 598, 799, 1002, 1085, 1175, 1300], "breezah": 147, "breviti": 172, "broadcast": [672, 728, 919, 1242], "broader": 919, "brotli": [44, 48, 318, 913], "brussel": [435, 1037], "bst": [415, 419, 435, 1013, 1017, 1037], "bucket": [38, 137, 148, 149, 152, 318, 436, 449, 482, 799, 1038, 1051, 1085, 1300], "bud": [670, 671, 1240, 1241], "budget": 1309, "buffer": [133, 134, 135, 195, 221, 318, 1061, 1300], "buffer_s": [221, 318], "bug": [549, 550, 799, 849, 896, 913, 1154, 1300], "build": [55, 121, 919, 1331], "built": 91, "builtin": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 318, 405, 799, 826, 913], "busi": [410, 726, 1008], "business_day_count": [410, 1008], "by_alternate_row": 1, "by_dtyp": 919, "by_first_letter_of_column_nam": 51, "by_first_letter_of_column_valu": 51, "by_index": 919, "by_left": [224, 318, 844, 913], "by_nam": 919, "by_pred": [251, 318], "by_right": [224, 318, 844, 913], "bye": 1, "byi": 1323, "bys": [209, 318, 839, 913], "byte": [34, 36, 39, 40, 41, 44, 45, 48, 131, 132, 133, 134, 138, 139, 140, 141, 142, 143, 144, 146, 147, 150, 151, 188, 195, 258, 318, 405, 564, 660, 661, 662, 666, 667, 674, 685, 799, 826, 866, 913, 1061, 1230, 1231, 1232, 1236, 1237, 1244, 1255, 1300, 1323], "bytesio": [39, 40, 41, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 258, 318, 405, 564, 799, 826, 866, 913], "c": [1, 10, 34, 36, 38, 40, 41, 44, 51, 53, 58, 95, 121, 123, 125, 127, 138, 147, 176, 177, 179, 180, 181, 182, 183, 184, 186, 189, 190, 191, 192, 193, 194, 196, 200, 202, 205, 206, 207, 208, 209, 211, 213, 214, 222, 223, 226, 227, 229, 231, 233, 236, 238, 239, 240, 241, 243, 244, 245, 247, 248, 249, 251, 254, 255, 256, 263, 264, 265, 266, 267, 269, 270, 273, 274, 275, 276, 277, 278, 281, 285, 286, 287, 289, 290, 292, 297, 300, 301, 302, 305, 306, 308, 311, 312, 318, 322, 327, 329, 330, 332, 350, 370, 387, 403, 441, 479, 487, 508, 520, 550, 557, 574, 575, 589, 591, 595, 598, 636, 676, 684, 707, 710, 717, 719, 720, 722, 723, 724, 727, 728, 730, 731, 732, 733, 735, 736, 738, 748, 749, 750, 753, 754, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 778, 780, 782, 783, 784, 788, 795, 799, 815, 817, 818, 819, 820, 821, 822, 823, 824, 827, 828, 829, 830, 831, 832, 835, 838, 839, 843, 847, 856, 858, 860, 861, 863, 864, 869, 870, 871, 872, 876, 879, 880, 883, 885, 889, 892, 893, 894, 897, 898, 900, 903, 904, 913, 917, 919, 984, 1002, 1089, 1113, 1175, 1246, 1254, 1268, 1287, 1300, 1310, 1312, 1313, 1315, 1316, 1317, 1318, 1323, 1328], "c00": 919, "c01": 919, "c02": 919, "c03": 919, "c05": 919, "c1": 367, "c123": 1323, "c2": 367, "c20": 919, "c25": 919, "c3": 367, "c40": 919, "c45": 1323, "c4d79b": [39, 318], "c50": 919, "c567": [39, 318], "c60": 919, "c75": 919, "c80": 919, "c8ae6d2b276": [39, 318], "c93": 919, "c95": 919, "c96": 919, "c97": 919, "c98": 919, "c99": 919, "c_btm_by_a": [387, 799], "c_btm_by_b": [387, 799], "c_by_ca": [387, 707, 799], "c_by_cb": [387, 707, 799], "c_c_c": [778, 872, 913], "c_contigu": [276, 318], "c_max": [591, 799], "c_mean_squar": [297, 889], "c_min": [591, 799], "c_top_by_a": [707, 799], "c_top_by_b": [707, 799], "c_total": 1328, "cach": [49, 56, 57, 87, 88, 115, 139, 147, 150, 152, 156, 157, 158, 159, 171, 605, 606, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 684, 686, 687, 691, 799, 810, 820, 821, 831, 858, 869, 913, 983, 1181, 1182, 1254, 1256, 1257, 1261, 1300], "cadi": [243, 318], "cafe": [689, 1259], "caf\u00e9": [666, 667, 919, 1236, 1237], "calamin": 138, "calcul": [39, 44, 48, 50, 187, 209, 266, 289, 318, 406, 457, 458, 459, 460, 499, 511, 530, 537, 543, 547, 623, 641, 646, 711, 713, 731, 733, 775, 776, 780, 788, 799, 825, 839, 873, 881, 913, 1003, 1004, 1062, 1063, 1064, 1065, 1104, 1116, 1135, 1193, 1212, 1216, 1290, 1300], "calendar": [64, 65, 209, 224, 250, 288, 318, 413, 423, 425, 432, 436, 449, 453, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 1011, 1021, 1026, 1034, 1038, 1051, 1055, 1063, 1300], "calendar_year": [423, 453], "call": [39, 49, 56, 57, 125, 134, 135, 138, 143, 145, 147, 150, 151, 152, 156, 157, 158, 159, 163, 167, 172, 179, 208, 209, 226, 228, 250, 265, 276, 281, 317, 318, 386, 387, 398, 401, 410, 549, 550, 574, 575, 577, 579, 581, 582, 605, 606, 637, 706, 707, 726, 732, 795, 799, 815, 820, 821, 831, 838, 839, 858, 862, 869, 872, 876, 910, 911, 912, 913, 917, 919, 980, 1008, 1154, 1182, 1208, 1281, 1285, 1300, 1310, 1314, 1328], "callabl": [51, 52, 53, 54, 147, 202, 228, 242, 247, 304, 318, 367, 541, 549, 550, 575, 576, 595, 612, 735, 736, 749, 760, 761, 773, 799, 849, 857, 860, 896, 913, 962, 1146, 1154, 1187, 1300], "caller": [136, 235, 318, 541, 849, 854, 896, 913], "cam": [247, 318, 860, 913], "can": [1, 14, 27, 39, 44, 49, 50, 56, 57, 64, 65, 67, 79, 87, 88, 123, 133, 134, 135, 138, 139, 143, 144, 145, 147, 150, 151, 152, 153, 161, 162, 163, 167, 169, 172, 174, 179, 181, 191, 192, 193, 202, 204, 208, 209, 216, 218, 220, 224, 228, 239, 243, 250, 252, 253, 256, 258, 259, 264, 275, 276, 280, 281, 282, 286, 292, 295, 304, 318, 330, 367, 387, 398, 401, 402, 405, 410, 429, 430, 432, 435, 438, 441, 449, 458, 464, 467, 487, 513, 541, 549, 550, 557, 561, 564, 565, 571, 574, 575, 577, 579, 581, 582, 591, 596, 598, 603, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 636, 641, 644, 649, 658, 665, 670, 671, 672, 679, 680, 681, 684, 695, 707, 724, 726, 739, 742, 749, 751, 755, 756, 761, 778, 789, 795, 798, 799, 810, 815, 816, 820, 821, 826, 828, 829, 831, 839, 844, 862, 864, 866, 867, 869, 871, 872, 876, 883, 886, 887, 913, 919, 921, 962, 1001, 1008, 1031, 1032, 1034, 1037, 1038, 1040, 1043, 1051, 1063, 1069, 1089, 1118, 1146, 1154, 1159, 1173, 1175, 1179, 1182, 1200, 1202, 1203, 1206, 1212, 1219, 1220, 1228, 1235, 1240, 1241, 1242, 1249, 1250, 1251, 1254, 1279, 1281, 1300, 1315, 1328], "cancel": [820, 913], "candid": [656, 658, 1226, 1228], "cannot": [1, 44, 48, 97, 100, 133, 134, 138, 139, 141, 144, 145, 152, 169, 228, 253, 254, 276, 295, 304, 318, 372, 441, 461, 529, 550, 565, 632, 651, 676, 697, 761, 799, 869, 887, 888, 896, 913, 919, 966, 1043, 1134, 1154, 1199, 1221, 1246, 1281, 1300], "capabl": [1, 39, 318], "capac": [195, 262, 318, 1061, 1207, 1300], "capit": [692, 1262, 1323], "captur": [656, 658, 670, 671, 1226, 1228, 1240, 1241], "car": [247, 271, 318, 608, 799, 860, 913], "cardin": [178, 318, 334, 720, 799, 814, 913, 929, 1300], "care": [39, 259, 318, 550, 591, 634, 799, 867, 913, 1203, 1300], "cars_revers": [608, 799], "cartesian": [223, 318, 843, 913], "case": [39, 49, 50, 57, 95, 120, 122, 123, 124, 126, 135, 142, 143, 151, 152, 169, 197, 209, 221, 228, 243, 250, 252, 253, 272, 275, 276, 318, 411, 458, 549, 561, 562, 575, 611, 648, 649, 657, 659, 660, 661, 670, 671, 672, 692, 799, 821, 839, 862, 913, 917, 919, 1009, 1063, 1068, 1218, 1219, 1227, 1229, 1230, 1231, 1240, 1241, 1242, 1262, 1279, 1300], "cast": [1, 38, 52, 53, 120, 122, 123, 126, 156, 157, 158, 159, 202, 209, 242, 250, 275, 276, 280, 292, 318, 333, 400, 401, 412, 438, 441, 452, 590, 595, 596, 603, 605, 611, 664, 665, 694, 701, 705, 729, 730, 779, 799, 839, 857, 862, 883, 913, 917, 919, 985, 999, 1000, 1010, 1040, 1043, 1054, 1173, 1179, 1234, 1235, 1264, 1271, 1277, 1281, 1283, 1284, 1300, 1321], "cast_str_to_int": [242, 318, 857, 913], "cast_to_supertyp": [799, 917], "cat": [26, 49, 87, 88, 403, 598, 648, 650, 690, 693, 705, 730, 794, 799, 919, 1002, 1085, 1175, 1218, 1220, 1260, 1263, 1296, 1300], "categor": [38, 49, 68, 87, 88, 90, 156, 157, 158, 159, 223, 273, 318, 389, 403, 598, 605, 606, 705, 799, 919, 982, 983, 984, 985, 1002, 1175, 1181, 1182, 1283, 1300], "categori": [39, 49, 68, 88, 273, 318, 389, 403, 482, 598, 799, 982, 1002, 1085, 1175, 1276, 1300], "categorical_as_str": [156, 157, 158, 159], "categoricalord": 62, "categoricaltyp": [270, 318], "caus": [103, 112, 121, 133, 134, 135, 147, 176, 197, 276, 318, 549, 799, 1068, 1281, 1300], "cba": 681, "cbrt": [799, 1300, 1321], "cbrt_a": 1322, "cc": [461, 747, 799, 919, 1003, 1300, 1323], "ccc": [1, 39, 318, 695, 697, 698, 919, 1323], "ccy": 1331, "cd": [671, 695, 697, 698, 919], "cd34": 671, "cdatainterfac": [175, 922], "cde": [919, 1323], "cdt": [436, 449, 1038, 1051], "ceil": [52, 799, 1300, 1321], "ceil_a": 1322, "cell": [15, 16, 39, 243, 318], "cent": [413, 1240], "center": [15, 16, 39, 318, 457, 459, 460, 612, 613, 615, 617, 619, 621, 624, 626, 628, 799, 1062, 1064, 1065, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1300], "central": [148, 149, 499, 641, 799, 1104, 1212, 1300], "centuri": 1324, "certain": [45, 46, 47, 48, 57, 214, 288, 318, 680, 681, 795, 820, 821, 858, 913, 1300], "certainli": [684, 686, 687, 1254, 1256, 1257], "cest": [435, 1037], "cet": [435, 1037], "cfg": [2, 4, 17, 172], "cfoo": [885, 913], "chain": [574, 575, 577, 579, 581, 582, 789], "chanc": [160, 163, 167, 1331], "chang": [30, 31, 32, 33, 44, 45, 46, 47, 48, 50, 56, 57, 66, 68, 130, 133, 134, 135, 138, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 225, 265, 275, 280, 286, 287, 294, 318, 321, 322, 402, 403, 406, 436, 441, 482, 550, 591, 592, 598, 605, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 728, 775, 776, 799, 820, 821, 831, 845, 872, 880, 886, 913, 917, 919, 984, 985, 1001, 1002, 1038, 1043, 1085, 1170, 1175, 1181, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1207, 1279, 1284, 1300, 1305], "changes_length": [799, 917], "char": [27, 657, 1227], "char_length": 1323, "charact": [7, 9, 12, 20, 26, 27, 28, 36, 37, 45, 89, 132, 133, 134, 136, 147, 318, 432, 654, 655, 657, 662, 666, 667, 668, 669, 670, 671, 674, 675, 676, 679, 680, 681, 682, 683, 685, 692, 694, 858, 913, 919, 1034, 1224, 1225, 1227, 1232, 1236, 1237, 1238, 1239, 1240, 1241, 1244, 1245, 1246, 1249, 1250, 1251, 1255, 1262, 1264, 1323], "character_length": 1323, "characterist": [163, 167], "charli": [133, 1329], "chart": [39, 318, 321, 858, 913, 1300, 1305], "cheap": [181, 182, 257, 293, 318, 818, 819, 865, 884, 913, 989, 991, 1300], "cheaper": [516, 1121], "check": [38, 65, 97, 133, 134, 147, 156, 157, 158, 159, 171, 194, 219, 223, 318, 350, 371, 374, 376, 479, 487, 491, 509, 648, 653, 660, 678, 799, 843, 849, 913, 945, 965, 968, 970, 1060, 1081, 1082, 1091, 1094, 1101, 1103, 1114, 1218, 1223, 1230, 1248, 1300], "check_column_ord": [156, 157], "check_dtyp": [156, 157, 158, 159, 918, 1060, 1300], "check_exact": [156, 157, 158, 159], "check_nam": [158, 159, 1060, 1300], "check_ord": [158, 159], "check_row_ord": [156, 157], "choos": [44, 46, 48, 209, 243, 318, 441, 839, 913, 1043], "chrono": [36, 45, 91, 318, 438, 441, 684, 686, 687, 691, 913, 1040, 1043, 1254, 1256, 1257, 1261, 1323, 1324], "chunk": [14, 48, 129, 133, 134, 137, 143, 145, 147, 148, 150, 151, 152, 163, 167, 197, 222, 238, 276, 318, 333, 602, 799, 913, 928, 988, 1068, 1079, 1160, 1178, 1275, 1281, 1300], "chunk_length": 1300, "chunkedarrai": [120, 238, 318], "citi": [670, 671], "clang": 155, "clariti": [251, 318], "class": [1, 17, 31, 32, 33, 49, 51, 52, 53, 54, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 106, 108, 160, 161, 253, 318, 786, 795, 799, 805, 811, 823, 830, 863, 882, 888, 913, 918, 1280, 1300, 1304, 1312, 1328], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 188, 318, 405, 473, 799, 826, 913, 1310, 1328], "claus": [811, 1318, 1327], "clean": [684, 686, 687, 1254, 1256, 1257], "cleaner": 172, "cleanli": [10, 207, 318, 1328], "clear": [49, 87, 182, 318, 819, 913, 991, 1300], "clearer": 123, "clickhous": 136, "client": [32, 135], "clip": [799, 1300], "clipboard": [35, 132, 318, 811], "clone": [122, 123, 124, 125, 126, 181, 276, 318, 818, 913, 989, 1300], "close": [39, 135, 209, 250, 265, 318, 403, 487, 546, 598, 611, 614, 616, 618, 620, 622, 625, 627, 629, 641, 740, 741, 743, 744, 786, 787, 799, 839, 862, 872, 913, 1002, 1089, 1175, 1212, 1300], "closedinterv": [209, 250, 318, 487, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 862, 913, 1089, 1300], "closest": [120, 224, 318, 844, 913, 1317, 1322], "closur": [614, 616, 625, 627, 629, 799], "cloud": [33, 38, 135, 137, 143, 145, 147, 148, 149, 150, 151, 152, 153, 318, 811], "cloudi": [670, 671], "cloudpickl": 155, "cluster": 152, "cluster_with_column": [56, 57, 820, 821, 831, 858, 869, 913], "co": [657, 799, 1227, 1300, 1321], "coalesc": [223, 224, 287, 318, 485, 659, 661, 684, 799, 843, 844, 880, 913, 1231, 1254, 1316, 1321], "code": [183, 318, 371, 372, 373, 374, 376, 405, 550, 634, 799, 826, 847, 913, 1203, 1300, 1310], "coeffici": [185, 318, 641, 799, 1212, 1300], "coerc": [58, 604, 799], "coercion": [45, 46, 47, 48, 56, 57, 604, 799, 820, 821, 831, 858, 869, 913], "col": [1, 12, 36, 39, 45, 50, 51, 52, 53, 124, 126, 147, 161, 163, 200, 208, 209, 217, 219, 223, 224, 225, 228, 239, 242, 243, 250, 251, 256, 264, 275, 280, 284, 286, 292, 297, 318, 322, 326, 327, 328, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 371, 372, 373, 374, 375, 376, 386, 388, 389, 390, 391, 392, 393, 394, 395, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 474, 475, 476, 477, 478, 481, 482, 484, 485, 486, 487, 488, 490, 491, 493, 494, 495, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 572, 573, 574, 576, 578, 580, 583, 584, 585, 586, 587, 588, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 708, 709, 710, 711, 712, 713, 714, 715, 716, 718, 720, 724, 725, 727, 728, 729, 730, 732, 734, 737, 739, 740, 742, 743, 745, 749, 750, 751, 752, 753, 754, 762, 764, 766, 767, 769, 772, 773, 778, 780, 782, 784, 785, 788, 789, 799, 835, 838, 839, 841, 843, 844, 845, 857, 862, 864, 871, 872, 878, 883, 885, 889, 913, 919, 1034, 1037, 1118, 1200, 1202, 1231, 1235, 1254, 1300, 1331], "col0": [163, 1331], "col1": [163, 243, 318, 913, 1331], "col2": [163, 243, 318, 913, 1331], "col3": [243, 318, 1331], "col4": 1331, "col_nam": [242, 318, 550, 789, 799, 857, 913], "cole": 130, "coli": [39, 318, 581, 582, 919, 1331], "collaps": [45, 46, 47, 48, 56, 57, 820, 821, 831, 858, 869, 913], "collapse_join": [45, 46, 47, 48, 56, 57, 820, 821, 831, 858, 869, 913], "collect": [53, 56, 57, 147, 148, 149, 153, 163, 164, 167, 191, 192, 226, 243, 265, 270, 283, 284, 318, 461, 491, 550, 729, 747, 751, 778, 781, 799, 814, 815, 817, 818, 821, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 859, 860, 861, 862, 864, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 910, 912, 913, 919, 1094, 1300, 1310, 1311, 1312, 1315, 1316, 1328, 1329, 1331], "collect_al": [53, 57, 820, 821, 913], "collect_all_async": [821, 913], "collect_async": [57, 913], "collect_schema": [53, 226, 318, 823, 830, 857, 863, 882, 913], "collis": 58, "colnam": [39, 147, 318], "color": [49, 87, 88, 304, 318, 321, 371, 372, 373, 374, 376, 651, 712, 799, 896, 965, 966, 967, 968, 970, 1221, 1289, 1300, 1323], "column": [10, 16, 17, 18, 21, 22, 24, 38, 39, 44, 48, 49, 50, 51, 58, 65, 79, 88, 92, 96, 120, 122, 123, 124, 125, 126, 127, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 163, 177, 179, 180, 183, 185, 186, 189, 190, 191, 192, 193, 196, 200, 201, 204, 205, 207, 208, 209, 213, 214, 219, 220, 221, 223, 224, 225, 228, 229, 230, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 250, 251, 252, 253, 255, 256, 257, 259, 264, 266, 267, 268, 271, 273, 275, 276, 277, 278, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 293, 294, 295, 297, 303, 318, 321, 322, 329, 330, 332, 343, 352, 361, 363, 366, 387, 392, 396, 397, 403, 413, 414, 416, 417, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 434, 437, 438, 439, 441, 450, 451, 453, 461, 463, 467, 469, 482, 486, 487, 502, 508, 514, 516, 536, 540, 541, 550, 556, 557, 559, 561, 563, 574, 576, 577, 578, 579, 580, 581, 582, 591, 598, 602, 604, 605, 606, 607, 609, 610, 611, 614, 616, 618, 620, 622, 625, 627, 629, 636, 637, 643, 644, 647, 655, 660, 662, 663, 672, 676, 677, 684, 685, 686, 687, 688, 689, 691, 696, 699, 707, 712, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 747, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 799, 815, 817, 824, 827, 828, 829, 830, 832, 835, 838, 839, 843, 844, 845, 849, 850, 851, 852, 853, 855, 856, 859, 860, 862, 863, 864, 865, 867, 871, 873, 874, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 889, 895, 896, 913, 918, 919, 926, 927, 947, 956, 958, 961, 983, 984, 990, 995, 996, 1002, 1011, 1014, 1015, 1016, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1036, 1039, 1040, 1041, 1043, 1052, 1053, 1055, 1067, 1085, 1088, 1113, 1119, 1121, 1141, 1145, 1175, 1182, 1183, 1186, 1206, 1217, 1225, 1230, 1233, 1246, 1247, 1254, 1256, 1257, 1258, 1259, 1261, 1267, 1270, 1276, 1277, 1289, 1300, 1316, 1318, 1320, 1322, 1323, 1325, 1326, 1329, 1330, 1331], "column_0": [1, 228, 282, 318], "column_1": [228, 282, 318, 1325], "column_2": [282, 318, 1325], "column_abc": 15, "column_format": [39, 318], "column_nam": [247, 282, 318, 860, 913], "column_tot": [39, 318], "column_width": [39, 318], "column_x": [133, 134, 138, 144, 147], "column_xyz": 15, "columnar": [124, 126, 221, 252, 318], "columnformatdict": [39, 318], "columnnameorselector": [180, 189, 191, 192, 234, 241, 243, 253, 273, 283, 284, 285, 286, 318, 817, 827, 828, 829, 853, 877, 878, 879, 913], "columnnotfounderror": [204, 205, 318], "columntotalsdefinit": [39, 318], "columnwidthsdefinit": [39, 318], "colx": [39, 318, 581, 582, 919, 1315, 1331], "colz": [919, 1331], "com": [32, 39, 136, 318, 457, 459, 460, 656, 657, 658, 799, 1062, 1064, 1065, 1226, 1227, 1228, 1300], "combin": [44, 48, 56, 57, 58, 200, 209, 210, 224, 243, 250, 288, 318, 331, 344, 449, 458, 471, 565, 590, 606, 611, 679, 680, 681, 740, 741, 743, 744, 786, 787, 789, 799, 820, 821, 831, 839, 844, 858, 862, 869, 913, 1038, 1051, 1063, 1182, 1249, 1250, 1251, 1300, 1316, 1329], "come": [115, 136, 209, 283, 285, 318, 410, 429, 430, 499, 541, 726, 799, 839, 877, 879, 913, 1008, 1031, 1032, 1104, 1300], "comm_subexpr_elim": [56, 57, 820, 821, 831, 858, 869, 913], "comm_subplan_elim": [56, 57, 820, 821, 831, 858, 869, 913], "comma": [35, 36, 133, 134, 147, 318], "comment": [133, 134, 147], "comment_prefix": [133, 134, 147], "common": [50, 56, 57, 58, 95, 133, 134, 147, 287, 318, 575, 805, 820, 821, 831, 858, 869, 880, 913, 1304], "compact": 1326, "compani": 136, "compar": [152, 156, 157, 158, 159, 194, 200, 318, 455, 456, 476, 478, 487, 501, 548, 585, 586, 799, 835, 913, 984, 1059, 1060, 1166, 1300], "comparison": [153, 200, 318, 835, 913], "compat": [20, 39, 40, 41, 44, 48, 90, 270, 318, 648, 650, 656, 657, 658, 660, 670, 671, 913, 919, 1043, 1218, 1220, 1226, 1227, 1228, 1230, 1240, 1241, 1275, 1300, 1310, 1323, 1324, 1328], "compat_level": [40, 41, 270, 318, 1275, 1300], "compatibleframetyp": [1311, 1313, 1328], "compatlevel": [40, 41, 270, 318, 1275, 1300], "competit": [601, 799, 1177, 1300], "compil": [55, 348, 349, 506, 507, 943, 944, 1111, 1112], "complement": 919, "complet": [133, 135, 147, 1329], "complex": [164, 386, 387, 402, 706, 707, 799, 980, 1001, 1285, 1300], "compliant": [39, 318, 441, 1043], "compon": [414, 437, 441, 684, 687, 745, 1012, 1039, 1043, 1254, 1257], "compos": 1329, "composit": [79, 1331], "compound": [127, 253, 318, 919], "comprehens": 161, "compress": [34, 40, 41, 44, 46, 48, 318, 609, 799, 913, 1185, 1300], "compression_level": [44, 48, 318, 913], "comput": [56, 58, 93, 195, 208, 224, 243, 277, 283, 297, 310, 318, 326, 335, 336, 337, 338, 339, 340, 357, 358, 359, 364, 365, 369, 390, 393, 394, 395, 398, 399, 400, 401, 407, 454, 457, 458, 459, 460, 462, 499, 523, 524, 525, 526, 530, 531, 532, 533, 537, 543, 544, 545, 546, 571, 591, 592, 597, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 638, 639, 640, 641, 645, 703, 704, 712, 717, 719, 722, 723, 724, 731, 733, 746, 765, 775, 776, 789, 799, 820, 838, 841, 843, 844, 877, 885, 889, 902, 913, 924, 930, 931, 932, 933, 934, 935, 952, 953, 954, 959, 960, 964, 986, 992, 993, 994, 997, 998, 999, 1000, 1005, 1057, 1061, 1062, 1063, 1064, 1065, 1066, 1104, 1128, 1129, 1130, 1131, 1135, 1136, 1137, 1138, 1142, 1148, 1149, 1150, 1151, 1159, 1170, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1209, 1210, 1211, 1212, 1215, 1273, 1274, 1282, 1289, 1300, 1322, 1325], "computeerror": [561, 689, 1259], "concat": [49, 87, 88, 96, 134, 224, 318, 844, 885, 913, 988, 1079, 1160, 1178, 1300, 1321], "concat_list": [513, 746], "concat_w": [265, 318, 778, 872, 913, 1321, 1328], "concaten": [49, 58, 87, 88, 202, 242, 318, 595, 647, 663, 728, 729, 730, 799, 857, 913, 988, 1160, 1217, 1233, 1300, 1323], "concatmethod": 58, "conclus": [124, 126, 318, 913], "concret": [163, 167], "condit": [39, 192, 200, 225, 251, 318, 467, 487, 653, 678, 725, 749, 789, 799, 835, 845, 913, 1089, 1300, 1316, 1321, 1327], "conditional_format": [39, 318], "conditionalformatdict": [39, 318], "config": [0, 50, 187, 256, 275, 292, 318, 649, 659, 661, 672, 740, 741, 743, 744, 745, 811, 820, 825, 864, 883, 913, 1219, 1231, 1242], "configur": [5, 32, 38, 137, 148, 149, 172, 318, 812, 820, 888, 913], "conflat": [487, 799], "conform": 1331, "confus": [95, 330, 494, 495, 672, 799], "conjunct": [39, 87, 135, 138, 144, 161, 318, 755, 758, 913], "conn": 135, "connect": [37, 133, 135, 136, 139, 141, 143, 145, 147, 150, 151, 152, 153, 318, 812], "connectionorcursor": [37, 135, 318], "connector": 136, "connectorx": [135, 136, 155], "consecut": [199, 318, 370, 466, 472, 647, 663, 670, 799, 834, 913, 1071, 1217, 1233, 1241, 1300], "consid": [31, 32, 33, 44, 45, 46, 47, 48, 56, 57, 66, 68, 87, 88, 130, 133, 134, 135, 143, 145, 147, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 179, 191, 192, 194, 220, 225, 228, 234, 252, 265, 275, 280, 281, 283, 285, 286, 287, 318, 321, 322, 387, 392, 402, 403, 436, 471, 482, 549, 550, 557, 573, 574, 577, 579, 581, 582, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 707, 728, 735, 749, 775, 776, 795, 799, 815, 820, 821, 828, 829, 831, 845, 853, 872, 876, 877, 879, 880, 896, 913, 919, 983, 985, 990, 1001, 1002, 1038, 1060, 1085, 1154, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1200, 1202, 1279, 1284, 1300, 1305, 1310], "consider": 130, "consist": [208, 241, 276, 318, 684, 740, 741, 838, 913, 919, 928, 1068, 1254, 1281, 1300], "consola": [39, 318], "const": 10, "constant": [195, 250, 318, 411, 458, 464, 799, 862, 913, 1009, 1061, 1063, 1069, 1300], "constrain": [50, 147, 191, 192, 318, 828, 829, 913, 919], "constraint": [200, 318, 467, 574, 575, 577, 579, 581, 582, 789, 799, 835, 913, 919], "construct": [49, 87, 88, 95, 120, 122, 123, 124, 125, 126, 127, 130, 135, 318, 473, 771, 774, 790, 795, 799, 826, 913, 983, 1300, 1315], "construct_categor": 49, "constructor": [130, 138, 167], "contain": [5, 36, 37, 38, 39, 45, 50, 55, 91, 122, 125, 127, 135, 136, 137, 145, 148, 149, 152, 162, 163, 165, 167, 179, 184, 191, 192, 193, 209, 217, 222, 239, 275, 276, 280, 281, 287, 299, 318, 330, 332, 355, 374, 376, 405, 479, 491, 520, 550, 647, 649, 653, 656, 658, 660, 663, 665, 677, 678, 694, 716, 717, 718, 719, 730, 761, 799, 815, 823, 826, 828, 829, 830, 839, 858, 876, 880, 891, 913, 917, 919, 926, 927, 950, 1081, 1082, 1125, 1160, 1217, 1219, 1223, 1226, 1228, 1230, 1233, 1235, 1247, 1248, 1264, 1275, 1281, 1300, 1318], "contains_with_expr": 371, "contains_with_lit": 371, "content": [13, 637, 799, 1208, 1300], "context": [49, 87, 88, 169, 239, 265, 318, 328, 467, 513, 549, 550, 561, 643, 644, 712, 732, 748, 751, 757, 758, 761, 770, 774, 777, 798, 799, 810, 811, 872, 885, 913, 1118, 1289, 1300, 1315, 1328, 1330], "contigu": [58, 120, 125, 133, 134, 137, 139, 141, 143, 145, 147, 148, 150, 151, 152, 246, 276, 318], "continu": [133, 403, 598, 641, 799, 1002, 1175, 1212, 1300, 1317], "contrast": 745, "control": [10, 11, 39, 57, 58, 138, 161, 163, 264, 265, 275, 318, 606, 644, 778, 799, 820, 821, 831, 871, 872, 888, 910, 913, 1182, 1279, 1300, 1312, 1315, 1328], "conveni": [197, 280, 318, 905, 928, 1068, 1300, 1310], "convers": [121, 138, 176, 221, 222, 252, 253, 272, 276, 277, 318, 415, 684, 686, 687, 691, 811, 1013, 1254, 1256, 1257, 1261, 1281, 1282, 1300, 1326, 1328], "convert": [38, 91, 121, 125, 137, 138, 144, 148, 176, 253, 271, 272, 273, 274, 275, 276, 277, 279, 280, 318, 366, 367, 404, 415, 438, 441, 540, 541, 549, 575, 600, 658, 684, 686, 687, 688, 689, 691, 696, 799, 913, 917, 961, 962, 984, 1013, 1040, 1043, 1145, 1146, 1228, 1254, 1256, 1257, 1258, 1259, 1261, 1267, 1270, 1278, 1279, 1280, 1281, 1282, 1284, 1300, 1323, 1325, 1326, 1328], "convert_time_zon": [435, 1037], "coo": [247, 318, 860, 913], "coord": 699, "coordin": [39, 318], "copi": [35, 120, 121, 132, 174, 176, 181, 182, 222, 270, 276, 277, 292, 318, 464, 799, 818, 819, 883, 913, 921, 989, 991, 1069, 1275, 1280, 1281, 1282, 1300, 1328], "corasick": [649, 659, 661, 672, 1219, 1229, 1231, 1242], "core": [1, 225, 318, 845, 913, 1328, 1331], "cores_right": [225, 318, 845, 913], "corner": [20, 39, 127, 318], "corr": 318, "corrcoef": [185, 318], "correct": [138, 144, 459, 460, 499, 541, 623, 641, 799, 849, 913, 917, 1064, 1065, 1104, 1193, 1212, 1300], "correctli": [39, 318, 549, 799], "correl": [185, 318, 731, 775], "correlationmethod": 731, "correspond": [209, 224, 250, 276, 288, 318, 387, 423, 432, 436, 449, 550, 601, 611, 614, 616, 618, 620, 622, 625, 627, 629, 707, 740, 741, 743, 744, 786, 787, 799, 820, 839, 844, 862, 913, 1021, 1034, 1038, 1051, 1177, 1300, 1317], "cosd": 1321, "cosh": [799, 1300], "cosin": [335, 336, 393, 394, 549, 799, 930, 931, 992, 993, 1300, 1325], "cost": [225, 253, 318, 670, 845, 913, 1241], "cost_usd": [670, 1241], "cot": [799, 1300, 1321], "cotang": [395, 799, 994, 1300, 1325], "cotd": 1321, "could": [38, 85, 93, 180, 318, 638, 735, 745, 749, 799, 817, 825, 913, 1209, 1300], "count": [39, 153, 178, 187, 209, 239, 240, 250, 282, 288, 294, 309, 318, 334, 351, 360, 397, 410, 458, 482, 502, 510, 522, 527, 550, 573, 589, 611, 614, 616, 618, 620, 622, 625, 627, 629, 650, 710, 712, 720, 726, 734, 758, 769, 799, 814, 825, 839, 856, 862, 886, 901, 913, 919, 929, 946, 955, 996, 1003, 1008, 1063, 1085, 1107, 1115, 1127, 1132, 1161, 1169, 1220, 1287, 1289, 1300, 1305, 1309, 1321], "count_digit": 650, "count_num": [39, 318], "counterpart": 130, "countri": [224, 318, 411, 844, 913, 1009], "country_holidai": [410, 726, 1008], "covari": [733, 776, 799, 917], "cover": 10, "cow": [668, 669, 1238, 1239], "cpu": [133, 134, 155, 275, 318, 820, 888, 913, 1279, 1300], "crab": [648, 660, 1218, 1230], "crate": [36, 45, 91, 318, 648, 650, 656, 657, 658, 660, 670, 671, 684, 686, 687, 691, 913, 919, 1218, 1220, 1226, 1227, 1228, 1230, 1240, 1241, 1254, 1256, 1257, 1261], "creat": [37, 39, 49, 88, 120, 124, 126, 133, 134, 135, 136, 139, 141, 145, 148, 149, 161, 162, 163, 164, 165, 166, 167, 168, 181, 182, 209, 240, 243, 250, 275, 276, 288, 292, 295, 318, 321, 322, 414, 436, 449, 458, 541, 549, 602, 611, 614, 616, 618, 620, 622, 625, 627, 629, 729, 739, 740, 741, 742, 743, 744, 745, 785, 786, 787, 795, 799, 818, 819, 825, 831, 839, 862, 883, 887, 913, 989, 991, 1002, 1012, 1038, 1051, 1063, 1167, 1175, 1178, 1279, 1281, 1300, 1305, 1327, 1328, 1331], "create_async_engin": 135, "create_engin": [37, 318], "creation": 134, "credenti": [31, 32, 33, 143, 145, 147, 150, 151, 152, 811], "credential_provid": [143, 145, 147, 150, 151, 152], "credentialproviderfunct": [143, 145, 147, 150, 151, 152], "cross": [223, 318, 843, 913, 1316], "crustacean": [660, 1230], "cst": [436, 449, 1038, 1051], "csv": [35, 36, 45, 46, 47, 48, 132, 133, 134, 138, 147, 318, 811, 913], "csvencod": [133, 134, 147], "csvquotestyl": [36, 45, 318, 913], "ctx": [1309, 1311, 1312, 1313, 1314, 1315, 1328], "cube": [1, 54, 390, 596, 799, 986, 1300, 1322], "cuda": 888, "cum_count": [799, 1300], "cum_count_revers": [397, 799], "cum_max": [799, 1300], "cum_max_all_fil": [398, 799], "cum_max_revers": [398, 799], "cum_min": [799, 1300], "cum_min_revers": [399, 799], "cum_prod": [327, 799, 1300], "cum_prod_revers": [400, 799], "cum_reduc": 735, "cum_sum": [484, 591, 700, 738, 799, 841, 913, 1103, 1300], "cum_sum_revers": [401, 799], "cumsum_horizont": 737, "cumul": [397, 398, 399, 400, 401, 734, 735, 736, 737, 738, 799, 996, 997, 998, 999, 1000, 1300], "cumulative_ev": [799, 1300], "cumulative_sal": [591, 799], "current": [2, 3, 5, 6, 30, 37, 127, 135, 136, 143, 145, 147, 150, 151, 152, 160, 161, 163, 164, 165, 166, 167, 168, 181, 182, 189, 223, 224, 247, 265, 275, 280, 318, 321, 322, 419, 541, 592, 799, 818, 819, 827, 843, 844, 860, 872, 888, 913, 919, 989, 991, 1009, 1017, 1170, 1279, 1284, 1300, 1305, 1312, 1328], "cursor": [37, 135, 318], "custom": [1, 27, 38, 39, 51, 52, 53, 54, 94, 166, 168, 187, 228, 243, 304, 318, 367, 410, 438, 441, 541, 549, 550, 612, 712, 726, 760, 761, 799, 825, 849, 896, 913, 962, 1008, 1040, 1043, 1146, 1154, 1187, 1289, 1300, 1331], "customis": [39, 318], "cut": [598, 799, 1175, 1300], "cxx": 1323, "cypher": 135, "d": [28, 34, 36, 38, 39, 40, 41, 44, 123, 153, 177, 200, 207, 209, 210, 211, 214, 223, 227, 269, 270, 280, 286, 290, 300, 302, 305, 306, 307, 308, 309, 310, 311, 318, 327, 329, 397, 420, 438, 441, 487, 556, 595, 636, 650, 657, 670, 671, 676, 684, 686, 687, 727, 728, 745, 751, 778, 799, 835, 839, 843, 872, 892, 894, 897, 898, 899, 900, 901, 902, 903, 913, 919, 984, 996, 1018, 1040, 1043, 1089, 1113, 1220, 1227, 1240, 1241, 1246, 1254, 1256, 1257, 1268, 1300, 1316, 1318, 1320, 1323, 1324], "d1": [39, 318, 414], "d2": 414, "d3": 414, "d789": [39, 318], "d_4": [676, 1246], "dai": [64, 65, 80, 209, 222, 224, 250, 288, 318, 321, 410, 429, 430, 432, 433, 436, 438, 441, 442, 449, 451, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 726, 739, 740, 741, 742, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 919, 1008, 1031, 1032, 1034, 1035, 1038, 1040, 1043, 1044, 1051, 1053, 1063, 1300, 1324], "dark": 1309, "data": [0, 1, 10, 18, 19, 21, 28, 34, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 49, 50, 51, 53, 56, 57, 58, 63, 64, 65, 67, 76, 77, 79, 80, 88, 91, 95, 97, 100, 114, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 174, 176, 182, 183, 193, 196, 197, 207, 208, 209, 221, 222, 223, 226, 228, 241, 242, 246, 251, 252, 253, 255, 259, 262, 270, 275, 276, 277, 280, 282, 292, 296, 316, 318, 322, 330, 331, 332, 335, 336, 337, 338, 339, 340, 343, 346, 347, 348, 349, 350, 352, 355, 357, 358, 359, 364, 365, 366, 368, 369, 371, 372, 373, 374, 375, 376, 388, 389, 392, 393, 394, 395, 396, 403, 404, 405, 410, 411, 412, 413, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 463, 474, 476, 477, 478, 482, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 501, 502, 506, 507, 509, 514, 520, 522, 529, 540, 542, 548, 550, 585, 586, 590, 591, 598, 600, 601, 604, 605, 606, 607, 609, 610, 630, 632, 634, 639, 640, 641, 647, 650, 651, 652, 655, 656, 657, 658, 662, 663, 664, 665, 666, 667, 674, 675, 676, 677, 684, 685, 686, 687, 689, 691, 694, 703, 704, 705, 708, 709, 712, 715, 721, 729, 732, 739, 740, 741, 742, 743, 744, 745, 755, 756, 758, 759, 760, 761, 771, 774, 785, 786, 787, 790, 795, 799, 811, 818, 819, 820, 821, 826, 830, 832, 838, 839, 863, 867, 883, 913, 918, 921, 926, 927, 939, 941, 942, 943, 944, 945, 947, 949, 950, 961, 963, 965, 966, 967, 969, 981, 982, 989, 990, 991, 1002, 1003, 1008, 1009, 1010, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1060, 1063, 1067, 1068, 1085, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1109, 1110, 1111, 1112, 1114, 1119, 1125, 1127, 1134, 1145, 1147, 1154, 1168, 1175, 1177, 1181, 1182, 1183, 1185, 1186, 1197, 1199, 1207, 1212, 1217, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1232, 1233, 1234, 1235, 1236, 1237, 1244, 1245, 1246, 1247, 1254, 1255, 1256, 1257, 1259, 1261, 1264, 1275, 1280, 1281, 1282, 1283, 1286, 1299, 1300, 1309, 1316, 1323, 1328, 1330], "data_bar": [39, 318], "data_bar_2010": [39, 318], "data_label": [39, 318], "data_page_s": [44, 48, 318, 913], "databas": [37, 119, 135, 136, 318, 811], "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 75, 92, 95, 96, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 156, 157, 160, 161, 172, 316, 317, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 777, 778, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 795, 799, 811, 820, 821, 823, 825, 827, 830, 832, 836, 839, 843, 844, 845, 846, 847, 849, 853, 854, 858, 861, 863, 870, 872, 877, 878, 879, 880, 882, 885, 889, 890, 892, 893, 894, 896, 897, 898, 899, 900, 901, 902, 903, 904, 906, 907, 913, 919, 1002, 1003, 1037, 1063, 1085, 1154, 1175, 1231, 1235, 1246, 1247, 1270, 1276, 1277, 1289, 1300, 1309, 1310, 1311, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1331], "dataframeplot": [318, 321], "dataload": [280, 318], "datapoint": [209, 318, 839, 913], "dataset": [14, 44, 68, 133, 134, 137, 138, 144, 147, 148, 153, 223, 280, 318, 499, 799, 811, 843, 849, 913, 1104, 1300, 1329], "datat": [39, 318], "datatyp": [36, 45, 120, 122, 123, 124, 126, 128, 140, 142, 143, 145, 146, 151, 152, 164, 165, 167, 193, 202, 318, 388, 461, 636, 705, 728, 747, 759, 795, 799, 811, 830, 913, 918, 919, 981, 1003, 1056, 1154, 1206, 1283, 1300, 1326], "date": [16, 39, 50, 65, 133, 134, 136, 138, 144, 145, 147, 150, 152, 153, 180, 187, 207, 209, 222, 224, 250, 265, 318, 321, 350, 410, 412, 413, 414, 415, 418, 420, 422, 423, 425, 428, 429, 430, 432, 433, 434, 435, 436, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 509, 591, 611, 614, 616, 618, 620, 622, 625, 627, 629, 684, 686, 705, 726, 740, 741, 743, 744, 751, 759, 785, 799, 817, 825, 839, 844, 862, 913, 919, 945, 1008, 1010, 1011, 1012, 1013, 1016, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1063, 1114, 1163, 1164, 1254, 1256, 1283, 1300, 1321, 1324, 1326], "date32": [222, 318], "date_format": [36, 45, 318, 913], "date_min": 432, "date_minus_1y_2mon": 1034, "date_part": 1321, "date_plus_1i": [432, 1034], "date_rang": [224, 288, 318, 418, 420, 433, 440, 451, 743, 744, 844, 913, 1016, 1030, 1035, 1036, 1052, 1053], "date_right": [224, 318, 844, 913], "datetim": [16, 36, 39, 45, 50, 91, 127, 137, 145, 148, 150, 152, 163, 164, 165, 167, 180, 187, 207, 209, 222, 224, 250, 265, 288, 318, 321, 350, 410, 411, 412, 413, 414, 415, 416, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 509, 558, 591, 611, 614, 616, 618, 620, 622, 625, 627, 629, 684, 687, 705, 726, 739, 740, 741, 743, 744, 745, 751, 759, 786, 787, 799, 817, 825, 839, 844, 862, 913, 918, 919, 945, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1063, 1114, 1163, 1164, 1254, 1257, 1281, 1283, 1300, 1323, 1324], "datetime_format": [36, 45, 318, 913], "datetime_rang": [209, 318, 412, 415, 429, 430, 432, 435, 436, 442, 443, 444, 445, 446, 447, 448, 449, 452, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 799, 839, 913, 1009, 1010, 1013, 1017, 1018, 1019, 1024, 1025, 1027, 1029, 1031, 1032, 1033, 1034, 1037, 1038, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "datetime_str": 438, "datetimeindex": 125, "david": 1329, "day_nam": [438, 441], "day_of_month": [418, 433, 451], "day_of_year": [418, 433, 451], "daylight": [209, 224, 250, 288, 318, 411, 419, 432, 436, 449, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 1017, 1034, 1038, 1051], "dayofweek": 1324, "dayofyear": 1324, "days_diff": 442, "db": [37, 135, 136, 318], "dbapi2": 135, "dbc": [650, 1220], "dbreadengin": 136, "dbwriteengin": [37, 318], "dbwritemod": [37, 318], "dd": [39, 318, 1323], "ddd": [1, 39, 318, 695, 697, 698], "dddd": 1323, "ddof": [266, 289, 318, 364, 369, 537, 543, 624, 625, 628, 629, 646, 713, 731, 733, 775, 776, 780, 788, 799, 873, 881, 913, 959, 964, 1142, 1148, 1194, 1196, 1216, 1290, 1300], "ddww": 1323, "de": 1323, "deal": [44, 48, 221, 318, 330, 332, 435, 601, 684, 687, 716, 717, 718, 719, 742, 799, 913, 926, 927, 1037, 1177, 1254, 1257, 1300], "debug": [29, 849, 913, 1331], "decad": [1309, 1324], "decai": [457, 458, 459, 460, 799, 1062, 1063, 1064, 1065, 1300], "decemb": [441, 1043], "decim": [9, 10, 11, 27, 28, 36, 39, 45, 133, 134, 147, 318, 322, 630, 688, 799, 913, 919, 1197, 1258, 1300, 1322], "decimal_comma": [133, 134, 147], "decimal_separ": [9, 27], "declar": [120, 122, 123, 124, 126, 135, 142, 143, 151, 275, 280, 318, 913, 919, 1309], "decod": [133, 134, 664], "decompos": [284, 318, 878, 913], "decompress": [44, 46, 48, 318, 913], "decor": [49, 51, 52, 53, 54, 163, 167, 228, 318, 550, 799, 810, 811, 1154, 1300], "dedic": [1, 121, 221, 252, 318, 919, 1328], "deem": [187, 318, 825, 913], "deepcopi": [181, 318, 818, 913, 989, 1300], "def": [1, 49, 51, 52, 53, 54, 135, 161, 163, 167, 172, 242, 282, 318, 327, 595, 654, 657, 681, 715, 760, 799, 821, 857, 913, 919, 1224, 1227, 1331], "default": [4, 5, 7, 9, 10, 14, 27, 30, 33, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 50, 56, 57, 58, 62, 65, 66, 67, 120, 122, 123, 124, 125, 126, 127, 133, 134, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 156, 158, 160, 161, 162, 163, 164, 165, 166, 167, 172, 187, 188, 191, 192, 195, 204, 208, 209, 210, 221, 223, 224, 232, 234, 241, 243, 250, 251, 252, 253, 254, 258, 261, 265, 266, 268, 273, 275, 276, 280, 283, 285, 286, 287, 289, 294, 303, 318, 329, 330, 332, 355, 362, 367, 403, 405, 410, 435, 441, 454, 456, 457, 459, 460, 480, 516, 520, 529, 534, 535, 537, 541, 543, 544, 549, 557, 558, 561, 564, 583, 584, 586, 591, 592, 598, 601, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 635, 637, 646, 647, 656, 663, 674, 679, 680, 681, 684, 686, 687, 689, 691, 712, 713, 716, 718, 721, 725, 726, 730, 731, 733, 740, 741, 742, 743, 744, 745, 748, 751, 755, 756, 757, 759, 771, 774, 780, 781, 786, 787, 788, 790, 799, 820, 821, 825, 826, 828, 829, 831, 838, 839, 843, 844, 853, 862, 866, 868, 872, 873, 877, 879, 880, 881, 886, 888, 895, 913, 919, 926, 927, 950, 957, 962, 990, 1002, 1003, 1008, 1037, 1043, 1057, 1061, 1062, 1064, 1065, 1083, 1121, 1125, 1134, 1139, 1140, 1146, 1163, 1164, 1170, 1175, 1177, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1199, 1205, 1208, 1216, 1217, 1218, 1226, 1230, 1233, 1244, 1249, 1250, 1251, 1254, 1256, 1257, 1259, 1261, 1279, 1281, 1289, 1290, 1300, 1322, 1331], "default_match": [648, 660], "default_scop": 33, "defaultdict": [253, 318], "defer": [318, 321, 322, 1300, 1305], "defin": [36, 39, 45, 65, 135, 142, 160, 161, 163, 180, 191, 192, 196, 209, 228, 239, 242, 250, 287, 304, 318, 487, 516, 550, 595, 598, 610, 611, 614, 616, 618, 620, 622, 625, 627, 629, 662, 667, 674, 685, 692, 740, 741, 743, 744, 761, 781, 786, 787, 799, 817, 828, 829, 832, 839, 857, 862, 880, 896, 913, 918, 919, 1089, 1121, 1154, 1175, 1186, 1232, 1237, 1244, 1255, 1262, 1300], "definit": [39, 318, 499, 799, 918, 919, 1104, 1300], "deflat": [34, 318], "deg": 1325, "degre": [266, 289, 318, 537, 543, 600, 624, 625, 628, 629, 646, 713, 723, 731, 733, 775, 776, 780, 788, 799, 873, 881, 913, 1194, 1196, 1216, 1290, 1300, 1321], "delet": [1316, 1330], "delimit": [43, 45, 143, 151, 243, 273, 318, 647, 663, 913, 1217, 1233, 1276, 1300], "delta": [38, 137, 148, 266, 289, 318, 537, 543, 624, 625, 628, 629, 646, 713, 731, 733, 775, 776, 780, 788, 799, 811, 873, 881, 913, 1194, 1196, 1216, 1290, 1300], "delta_merge_opt": [38, 318], "delta_table_opt": [137, 148], "delta_write_opt": [38, 318], "deltalak": [38, 137, 148, 155, 318], "deltat": [38, 137, 148, 318], "demo": [39, 318], "demonstr": [133, 471, 799, 919], "dens": [20, 207, 318, 601, 799, 1177, 1300], "densiti": [1300, 1305], "depend": [44, 49, 55, 88, 135, 155, 177, 318, 348, 349, 506, 507, 550, 561, 598, 601, 745, 748, 751, 757, 799, 923, 943, 944, 1111, 1112, 1175, 1177, 1300, 1331], "deploi": [163, 167], "deprec": [38, 133, 134, 160, 161, 162, 163, 167, 170, 178, 234, 276, 294, 299, 318, 417, 452, 473, 568, 605, 647, 655, 714, 723, 732, 799, 814, 831, 853, 866, 879, 885, 886, 891, 913, 1015, 1023, 1024, 1054, 1082, 1181, 1217, 1225, 1281, 1300], "depth": 130, "desc": [919, 1309, 1312, 1316, 1318], "descend": [50, 259, 264, 318, 343, 363, 536, 601, 634, 643, 644, 712, 724, 799, 867, 871, 913, 938, 958, 1101, 1141, 1177, 1203, 1214, 1289, 1300], "describ": [163, 207, 318, 913, 1300], "descript": [209, 318, 839, 913, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1326, 1329, 1330], "deseri": [130, 258, 318, 473, 564, 799, 866, 913], "deserializ": [188, 258, 318, 405, 564, 799, 826, 866, 913], "design": [275, 280, 318], "desir": [163, 367, 452, 541, 962, 1054, 1146], "destin": 136, "detail": [55, 121, 135, 136, 156, 158, 176, 209, 318, 441, 705, 799, 839, 888, 913, 1043, 1283, 1300, 1331], "determin": [14, 36, 39, 45, 50, 58, 85, 130, 133, 134, 135, 138, 144, 145, 147, 152, 154, 179, 183, 202, 209, 221, 222, 228, 250, 281, 282, 288, 318, 387, 422, 435, 482, 541, 561, 598, 604, 606, 641, 649, 662, 684, 685, 687, 688, 707, 742, 771, 774, 790, 799, 815, 822, 823, 830, 839, 862, 876, 882, 913, 1020, 1037, 1085, 1146, 1175, 1181, 1182, 1212, 1219, 1254, 1257, 1258, 1300], "dev": [175, 922, 1194, 1300], "develop": [136, 163, 167], "deviat": [266, 318, 459, 624, 625, 646, 780, 799, 873, 913, 1064, 1216, 1300, 1317], "devic": [275, 318, 820, 888, 913, 1279, 1300], "devicememoryresourc": 888, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 51, 52, 75, 92, 96, 121, 122, 123, 124, 125, 126, 127, 134, 135, 136, 147, 160, 161, 163, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 195, 196, 198, 199, 200, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 226, 227, 228, 229, 230, 231, 232, 233, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 264, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 630, 631, 632, 633, 634, 635, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 690, 692, 693, 694, 695, 697, 698, 699, 700, 701, 702, 703, 704, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 773, 777, 779, 780, 781, 782, 783, 784, 785, 787, 788, 789, 795, 799, 839, 862, 878, 880, 893, 896, 904, 913, 919, 1037, 1063, 1231, 1235, 1246, 1247, 1277, 1300, 1305, 1309, 1310, 1311, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1331], "df0": [235, 318, 854, 913, 1315], "df1": [50, 58, 156, 157, 194, 197, 235, 265, 290, 318, 854, 913, 1312, 1314, 1315, 1316, 1328], "df2": [50, 58, 156, 157, 194, 197, 290, 318, 1312, 1314, 1315, 1316, 1328], "df3": [50, 318], "df4": 318, "df5": 318, "df6": 318, "df_a": 1328, "df_a1": 58, "df_a2": 58, "df_a3": 58, "df_agg_nuniqu": [239, 318], "df_b": 1328, "df_current_batch": 134, "df_d1": 58, "df_d2": 58, "df_from_str_repr": [274, 318], "df_h1": 58, "df_h2": 58, "df_new_grid": [485, 799], "df_nuniqu": [239, 318], "df_original_grid": [485, 799], "df_panda": 1310, "df_pd": 121, "df_tempor": [614, 616, 618, 620, 622, 625, 627, 629, 799], "dfi": [121, 176], "diagon": [58, 282, 318], "diagonal_relax": 58, "dict": [30, 37, 38, 39, 44, 48, 51, 53, 55, 120, 122, 123, 124, 125, 126, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 163, 201, 221, 241, 247, 251, 252, 253, 271, 272, 275, 280, 282, 318, 799, 860, 913, 917, 918, 919, 1074, 1300, 1313], "dictat": [432, 799, 917, 1034], "dictionari": [30, 39, 55, 79, 120, 122, 123, 124, 126, 130, 133, 134, 135, 136, 140, 142, 143, 145, 146, 147, 150, 151, 152, 221, 241, 251, 252, 253, 271, 272, 275, 280, 318, 913, 918], "did": [411, 1009], "diff": [292, 318, 442, 443, 444, 445, 446, 447, 448, 530, 799, 883, 913, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1135, 1300], "differ": [39, 44, 91, 94, 115, 133, 138, 153, 156, 158, 191, 197, 209, 210, 221, 243, 250, 252, 253, 272, 275, 276, 282, 318, 406, 418, 432, 433, 435, 441, 450, 456, 471, 480, 511, 530, 532, 541, 550, 583, 584, 586, 591, 605, 606, 684, 710, 748, 751, 757, 799, 828, 829, 831, 839, 862, 913, 919, 984, 1004, 1016, 1034, 1035, 1037, 1043, 1052, 1059, 1068, 1083, 1116, 1135, 1137, 1154, 1163, 1164, 1166, 1181, 1182, 1254, 1300, 1324, 1326, 1328], "digit": [66, 595, 630, 631, 657, 799, 919, 1197, 1198, 1220, 1227, 1300, 1331], "dimens": [120, 122, 124, 126, 142, 143, 151, 318, 607, 799, 913, 1183, 1281, 1300], "dimension": [122, 124, 126, 276, 318, 913, 1300], "direct": [39, 136, 145, 149, 152, 261, 275, 286, 318, 362, 534, 635, 799, 868, 913, 957, 1139, 1205, 1300], "directli": [6, 30, 39, 57, 135, 163, 167, 172, 253, 275, 318, 457, 459, 460, 606, 774, 799, 821, 913, 1062, 1064, 1065, 1182, 1279, 1300, 1312, 1328, 1331], "directori": [39, 44, 145, 147, 150, 152, 318, 917], "dirpath": [34, 36, 40, 41, 44, 147, 318], "disabl": [44, 48, 49, 87, 88, 145, 150, 164, 221, 318, 820, 913], "disable_string_cach": 88, "disallow": 163, "discard": [200, 318, 467, 799, 835, 913, 1072, 1300], "disco": [659, 661, 1229, 1231], "discont": [659, 661, 1229, 1231], "discourag": [550, 799], "discoveri": [243, 318], "discret": [403, 406, 454, 482, 511, 530, 598, 799, 1002, 1004, 1057, 1085, 1116, 1135, 1175, 1300], "disk": [44, 45, 46, 47, 48, 139, 318, 565, 869, 913], "dispatch": 919, "displai": [7, 10, 11, 12, 13, 17, 19, 23, 25, 39, 187, 207, 318, 825, 831, 913], "distanc": [224, 318, 482, 799, 844, 913, 1085, 1300], "distinct": [39, 167, 241, 243, 296, 318, 368, 490, 493, 542, 601, 610, 745, 799, 963, 1093, 1096, 1147, 1177, 1186, 1300, 1317, 1327, 1329, 1331], "distinct_count": [44, 48, 318, 913], "distinguish": [441, 1043], "distribut": [499, 641, 799, 1104, 1212, 1300], "div": 1321, "divid": [20, 403, 436, 449, 457, 459, 460, 471, 499, 598, 799, 1002, 1038, 1051, 1062, 1064, 1065, 1104, 1175, 1300, 1317, 1322], "divis": [471, 708, 799, 1322], "divisor": [266, 289, 318, 537, 543, 624, 625, 628, 629, 646, 713, 731, 733, 775, 776, 780, 788, 799, 873, 881, 913, 1194, 1196, 1216, 1290, 1300], "dl": [280, 318], "do": [1, 39, 45, 46, 47, 48, 50, 56, 57, 122, 123, 126, 133, 145, 147, 152, 156, 157, 158, 159, 177, 187, 189, 197, 220, 224, 243, 247, 270, 282, 286, 318, 321, 402, 410, 513, 549, 670, 671, 679, 680, 681, 771, 774, 790, 799, 816, 820, 821, 825, 827, 831, 844, 849, 858, 860, 869, 888, 913, 919, 1001, 1008, 1068, 1118, 1240, 1241, 1249, 1250, 1251, 1284, 1300, 1305], "do_polars_oper": 29, "do_someth": 135, "do_various_th": 172, "doc": [38, 40, 41, 136, 139, 141, 156, 158, 174, 175, 185, 318, 921, 922], "document": [32, 91, 136, 174, 318, 322, 438, 441, 665, 684, 686, 687, 691, 795, 888, 921, 984, 1040, 1043, 1235, 1254, 1256, 1257, 1261], "doe": [10, 36, 38, 45, 50, 58, 109, 120, 122, 123, 124, 126, 127, 133, 134, 135, 136, 137, 138, 142, 143, 147, 148, 151, 153, 182, 197, 200, 204, 209, 210, 222, 223, 251, 252, 253, 283, 292, 295, 318, 321, 322, 452, 467, 471, 480, 541, 550, 649, 659, 661, 672, 680, 681, 710, 795, 799, 819, 820, 825, 835, 839, 843, 849, 877, 883, 887, 913, 991, 1054, 1068, 1072, 1083, 1207, 1219, 1229, 1231, 1242, 1300, 1305, 1323], "doesn": [38, 133, 147, 209, 224, 318, 454, 799, 839, 844, 913, 1057, 1300], "dog": [648, 690, 693, 730, 1218, 1260, 1263], "doi": 1324, "dollar": [670, 671, 1240, 1241], "domain": [1, 657, 1227], "don": [58, 209, 224, 228, 283, 286, 318, 402, 513, 550, 591, 799, 839, 844, 877, 913, 919, 1001, 1118, 1154, 1300], "done": [134, 153, 172, 178, 180, 224, 318, 333, 334, 591, 799, 814, 817, 844, 913, 929, 1300], "dot": [50, 565, 795, 799, 869, 913, 1300], "doubl": [277, 318, 670, 671, 1240, 1241], "dow": 1324, "down": [147, 150, 151, 152, 153, 470, 799, 1075, 1300], "download": [143, 147, 150, 151, 565, 869, 913], "downstream": [276, 318, 634, 799, 1203, 1300], "dr": 149, "drago": [662, 1232], "dragon": 662, "dragonfr": 1232, "dragonfruit": [662, 674, 685, 1232, 1244, 1255], "dramat": 138, "draw": [20, 25, 163, 167, 1331], "drawback": 795, "drawfn": 1331, "drawing_charact": 20, "dremio": 135, "driver": [37, 135, 136, 318], "drop": [1, 123, 190, 191, 192, 228, 283, 292, 318, 406, 408, 409, 511, 512, 598, 799, 828, 829, 877, 883, 913, 1004, 1006, 1007, 1116, 1117, 1175, 1300, 1327], "drop_dupl": [283, 318, 877, 913], "drop_empty_row": [138, 144], "drop_first": [273, 318, 1276, 1300], "drop_in_plac": 318, "drop_nan": [318, 409, 799, 913, 1007, 1300], "drop_nul": [318, 408, 799, 913, 1006, 1300], "dset": 153, "dst": [436, 449, 1038, 1051], "dst_offset": [411, 1009], "dt": [1, 39, 50, 138, 144, 250, 318, 611, 745, 799, 808, 862, 913, 919, 1308, 1323, 1324], "dt1": 1323, "dt2": 1323, "dtm": [39, 318, 414, 441, 919, 1012, 1043, 1323], "dtm_iso": 441, "dtm_iso_strict": 441, "dtype": [10, 39, 49, 53, 59, 65, 79, 87, 88, 98, 120, 122, 124, 126, 127, 133, 134, 135, 136, 138, 142, 143, 144, 147, 151, 160, 161, 162, 163, 167, 174, 176, 180, 183, 209, 224, 250, 274, 275, 276, 277, 280, 286, 295, 318, 388, 389, 400, 401, 441, 452, 461, 474, 508, 516, 547, 549, 550, 557, 596, 603, 604, 611, 614, 616, 618, 620, 622, 625, 627, 629, 636, 638, 664, 684, 701, 705, 711, 721, 728, 747, 751, 755, 756, 758, 759, 760, 761, 771, 774, 781, 790, 799, 817, 822, 839, 844, 862, 887, 913, 918, 919, 921, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 981, 982, 983, 984, 989, 999, 1000, 1003, 1004, 1043, 1054, 1061, 1091, 1109, 1110, 1113, 1121, 1145, 1152, 1154, 1173, 1184, 1206, 1209, 1234, 1254, 1271, 1278, 1279, 1281, 1282, 1283, 1284, 1288, 1300, 1328, 1331], "dtype_format": [39, 318], "dtypekind": 176, "dtypelik": [174, 921], "dtypeoper": [1, 53], "dubiou": 91, "due": [180, 209, 224, 250, 253, 288, 318, 329, 419, 432, 436, 449, 574, 575, 577, 579, 581, 582, 611, 614, 616, 618, 620, 622, 625, 627, 629, 726, 740, 741, 743, 744, 786, 787, 799, 817, 839, 844, 862, 913, 1017, 1034, 1038, 1051], "dummi": [273, 318, 1276, 1300], "duplic": [50, 96, 216, 223, 224, 225, 283, 287, 318, 329, 488, 574, 598, 799, 843, 844, 845, 877, 880, 913, 1090, 1175, 1300, 1329], "duplicateerror": [598, 799, 1175, 1300], "dur": [225, 318, 845, 913], "durat": [172, 224, 288, 318, 411, 419, 441, 442, 443, 444, 445, 446, 447, 448, 452, 458, 705, 740, 741, 743, 744, 786, 787, 799, 844, 913, 918, 919, 1009, 1017, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1063, 1281, 1283, 1300], "dure": [49, 95, 133, 134, 147, 172, 197, 318, 1068, 1300], "dutch": [410, 726, 1008], "dynam": [209, 318, 367, 541, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 799, 839, 913, 917, 962, 1146], "dynamicgroupbi": [209, 318], "e": [10, 34, 36, 38, 40, 41, 44, 45, 121, 130, 133, 139, 141, 145, 150, 152, 153, 165, 188, 200, 207, 211, 220, 227, 269, 270, 276, 286, 318, 327, 405, 454, 458, 461, 487, 544, 550, 555, 556, 557, 558, 559, 561, 562, 563, 565, 566, 567, 636, 641, 660, 680, 681, 692, 747, 761, 778, 789, 799, 826, 835, 847, 860, 913, 919, 1057, 1063, 1089, 1212, 1230, 1262, 1300, 1318, 1323, 1331], "e101": [39, 318], "e_filt": [561, 563], "e_sum_ov": [561, 563], "e_sum_slic": [561, 563], "each": [36, 39, 45, 50, 59, 66, 75, 134, 135, 138, 143, 151, 156, 157, 158, 159, 161, 184, 186, 193, 200, 207, 208, 209, 222, 224, 228, 241, 243, 250, 252, 254, 275, 280, 284, 287, 288, 296, 297, 299, 301, 303, 304, 312, 318, 343, 387, 403, 436, 449, 467, 490, 493, 519, 522, 529, 539, 546, 550, 598, 601, 609, 610, 617, 621, 632, 637, 644, 657, 661, 662, 666, 667, 674, 676, 677, 685, 692, 707, 721, 724, 730, 755, 756, 781, 789, 799, 820, 823, 824, 830, 835, 839, 844, 858, 862, 878, 880, 889, 891, 893, 895, 896, 904, 913, 938, 988, 1002, 1038, 1051, 1093, 1096, 1124, 1127, 1134, 1144, 1175, 1177, 1185, 1186, 1199, 1208, 1227, 1231, 1232, 1236, 1237, 1244, 1246, 1247, 1255, 1262, 1270, 1300, 1317, 1328, 1329, 1331], "eager": [209, 224, 243, 286, 318, 412, 415, 418, 420, 429, 430, 432, 433, 435, 436, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 614, 616, 618, 620, 622, 625, 627, 629, 721, 725, 740, 741, 743, 744, 751, 755, 756, 771, 774, 778, 781, 786, 787, 790, 798, 799, 839, 844, 849, 913, 1009, 1010, 1013, 1016, 1017, 1018, 1019, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1328], "eagerli": [541, 1309], "ear": [674, 685, 1244], "earlier": [224, 318, 844, 913], "earliest": [209, 318, 435, 684, 687, 742, 839, 905, 913, 1037, 1254, 1257], "easi": 172, "easiest": 177, "easili": [50, 256, 280, 292, 297, 318, 781, 795, 864, 883, 889, 913], "east": [152, 225, 318, 845, 913], "ebf1d": [39, 318], "eee": [1, 39, 318, 919], "ef": 671, "effect": [39, 202, 209, 318, 419, 471, 550, 576, 578, 580, 799, 839, 886, 887, 913, 1009, 1017], "effici": [121, 135, 220, 222, 318, 549, 799], "efgh": 1323, "eg": [17, 25, 39, 58, 136, 172, 275, 318, 436, 684, 687, 708, 799, 919, 1254, 1257], "egnaro": 1323, "either": [79, 163, 219, 223, 224, 225, 241, 250, 251, 275, 276, 318, 458, 549, 596, 598, 611, 684, 716, 724, 728, 781, 799, 820, 843, 844, 845, 847, 862, 913, 917, 919, 1063, 1173, 1175, 1254, 1300, 1313, 1331], "element": [13, 14, 25, 158, 159, 162, 165, 177, 179, 186, 219, 243, 251, 264, 266, 281, 289, 318, 335, 336, 337, 338, 339, 340, 351, 352, 386, 387, 390, 393, 394, 395, 396, 398, 399, 400, 401, 402, 408, 409, 462, 463, 467, 480, 491, 502, 510, 512, 513, 514, 517, 522, 530, 531, 532, 533, 537, 543, 545, 546, 549, 550, 591, 592, 601, 604, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 633, 638, 639, 640, 644, 645, 646, 676, 677, 688, 703, 704, 706, 707, 713, 724, 731, 733, 775, 776, 780, 788, 799, 815, 824, 871, 873, 876, 881, 913, 930, 931, 932, 933, 934, 935, 946, 947, 980, 986, 989, 992, 993, 994, 995, 997, 998, 999, 1000, 1001, 1006, 1007, 1066, 1067, 1072, 1073, 1084, 1094, 1103, 1105, 1107, 1108, 1115, 1117, 1118, 1119, 1122, 1127, 1135, 1136, 1137, 1138, 1150, 1151, 1154, 1170, 1177, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1201, 1209, 1210, 1211, 1215, 1216, 1246, 1247, 1258, 1272, 1273, 1274, 1278, 1285, 1286, 1290, 1300, 1317, 1318], "elementwis": [549, 591, 612, 613, 615, 617, 619, 621, 624, 626, 628, 799, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1300], "elif": 789, "elig": [849, 913], "elimin": [499, 799, 1104, 1300], "elis": [235, 318, 854, 913], "ellips": 20, "ellipsi": [207, 318], "elppa": 1323, "els": [134, 789], "email": [657, 1227], "email_part": [657, 1227], "emphas": [318, 322], "emploi": 919, "empti": [13, 34, 36, 45, 100, 123, 133, 134, 138, 144, 147, 181, 182, 209, 234, 285, 318, 647, 655, 759, 777, 818, 819, 839, 853, 879, 913, 919, 989, 991, 1073, 1091, 1105, 1217, 1225, 1300], "en": [20, 39, 318], "enabl": [28, 29, 44, 48, 49, 87, 88, 137, 145, 148, 150, 152, 156, 157, 158, 159, 171, 174, 256, 277, 292, 318, 330, 332, 605, 606, 634, 649, 659, 661, 672, 712, 795, 799, 820, 864, 883, 913, 921, 926, 927, 1181, 1182, 1203, 1219, 1229, 1231, 1242, 1282, 1289, 1300], "enable_string_cach": 87, "enclos": [473, 799], "encod": [62, 68, 78, 130, 133, 134, 147, 273, 318, 321, 372, 473, 609, 651, 696, 799, 966, 1185, 1221, 1276, 1300, 1305], "encount": [111, 133, 134, 147, 209, 318, 583, 584, 664, 665, 731, 735, 749, 799, 839, 913, 1163, 1164, 1234, 1235, 1300], "end": [36, 39, 45, 133, 134, 147, 209, 243, 318, 371, 374, 376, 411, 436, 461, 535, 648, 653, 657, 662, 668, 674, 678, 679, 680, 683, 721, 726, 739, 740, 741, 742, 743, 744, 747, 755, 756, 786, 787, 789, 795, 799, 839, 858, 913, 919, 968, 1009, 1038, 1101, 1140, 1223, 1227, 1232, 1238, 1244, 1248, 1249, 1250, 1255, 1300, 1323], "endpoint": [403, 598, 799, 1002, 1175, 1300], "ends_a": 1323, "ends_in_digit": 1323, "ends_with": [371, 376, 648, 678, 919, 1248, 1321], "ends_with_expr": 374, "ends_with_lit": 374, "engin": [14, 37, 135, 136, 138, 169, 208, 223, 228, 276, 283, 304, 318, 549, 778, 799, 820, 838, 843, 849, 853, 877, 888, 896, 910, 913, 1154, 1281, 1300, 1312, 1328], "engine_opt": [37, 138, 318], "enginetyp": [820, 913], "enough": [513, 641, 799, 1118, 1212, 1300], "ensur": [10, 39, 136, 162, 165, 174, 200, 208, 241, 251, 276, 318, 487, 549, 799, 835, 838, 849, 888, 913, 917, 919, 921, 1281, 1300], "enter": 172, "entir": [39, 56, 57, 138, 144, 318, 820, 821, 913], "entri": [318, 913, 918, 1328], "entropi": [799, 1300], "enumer": [125, 133, 134, 138, 144, 147, 222, 318], "env": [4, 168], "env_onli": 30, "environ": [4, 30, 143, 145, 147, 150, 151, 152, 166, 169, 275, 318], "eol_char": [133, 134, 147], "eparg": 1323, "epoch": [64, 65, 751, 1324], "epoch_": [420, 1018], "epoch_n": [420, 1018], "epochtimeunit": [420, 751, 1018], "eq": [200, 318, 456, 467, 799, 835, 913, 1059, 1300], "eq_miss": [799, 1166, 1300], "equal": [49, 88, 133, 134, 147, 156, 157, 158, 159, 209, 224, 225, 235, 264, 318, 403, 449, 455, 456, 476, 501, 541, 586, 598, 604, 612, 613, 615, 617, 619, 621, 624, 626, 628, 644, 668, 669, 672, 694, 724, 775, 776, 789, 795, 799, 839, 844, 845, 854, 871, 913, 1002, 1038, 1059, 1146, 1166, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1238, 1239, 1242, 1264, 1300, 1317, 1320, 1331], "equival": [39, 120, 122, 123, 124, 126, 142, 143, 151, 209, 219, 239, 318, 327, 331, 455, 456, 458, 471, 476, 478, 501, 548, 570, 572, 585, 586, 587, 590, 596, 667, 690, 692, 693, 700, 708, 715, 799, 839, 913, 1058, 1059, 1063, 1078, 1080, 1103, 1106, 1153, 1165, 1166, 1237, 1260, 1262, 1263, 1300, 1310, 1318], "err": 658, "error": [14, 38, 57, 106, 110, 112, 122, 123, 126, 133, 134, 145, 147, 152, 180, 243, 251, 276, 318, 329, 354, 355, 372, 410, 516, 518, 520, 541, 574, 606, 648, 651, 656, 658, 660, 664, 665, 684, 686, 687, 691, 799, 817, 821, 888, 896, 913, 949, 950, 966, 1008, 1121, 1123, 1125, 1182, 1218, 1221, 1226, 1228, 1230, 1234, 1235, 1254, 1256, 1257, 1261, 1281, 1300, 1326], "escap": [89, 133, 134, 136, 147, 654, 670, 671, 1224, 1240, 1241], "esp": 14, "especi": [161, 610, 799, 913, 1186, 1300], "espresso": 919, "est": 743, "establish": 135, "estim": [133, 134, 178, 195, 318, 334, 459, 460, 499, 720, 799, 814, 913, 929, 1061, 1064, 1065, 1104, 1300], "estimated_s": [318, 1300], "etc": [21, 38, 39, 133, 137, 138, 139, 141, 148, 149, 318, 550, 799, 917, 919, 1200, 1202, 1300, 1324], "eu": [148, 149], "eur": [207, 318, 1331], "europ": [415, 419, 435, 1013, 1017, 1037], "eval": [274, 318, 549, 550, 746, 799, 1154, 1278, 1300], "evalu": [45, 46, 47, 48, 152, 198, 200, 224, 318, 331, 344, 346, 347, 378, 379, 380, 381, 383, 384, 402, 467, 484, 504, 505, 541, 590, 591, 716, 718, 721, 725, 740, 741, 743, 744, 746, 755, 756, 771, 774, 781, 786, 787, 789, 790, 799, 820, 835, 841, 843, 844, 913, 939, 941, 942, 972, 973, 974, 975, 977, 978, 1001, 1072, 1109, 1110, 1291, 1300, 1320], "even": [36, 45, 133, 318, 458, 595, 598, 799, 913, 919, 1063, 1175, 1300], "evenli": [209, 318, 839, 913], "event": [57, 821, 913], "eventu": [37, 318], "ever": [591, 799], "everi": [14, 36, 45, 133, 134, 138, 144, 147, 203, 209, 272, 288, 318, 346, 347, 348, 349, 352, 354, 360, 398, 399, 400, 401, 402, 436, 449, 463, 475, 506, 507, 511, 514, 517, 518, 519, 527, 530, 535, 539, 610, 655, 735, 736, 799, 837, 839, 913, 941, 942, 943, 944, 947, 949, 955, 997, 998, 999, 1000, 1001, 1038, 1051, 1067, 1077, 1111, 1112, 1116, 1119, 1122, 1123, 1124, 1132, 1135, 1140, 1144, 1186, 1225, 1300], "everybodi": [649, 672, 1219, 1242], "everyth": 919, "ew": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "ewm_mean": [799, 1300], "ewm_mean_bi": [799, 1300], "ewm_std": [799, 1300], "ewm_var": [799, 1300], "ewma": [458, 799, 1063, 1300], "exact": [158, 161, 163, 167, 224, 262, 318, 334, 471, 655, 682, 683, 684, 686, 687, 708, 799, 844, 913, 1225, 1254, 1256, 1257], "exactli": [122, 123, 126, 156, 157, 158, 159, 162, 163, 167, 318, 676, 677, 682, 683, 745, 913, 1207, 1246, 1247, 1252, 1253, 1300], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 75, 79, 87, 88, 92, 95, 96, 97, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 142, 143, 144, 147, 148, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 799, 811, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 917, 918, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1300, 1305, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1330], "exc_tb": 1328, "exc_typ": 1328, "exc_val": 1328, "exce": [207, 318], "excel": [35, 39, 132, 138, 318, 811], "excelread": 138, "excelspreadsheetengin": 138, "except": [0, 189, 204, 211, 224, 227, 247, 269, 318, 388, 606, 662, 685, 747, 799, 811, 827, 844, 860, 913, 919, 981, 1084, 1108, 1182, 1232, 1255, 1272, 1281, 1300, 1327], "exclud": [163, 167, 209, 318, 387, 398, 401, 410, 487, 557, 707, 726, 795, 799, 839, 913, 919, 1008, 1089, 1300], "excluded_dtyp": [163, 164, 167], "exclus": [251, 318, 715, 721, 755, 756, 799], "execut": [38, 49, 58, 135, 136, 226, 265, 318, 405, 513, 712, 778, 799, 816, 820, 826, 849, 858, 872, 888, 913, 917, 1118, 1289, 1300, 1310, 1311, 1312, 1314, 1328, 1330], "execute_glob": 1328, "execute_opt": [135, 136], "exist": [1, 37, 38, 39, 50, 96, 137, 145, 148, 152, 163, 189, 204, 243, 247, 282, 287, 292, 293, 318, 329, 371, 374, 376, 414, 435, 670, 671, 729, 799, 823, 827, 830, 860, 863, 880, 882, 883, 884, 913, 919, 1012, 1037, 1240, 1241, 1330], "existing_t": 1330, "existing_table_path": [38, 318], "exit": [49, 87, 172, 1315, 1328], "exp": [457, 458, 459, 460, 799, 1062, 1063, 1064, 1065, 1300, 1321], "exp_a": 1322, "expand": [133, 145, 147, 152, 463, 555, 559, 604, 698, 799, 917, 919, 1067, 1300], "expand_selector": 919, "expans": 695, "expect": [66, 68, 101, 109, 117, 133, 135, 143, 145, 147, 150, 151, 152, 157, 159, 541, 550, 759, 799, 847, 849, 913], "expens": [133, 134, 143, 145, 147, 151, 152, 166, 168, 221, 228, 251, 252, 253, 282, 283, 318, 550, 799, 823, 825, 830, 863, 877, 882, 913, 1068, 1154, 1300, 1331], "experiment": [225, 280, 318, 845, 883, 913], "expiri": [143, 145, 147, 150, 151, 152], "explain": [56, 57, 177, 226, 318, 820, 821, 913, 1327], "explainformat": [831, 913], "explicit": [39, 95, 135, 147, 161, 265, 287, 318, 441, 773, 872, 880, 913, 1043], "explicitli": [95, 136, 161, 163, 172, 204, 318, 605, 781, 799, 810, 1328], "explod": [318, 387, 469, 591, 607, 707, 799, 913, 917, 1183, 1300, 1318], "explor": [187, 318, 825, 913], "expon": [596, 799, 1173, 1300, 1322], "exponenti": [457, 458, 459, 460, 462, 596, 799, 1062, 1063, 1064, 1065, 1066, 1300, 1322], "export": [39, 40, 41, 175, 221, 222, 252, 253, 270, 272, 275, 318, 795, 919, 922, 1275, 1300], "expos": 811, "expr": [1, 50, 51, 52, 53, 54, 196, 198, 199, 223, 224, 225, 239, 243, 251, 256, 257, 275, 280, 292, 293, 318, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 790, 791, 792, 794, 795, 799, 800, 801, 804, 805, 806, 807, 808, 832, 833, 834, 843, 844, 845, 859, 864, 865, 883, 884, 913, 917, 919, 1001, 1008, 1011, 1012, 1026, 1034, 1058, 1059, 1063, 1070, 1071, 1076, 1078, 1080, 1106, 1118, 1124, 1140, 1144, 1153, 1165, 1166, 1218, 1223, 1230, 1248, 1300, 1326], "expr1": [1320, 1328], "expr2": [1320, 1328], "expr_unique_subset": [239, 318], "express": [0, 8, 45, 46, 47, 48, 56, 57, 160, 163, 167, 179, 196, 198, 200, 208, 214, 223, 224, 228, 239, 243, 251, 256, 257, 261, 264, 275, 280, 281, 292, 293, 295, 297, 304, 318, 327, 329, 330, 331, 332, 333, 335, 336, 337, 338, 339, 340, 343, 344, 348, 349, 350, 351, 352, 355, 366, 371, 372, 373, 374, 375, 376, 387, 392, 393, 394, 395, 396, 402, 403, 404, 405, 407, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 455, 456, 458, 461, 463, 464, 466, 467, 471, 473, 474, 476, 477, 478, 479, 484, 487, 488, 489, 490, 491, 492, 493, 501, 502, 506, 507, 509, 510, 513, 514, 520, 522, 540, 541, 547, 548, 549, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 570, 572, 574, 575, 577, 579, 581, 582, 585, 586, 588, 590, 591, 595, 596, 597, 598, 600, 604, 605, 606, 607, 609, 610, 632, 633, 634, 637, 639, 640, 642, 644, 647, 648, 649, 650, 651, 652, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 670, 671, 672, 674, 675, 676, 677, 685, 689, 699, 700, 703, 704, 707, 708, 709, 711, 712, 714, 715, 716, 717, 719, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 735, 736, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 755, 756, 757, 758, 759, 760, 761, 763, 765, 768, 771, 773, 774, 775, 776, 777, 779, 781, 783, 785, 786, 787, 789, 790, 795, 798, 811, 815, 820, 821, 831, 832, 835, 838, 843, 844, 858, 864, 865, 868, 869, 871, 876, 883, 884, 885, 887, 889, 896, 913, 917, 919, 946, 990, 1001, 1008, 1011, 1012, 1026, 1043, 1058, 1059, 1063, 1069, 1078, 1080, 1089, 1106, 1115, 1118, 1153, 1154, 1165, 1166, 1181, 1182, 1201, 1205, 1218, 1219, 1220, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1234, 1235, 1240, 1241, 1242, 1255, 1259, 1300, 1318, 1320, 1322, 1323, 1327], "exprmetanamespac": [554, 560], "ext": 135, "extend": [0, 123, 290, 318, 464, 799, 811, 917, 928, 1069, 1300], "extend_const": [799, 1300], "extens": [277, 318, 1282, 1300], "extern": [885, 913], "extra": [38, 133, 134, 137, 139, 141, 145, 147, 148, 149, 152, 197, 209, 318, 799, 839, 913, 917, 1068, 1300], "extract": [127, 177, 265, 318, 413, 416, 418, 421, 423, 424, 425, 426, 427, 428, 431, 433, 434, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 450, 451, 453, 595, 657, 658, 659, 664, 665, 674, 676, 799, 1011, 1014, 1015, 1016, 1019, 1021, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1036, 1039, 1041, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1055, 1227, 1228, 1229, 1234, 1235, 1244, 1321], "extract_mani": [661, 1231], "extract_numb": [595, 799], "extracted_nr": 657, "extrem": [464, 612, 799, 1069, 1187, 1300], "extrema": [636, 799, 1206, 1300], "f": [51, 134, 135, 200, 207, 222, 270, 276, 282, 286, 318, 327, 367, 375, 541, 636, 655, 684, 687, 729, 799, 835, 913, 919, 962, 1146, 1225, 1254, 1257, 1300, 1305, 1318], "f32": [1, 53, 180, 265, 274, 280, 318, 636, 778, 799, 817, 872, 913, 919, 1152, 1300, 1326], "f4": [276, 318], "f5ed2452": [39, 318], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 50, 52, 54, 58, 75, 121, 123, 142, 153, 160, 163, 180, 181, 182, 185, 187, 188, 189, 191, 193, 198, 199, 202, 206, 207, 208, 209, 214, 215, 223, 224, 230, 231, 232, 233, 237, 243, 244, 245, 263, 264, 266, 268, 280, 289, 292, 297, 300, 302, 305, 306, 307, 308, 310, 311, 318, 326, 329, 335, 336, 337, 338, 339, 340, 358, 364, 369, 375, 388, 390, 391, 393, 394, 395, 403, 404, 408, 409, 437, 454, 455, 456, 457, 458, 459, 460, 461, 462, 465, 466, 470, 471, 476, 478, 485, 486, 494, 495, 496, 497, 499, 501, 513, 524, 525, 537, 543, 544, 545, 546, 548, 551, 552, 553, 569, 572, 574, 583, 584, 585, 586, 592, 596, 598, 599, 600, 601, 605, 606, 612, 613, 615, 616, 617, 618, 619, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 638, 639, 640, 641, 645, 646, 699, 703, 704, 708, 713, 722, 723, 727, 729, 731, 733, 746, 747, 761, 764, 765, 766, 778, 780, 788, 795, 799, 817, 818, 825, 827, 828, 833, 834, 838, 839, 842, 843, 844, 851, 852, 859, 871, 873, 881, 883, 885, 889, 892, 894, 897, 898, 899, 900, 902, 903, 913, 919, 930, 931, 932, 933, 934, 935, 953, 959, 964, 969, 986, 987, 992, 993, 994, 1002, 1003, 1006, 1007, 1039, 1062, 1063, 1064, 1065, 1066, 1070, 1075, 1085, 1087, 1088, 1118, 1129, 1130, 1142, 1148, 1149, 1150, 1151, 1170, 1173, 1175, 1177, 1182, 1187, 1189, 1190, 1192, 1193, 1194, 1196, 1197, 1198, 1209, 1210, 1211, 1215, 1273, 1274, 1288, 1300, 1309, 1317, 1318, 1322, 1325, 1328, 1331], "f_string": 750, "fa1e": [689, 1259], "face": [143, 145, 147, 150, 151, 152], "facil": 135, "facilit": [183, 318], "factor": [457, 459, 460, 705, 799, 1062, 1064, 1065, 1283, 1300], "fail": [37, 38, 121, 137, 139, 143, 145, 147, 148, 150, 151, 152, 176, 276, 283, 318, 344, 439, 541, 684, 686, 687, 691, 799, 877, 913, 1154, 1254, 1256, 1257, 1261, 1281, 1300, 1326], "fall": [152, 403, 598, 799, 820, 888, 913, 1002, 1175, 1300, 1317], "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 36, 38, 39, 44, 45, 46, 47, 48, 50, 56, 57, 58, 121, 122, 123, 125, 126, 127, 133, 134, 135, 137, 138, 139, 141, 143, 144, 145, 147, 148, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 176, 179, 180, 181, 182, 187, 194, 202, 206, 207, 208, 209, 213, 214, 216, 217, 218, 221, 223, 224, 226, 231, 232, 238, 239, 241, 243, 244, 251, 252, 253, 254, 256, 259, 262, 264, 265, 268, 271, 273, 276, 277, 281, 282, 283, 287, 288, 290, 292, 300, 302, 305, 306, 308, 311, 318, 330, 331, 332, 343, 346, 347, 350, 354, 355, 363, 368, 371, 374, 376, 387, 388, 397, 398, 399, 400, 401, 402, 403, 410, 422, 437, 454, 455, 456, 457, 459, 460, 478, 479, 482, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 504, 505, 509, 513, 516, 518, 520, 529, 536, 542, 548, 549, 550, 554, 556, 557, 558, 560, 562, 565, 566, 585, 586, 588, 590, 593, 594, 598, 601, 612, 613, 615, 617, 619, 621, 623, 624, 626, 628, 632, 634, 636, 641, 643, 644, 647, 648, 649, 650, 653, 659, 660, 661, 663, 664, 670, 671, 672, 675, 676, 678, 684, 686, 687, 689, 707, 709, 712, 715, 716, 717, 718, 719, 721, 724, 725, 726, 730, 731, 734, 735, 740, 741, 743, 744, 755, 756, 759, 771, 774, 778, 781, 786, 787, 789, 790, 799, 815, 817, 818, 819, 820, 821, 825, 831, 838, 839, 843, 844, 847, 849, 858, 864, 867, 869, 871, 872, 876, 877, 880, 883, 888, 892, 894, 897, 898, 900, 903, 913, 917, 919, 926, 927, 938, 941, 942, 945, 949, 950, 958, 963, 965, 966, 968, 970, 981, 983, 985, 988, 989, 996, 997, 998, 999, 1000, 1001, 1002, 1008, 1020, 1039, 1059, 1060, 1062, 1064, 1065, 1072, 1074, 1079, 1081, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1109, 1110, 1114, 1118, 1121, 1123, 1125, 1134, 1141, 1147, 1160, 1166, 1168, 1171, 1172, 1175, 1177, 1178, 1179, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1203, 1207, 1212, 1214, 1217, 1218, 1219, 1220, 1223, 1229, 1230, 1231, 1233, 1234, 1240, 1241, 1242, 1245, 1246, 1248, 1254, 1256, 1257, 1259, 1276, 1281, 1282, 1286, 1289, 1291, 1300, 1310, 1312, 1318, 1323, 1328], "far": [39, 318], "fashion": [223, 318, 831, 858, 869, 913], "fast": [44, 46, 48, 166, 168, 318, 464, 634, 799, 913, 917, 1069, 1203, 1300, 1331], "fast_executemani": [37, 318], "faster": [45, 46, 47, 48, 56, 57, 135, 138, 197, 276, 286, 318, 550, 710, 799, 820, 821, 831, 858, 869, 913, 1068, 1154, 1300], "fastexcel": [138, 155], "favor": [37, 318], "fay": 130, "feat1": [275, 280, 318], "feat2": [275, 280, 318], "feather": [40, 139, 150, 318, 811], "featur": [1, 44, 55, 66, 68, 275, 280, 318], "feature_0": [885, 913], "feature_0_train": [885, 913], "feature_1": [885, 913], "feature_nam": [280, 318], "feb": [155, 1323], "februari": 1323, "fed": 680, "feel": [649, 672, 1219, 1242], "fetch": [129, 820, 913], "fetch_california_h": [280, 318], "few": [207, 318], "fewer": [662, 685, 913, 1232, 1255], "ff": 1317, "ff00": [689, 1259], "fff": 1, "ffff00": [372, 373, 651, 966, 967, 1221], "ffffff": [39, 318], "ffi": [195, 318, 1061, 1300], "fgg": 919, "fghi": 1323, "fh": 134, "fiction": 1309, "field": [35, 36, 38, 45, 79, 113, 116, 123, 284, 318, 367, 541, 549, 550, 576, 578, 580, 609, 657, 658, 664, 676, 677, 697, 698, 699, 705, 712, 735, 736, 760, 781, 799, 878, 913, 962, 1146, 1154, 1185, 1228, 1246, 1247, 1268, 1270, 1283, 1300, 1324], "field_0": [367, 541, 962, 1146], "field_1": [367, 541, 962, 1146], "field_2": [962, 1146], "field_n": [367, 541, 962, 1146], "field_nam": [550, 799, 1154, 1300], "figsiz": [565, 858, 869, 913], "figur": [565, 631, 799, 869, 913, 1198, 1300], "file": [2, 3, 5, 6, 32, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 131, 132, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 188, 197, 258, 318, 405, 473, 564, 568, 799, 826, 866, 913, 917, 1068, 1300], "file_cache_ttl": [143, 147, 150, 151], "filenam": 139, "filesystem": [38, 137, 148, 149, 318], "fill": [50, 58, 181, 198, 199, 261, 286, 318, 322, 370, 398, 401, 465, 466, 472, 485, 486, 613, 615, 617, 619, 621, 624, 626, 628, 635, 750, 771, 774, 790, 799, 833, 834, 868, 885, 913, 1070, 1071, 1087, 1088, 1167, 1188, 1189, 1191, 1194, 1195, 1196, 1205, 1300], "fill_char": [668, 669, 1238, 1239], "fill_nan": [199, 318, 466, 799, 834, 913, 1071, 1300], "fill_nul": [50, 198, 318, 465, 799, 833, 885, 913, 1070, 1300], "fill_valu": [261, 286, 318, 635, 799, 868, 913, 1205, 1300], "fillnullstrategi": [199, 318, 466, 799, 834, 913, 1071, 1300], "film": 1309, "filter": [1, 45, 46, 47, 48, 51, 56, 57, 147, 148, 152, 153, 191, 192, 216, 217, 218, 243, 304, 318, 561, 563, 653, 678, 714, 739, 742, 749, 778, 789, 799, 820, 821, 828, 829, 831, 841, 858, 869, 872, 896, 913, 919, 1202, 1300, 1316], "final": [13, 39, 50, 152, 224, 226, 318, 457, 459, 460, 799, 825, 844, 913, 917, 1062, 1064, 1065, 1300, 1329], "find": [58, 205, 318, 633, 648, 649, 661, 799, 1201, 1219, 1231, 1240, 1300], "find_pat": 660, "fine": [820, 910, 913], "finish": [197, 318, 1068, 1300], "finit": [489, 708, 731, 799, 1092, 1300], "first": [44, 50, 133, 134, 138, 139, 141, 144, 145, 147, 152, 156, 157, 158, 159, 177, 207, 209, 211, 224, 227, 228, 238, 242, 243, 250, 269, 273, 274, 282, 283, 288, 295, 301, 318, 343, 345, 354, 402, 406, 430, 432, 436, 452, 471, 481, 490, 503, 511, 513, 518, 519, 541, 549, 550, 562, 571, 595, 596, 611, 633, 644, 648, 655, 656, 660, 662, 664, 665, 670, 671, 685, 692, 727, 728, 735, 749, 753, 789, 795, 799, 839, 840, 844, 848, 857, 862, 877, 885, 887, 893, 913, 919, 938, 949, 1001, 1003, 1004, 1032, 1034, 1038, 1054, 1084, 1093, 1108, 1116, 1118, 1123, 1124, 1146, 1154, 1201, 1214, 1225, 1226, 1228, 1230, 1232, 1234, 1235, 1240, 1241, 1255, 1262, 1272, 1276, 1278, 1281, 1300, 1320, 1321, 1323, 1329, 1331], "first_column": [39, 318], "first_non_nul": [541, 1146], "first_part": [676, 677, 1246, 1247], "fisher": [499, 641, 799, 1104, 1212, 1300], "fit": [130, 221, 262, 286, 318, 636, 774, 799, 1206, 1207, 1300], "five": [279, 318, 1331], "fix": [10, 59, 68, 161, 452, 745, 1054], "flag": [55, 137, 148, 160, 276, 318, 634, 648, 656, 657, 660, 670, 671, 799, 831, 849, 913, 919, 1203, 1218, 1226, 1227, 1230, 1240, 1241, 1281, 1300, 1323], "flat": [130, 253, 318, 514, 607, 799, 1119, 1183, 1300], "flatten": 799, "flavour": [39, 135, 318], "flight": 135, "flight_sql": 135, "flightsql": 135, "float": [10, 11, 36, 39, 45, 69, 70, 133, 134, 147, 153, 156, 157, 158, 159, 160, 163, 167, 176, 187, 191, 195, 198, 224, 245, 254, 275, 276, 310, 318, 350, 391, 403, 408, 409, 437, 454, 455, 456, 457, 459, 460, 465, 470, 471, 476, 478, 485, 489, 492, 494, 495, 496, 497, 501, 509, 529, 544, 548, 551, 565, 569, 583, 584, 585, 586, 596, 598, 599, 612, 613, 615, 617, 619, 621, 622, 624, 626, 628, 630, 632, 638, 708, 772, 774, 799, 825, 828, 833, 844, 859, 869, 902, 913, 919, 945, 981, 987, 1002, 1003, 1005, 1006, 1007, 1039, 1057, 1061, 1062, 1064, 1065, 1070, 1075, 1085, 1104, 1114, 1134, 1149, 1163, 1164, 1173, 1174, 1175, 1176, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1199, 1202, 1209, 1212, 1216, 1271, 1281, 1290, 1300, 1328, 1331], "float16": [280, 318], "float32": [1, 10, 36, 45, 53, 180, 202, 274, 275, 276, 280, 318, 458, 799, 817, 913, 919, 1063, 1091, 1152, 1279, 1281, 1284, 1300], "float4": [265, 318, 778, 872, 913, 1326], "float64": [10, 36, 39, 45, 123, 133, 142, 160, 163, 183, 193, 195, 202, 255, 280, 292, 318, 335, 336, 337, 338, 339, 340, 375, 388, 393, 394, 395, 404, 437, 458, 461, 494, 495, 600, 639, 640, 703, 704, 747, 761, 771, 774, 790, 795, 799, 822, 830, 863, 883, 913, 918, 919, 1039, 1063, 1282, 1288, 1300], "float_list": 75, "float_precis": [9, 10, 27, 36, 39, 45, 318, 913], "float_scientif": [36, 45, 318, 913], "floatfmt": 11, "floor": [52, 471, 799, 1300, 1321], "floor_a": 1322, "floordiv": [708, 799], "fmt": [11, 224, 318, 484, 750, 799, 841, 844, 913], "fmt_number": [318, 322], "fmt_str_length": [12, 740, 741, 743, 744], "fmt_table_cell_list_len": 13, "fmt_titl": [39, 318], "fn": [735, 736, 749, 773], "foggi": [670, 671, 1240, 1241], "fold": [318, 562, 727, 735, 736, 773], "folder": 153, "follow": [39, 44, 55, 133, 134, 135, 137, 138, 144, 147, 148, 149, 209, 224, 228, 242, 250, 276, 288, 318, 432, 436, 449, 458, 549, 595, 596, 601, 611, 614, 616, 618, 620, 622, 623, 625, 627, 629, 638, 697, 708, 723, 740, 741, 743, 744, 761, 786, 787, 789, 791, 792, 794, 799, 800, 801, 804, 806, 807, 808, 839, 844, 857, 862, 913, 919, 1034, 1038, 1051, 1063, 1173, 1177, 1200, 1202, 1209, 1281, 1292, 1294, 1296, 1300, 1301, 1306, 1307, 1308, 1326, 1331], "font": [39, 318], "font_color": [39, 318], "font_siz": [39, 318], "foo": [34, 36, 38, 40, 41, 42, 43, 44, 130, 142, 143, 180, 183, 184, 185, 189, 190, 191, 192, 193, 194, 197, 200, 202, 204, 205, 206, 210, 211, 212, 213, 214, 215, 217, 223, 227, 228, 229, 230, 231, 232, 233, 236, 237, 240, 243, 245, 247, 248, 251, 254, 255, 256, 258, 260, 263, 266, 267, 268, 269, 270, 272, 273, 274, 276, 277, 278, 282, 283, 284, 289, 290, 291, 296, 318, 389, 403, 405, 432, 475, 481, 484, 503, 554, 556, 557, 558, 560, 561, 562, 563, 564, 565, 566, 567, 598, 607, 647, 650, 652, 655, 657, 658, 663, 673, 675, 677, 679, 680, 681, 682, 683, 690, 693, 702, 720, 731, 732, 733, 748, 752, 753, 754, 757, 758, 762, 764, 766, 767, 769, 770, 772, 777, 780, 784, 788, 789, 795, 799, 817, 822, 823, 827, 828, 829, 830, 835, 841, 842, 843, 856, 860, 863, 864, 877, 878, 882, 885, 913, 918, 919, 982, 1002, 1034, 1125, 1173, 1175, 1183, 1220, 1222, 1225, 1227, 1228, 1243, 1247, 1252, 1253, 1260, 1263, 1300, 1314, 1316, 1317, 1318, 1320, 1323, 1326], "foo1": 1323, "foo11": [202, 318], "foo_": [559, 675, 750], "foo_1": [273, 318], "foo_2": [273, 318], "foo_3_4": 1323, "foo_a": [243, 318], "foo_a_bar_1": 750, "foo_at_1": 1318, "foo_b": [243, 318], "foo_b_bar_2": 750, "foo_bar": [554, 560, 675, 759, 1314], "foo_bar2": [554, 560], "foo_bar_baz": 675, "foo_c_bar_3": 750, "foo_low": [690, 1323], "foo_mean": 1318, "foo_q25": 1317, "foo_q50": 1317, "foo_q75": 1317, "foo_std": 1317, "foo_strip": 679, "foo_strip_end": 680, "foo_strip_start": 681, "foo_sum": [1317, 1318], "foo_uniqu": 1318, "foo_upp": [693, 1323], "foo_var": 1317, "foobar": [682, 683, 1252, 1253, 1323], "foobarbar": [683, 1253], "foofoobar": [682, 1252], "foral": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "forc": [224, 228, 276, 304, 318, 541, 843, 844, 896, 913, 1154, 1281, 1300], "force_parallel": [224, 318, 843, 844, 913], "form": [36, 45, 120, 122, 123, 124, 126, 142, 143, 151, 221, 252, 286, 318, 441, 592, 692, 799, 913, 1043, 1170, 1262, 1300, 1323], "format": [7, 11, 15, 16, 20, 35, 36, 39, 40, 41, 44, 45, 91, 131, 133, 134, 135, 138, 139, 141, 144, 147, 153, 175, 188, 196, 207, 221, 234, 243, 252, 253, 258, 272, 285, 316, 318, 322, 405, 436, 438, 441, 564, 565, 566, 684, 686, 687, 691, 745, 799, 826, 831, 832, 853, 866, 879, 913, 922, 1040, 1043, 1254, 1256, 1257, 1261, 1299, 1323, 1324], "formul": [191, 318, 828, 829, 913], "formula": [39, 318, 454, 799, 1057, 1300], "fortran": [275, 276, 318], "forward": [199, 224, 261, 318, 362, 410, 429, 466, 472, 534, 635, 799, 834, 844, 868, 913, 957, 1008, 1031, 1071, 1139, 1205, 1300], "forward_fil": [288, 318, 370, 398, 401, 635, 799], "found": [20, 36, 39, 45, 92, 113, 116, 123, 127, 145, 152, 193, 265, 318, 633, 660, 665, 682, 683, 684, 687, 799, 872, 913, 1201, 1230, 1235, 1252, 1253, 1254, 1257, 1300, 1312, 1328], "four": [279, 318, 1328], "fourth": [499, 799, 1104, 1300], "frac": [457, 458, 459, 460, 641, 799, 1062, 1063, 1064, 1065, 1212, 1300], "fraction": [36, 45, 156, 157, 158, 159, 254, 318, 437, 529, 592, 632, 684, 687, 799, 913, 1039, 1134, 1170, 1199, 1254, 1257, 1300], "fragment": 1328, "frame": [36, 37, 39, 45, 50, 57, 58, 123, 134, 138, 144, 156, 157, 180, 181, 187, 221, 222, 226, 228, 235, 239, 242, 251, 252, 253, 265, 280, 286, 287, 318, 441, 778, 817, 818, 825, 854, 857, 872, 880, 913, 919, 989, 1043, 1300, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1327, 1331], "frame_data": [1311, 1314], "frameinittyp": [318, 913], "frametyp": [50, 1328], "framework": [243, 285, 318, 879, 913], "freedom": [266, 289, 318, 537, 543, 624, 625, 628, 629, 646, 713, 731, 733, 775, 776, 780, 788, 799, 873, 881, 913, 1194, 1196, 1216, 1290, 1300], "freeli": [778, 872, 913, 919], "freez": [39, 318], "freeze_pan": [39, 318], "frequenc": [288, 318, 712, 799, 1289, 1300], "frequent": [1200, 1202, 1300], "fri": [318, 321], "fridai": [209, 318, 410, 438, 726, 839, 913, 1008, 1040, 1043], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 35, 36, 38, 39, 45, 50, 58, 79, 91, 95, 111, 115, 120, 121, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 166, 167, 168, 177, 180, 187, 188, 189, 195, 197, 200, 201, 207, 209, 221, 222, 223, 224, 225, 226, 234, 243, 247, 250, 251, 253, 254, 256, 257, 265, 273, 280, 282, 283, 285, 286, 287, 288, 294, 318, 321, 322, 367, 375, 403, 404, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 461, 471, 473, 485, 499, 517, 529, 541, 550, 558, 583, 584, 586, 591, 592, 595, 598, 600, 611, 612, 614, 616, 618, 620, 622, 625, 627, 629, 632, 644, 656, 657, 662, 664, 674, 679, 680, 681, 682, 683, 684, 685, 686, 687, 691, 710, 722, 723, 726, 727, 739, 740, 741, 742, 743, 744, 745, 759, 774, 778, 785, 786, 787, 795, 798, 799, 817, 825, 826, 827, 835, 839, 843, 844, 845, 853, 860, 862, 864, 865, 872, 877, 879, 880, 885, 886, 913, 919, 962, 969, 1002, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1061, 1063, 1068, 1104, 1122, 1134, 1146, 1163, 1164, 1166, 1167, 1170, 1175, 1187, 1199, 1226, 1227, 1232, 1234, 1244, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1261, 1276, 1291, 1300, 1309, 1310, 1311, 1312, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331], "from_arrai": 778, "from_arrow": 121, "from_json": 799, "from_panda": 121, "from_repr": [274, 318, 1278, 1300], "fromkei": [51, 53], "front": [209, 318, 839, 913], "fruit": [271, 318, 608, 653, 678, 685, 799, 1223, 1248, 1255], "fruits_revers": [608, 799], "fsspec": [133, 134, 139, 141, 148, 149, 155], "fsspecfileio": 149, "full": [11, 44, 48, 50, 58, 65, 91, 123, 126, 133, 134, 135, 137, 142, 143, 145, 147, 148, 149, 151, 152, 153, 223, 287, 318, 662, 664, 670, 671, 684, 685, 686, 687, 691, 740, 741, 843, 849, 880, 913, 919, 1232, 1234, 1240, 1241, 1254, 1255, 1256, 1257, 1261, 1300, 1316, 1331], "full_sent": 730, "fulli": [165, 242, 254, 276, 318], "funcnam": [39, 318], "function": [0, 31, 32, 33, 39, 49, 50, 51, 52, 53, 54, 57, 66, 68, 87, 88, 118, 121, 125, 127, 130, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 165, 166, 167, 168, 170, 172, 174, 176, 179, 185, 188, 195, 202, 225, 228, 234, 242, 243, 247, 265, 275, 276, 277, 280, 281, 282, 285, 286, 287, 304, 318, 321, 322, 330, 367, 386, 387, 402, 403, 405, 436, 457, 459, 460, 482, 541, 549, 550, 575, 576, 591, 595, 598, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 638, 641, 661, 705, 706, 707, 716, 720, 728, 732, 734, 735, 736, 748, 749, 751, 753, 754, 757, 760, 761, 764, 766, 769, 771, 773, 775, 776, 780, 784, 788, 790, 795, 799, 811, 815, 821, 826, 845, 849, 853, 857, 860, 872, 876, 879, 880, 887, 896, 913, 917, 921, 962, 980, 985, 1001, 1002, 1038, 1061, 1062, 1064, 1065, 1085, 1146, 1154, 1175, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1200, 1202, 1207, 1209, 1212, 1231, 1279, 1282, 1284, 1285, 1300, 1305, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1331], "function_nam": 917, "further": 795, "futur": [57, 176, 187, 259, 318, 821, 825, 867, 913], "g": [36, 45, 130, 133, 137, 139, 141, 148, 153, 165, 176, 188, 220, 276, 286, 318, 327, 405, 458, 461, 550, 636, 747, 799, 826, 860, 913, 1063, 1300, 1331], "g1": [467, 714, 799], "g2": [467, 714, 799], "g_1": [641, 799, 1212, 1300], "gag": 26, "gamma": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "gantt": [858, 913], "gather": [134, 203, 318, 343, 475, 517, 724, 799, 837, 913, 938, 1077, 1122, 1300], "gather_everi": [318, 799, 913, 1300], "gb": [195, 318, 375, 1061, 1300], "gbp": 1331, "gc": [38, 137, 148, 149, 318], "gca": 26, "gcaacgcatata": 26, "gcp": [33, 143, 145, 147, 149, 150, 151, 152], "gdp": [224, 318, 844, 913], "gdp2": [224, 318, 844, 913], "gdp_date": [224, 318, 844, 913], "ge": [799, 1300], "gener": [1, 130, 135, 136, 154, 160, 161, 162, 163, 164, 165, 167, 176, 183, 185, 243, 254, 273, 276, 282, 318, 388, 529, 632, 637, 721, 740, 743, 755, 756, 758, 774, 786, 787, 799, 913, 981, 1134, 1199, 1208, 1276, 1300, 1331], "geq": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "germani": [224, 318, 844, 913], "get": [50, 57, 140, 146, 153, 177, 179, 183, 184, 193, 201, 204, 206, 209, 211, 212, 216, 218, 219, 227, 230, 237, 238, 243, 250, 251, 255, 260, 263, 269, 277, 281, 291, 301, 312, 318, 328, 341, 342, 343, 345, 353, 356, 368, 375, 387, 389, 398, 399, 400, 401, 410, 420, 468, 474, 481, 498, 500, 503, 515, 521, 542, 551, 552, 553, 561, 563, 569, 583, 584, 593, 594, 599, 610, 611, 642, 646, 655, 701, 702, 706, 707, 709, 713, 724, 726, 748, 753, 757, 761, 762, 763, 764, 766, 767, 768, 770, 780, 784, 788, 799, 815, 820, 821, 823, 830, 836, 839, 840, 846, 848, 862, 863, 870, 875, 876, 882, 893, 904, 913, 917, 918, 923, 936, 937, 938, 939, 940, 948, 951, 963, 969, 982, 988, 997, 998, 999, 1000, 1008, 1018, 1056, 1073, 1074, 1079, 1084, 1089, 1090, 1102, 1105, 1108, 1120, 1126, 1147, 1155, 1157, 1158, 1160, 1162, 1163, 1164, 1171, 1172, 1176, 1186, 1213, 1216, 1225, 1272, 1276, 1282, 1286, 1290, 1300], "get_chunk": 1300, "get_column": [176, 278, 318], "get_column_index": 318, "get_worksheet_by_nam": [39, 318], "gevent": [57, 155, 821, 913], "gh": 671, "gh45": 671, "gh45ij67kl": 671, "ghi": [327, 657, 799, 919, 1227], "gil": [550, 799], "git": 55, "github": [136, 318], "give": [143, 150, 151, 224, 234, 283, 285, 318, 420, 471, 499, 604, 708, 712, 799, 811, 844, 853, 877, 879, 913, 1018, 1104, 1289, 1300, 1327], "given": [39, 50, 97, 102, 119, 120, 122, 123, 124, 126, 133, 134, 135, 136, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 158, 159, 160, 161, 163, 165, 166, 167, 168, 174, 195, 196, 198, 209, 219, 228, 241, 242, 251, 252, 253, 261, 264, 280, 287, 318, 350, 362, 367, 375, 387, 392, 411, 415, 438, 440, 441, 454, 458, 482, 487, 509, 534, 541, 544, 550, 591, 595, 601, 604, 605, 607, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 633, 635, 657, 658, 668, 669, 684, 687, 694, 697, 707, 747, 748, 757, 760, 761, 774, 775, 776, 799, 832, 839, 849, 857, 868, 871, 880, 896, 913, 918, 919, 921, 945, 957, 962, 969, 990, 1009, 1013, 1040, 1042, 1043, 1057, 1061, 1063, 1085, 1089, 1103, 1114, 1139, 1146, 1149, 1152, 1154, 1167, 1173, 1177, 1183, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1201, 1205, 1227, 1228, 1238, 1239, 1254, 1257, 1264, 1288, 1291, 1300, 1309, 1311, 1316, 1318, 1319, 1322, 1323, 1328, 1330, 1331], "glimps": [187, 211, 318], "glob": [133, 134, 145, 147, 150, 151, 152], "global": [49, 87, 88, 138, 154, 163, 171, 265, 318, 605, 606, 778, 799, 872, 913, 983, 984, 1181, 1182, 1300, 1310, 1312, 1327], "gmt": [415, 419, 435, 1013, 1017, 1037], "go": [12, 133, 134, 147, 653, 1223], "godfath": 1309, "goe": 12, "gonfruit": 1255, "good": [44, 46, 48, 221, 318, 913, 1322], "goodby": 1, "googl": [33, 137, 148, 149], "gpu": [275, 318, 820, 888, 910, 913, 1279, 1300], "gpu_devic": [275, 318], "gpudevic": [275, 318], "gpuengin": [820, 913], "grade": [1104, 1300], "grain": [820, 910, 913], "granular": 1328, "grape": 1323, "graph": [56, 135, 226, 318, 565, 820, 841, 885, 913], "graphviz": [226, 318, 565, 869, 913], "great": [318, 322], "great_tabl": [318, 322], "greater": [181, 224, 318, 476, 478, 487, 641, 668, 669, 677, 694, 799, 844, 913, 1089, 1212, 1238, 1239, 1247, 1264, 1300], "greatest": [1317, 1321], "greatli": [139, 150], "green": [49, 87, 88, 304, 712, 799, 896, 1289, 1300], "greenlet": [57, 821, 913], "greet": 1, "grid": [485, 799], "grid_point": [485, 799], "gridlin": [39, 318], "gross": 1309, "group": [9, 27, 44, 48, 134, 152, 180, 208, 209, 222, 239, 241, 243, 250, 253, 286, 288, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 328, 387, 402, 463, 469, 474, 477, 513, 549, 550, 561, 563, 591, 601, 610, 611, 643, 644, 648, 656, 657, 658, 660, 670, 671, 707, 712, 761, 799, 817, 838, 839, 862, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 917, 919, 1001, 1118, 1186, 1218, 1226, 1227, 1228, 1230, 1240, 1241, 1289, 1300, 1309, 1317, 1327, 1328], "group_bi": [209, 239, 243, 250, 288, 317, 318, 328, 387, 467, 469, 474, 477, 549, 550, 591, 643, 644, 707, 714, 740, 743, 761, 799, 820, 821, 831, 839, 858, 862, 869, 911, 913, 919], "group_by_dynam": [250, 318, 862, 913], "group_by_partit": [858, 913], "group_col": [467, 714, 799], "group_df": [304, 896], "group_dtyp": [591, 799], "group_index": [656, 1226], "group_to_row": [591, 799], "groupbi": [208, 318, 550, 761, 799], "grow": [290, 318], "grown": [213, 318], "gt": [318, 322, 799, 1300], "gte": [467, 714, 799], "guarante": [44, 48, 133, 134, 179, 187, 210, 281, 283, 318, 386, 387, 480, 705, 706, 707, 799, 815, 825, 876, 877, 913, 980, 1083, 1283, 1285, 1300], "guid": [799, 917, 1331], "gzip": [44, 48, 318, 913], "h": [286, 318, 327, 438, 441, 636, 670, 671, 684, 687, 691, 799, 1240, 1241, 1254, 1257, 1261, 1323, 1324], "ha": [38, 39, 50, 57, 125, 135, 147, 170, 176, 288, 294, 299, 318, 386, 387, 402, 473, 549, 562, 568, 662, 685, 695, 706, 707, 748, 757, 795, 799, 821, 886, 891, 896, 913, 980, 989, 1001, 1003, 1232, 1255, 1285, 1300], "half": [280, 318, 436, 457, 458, 459, 460, 799, 1038, 1062, 1063, 1064, 1065, 1300], "half_lif": [457, 458, 459, 460, 799, 1062, 1063, 1064, 1065, 1300], "ham": [34, 36, 38, 40, 41, 44, 180, 183, 184, 185, 189, 190, 191, 192, 193, 194, 200, 205, 210, 211, 213, 223, 227, 229, 231, 233, 236, 240, 245, 247, 248, 251, 254, 255, 256, 263, 266, 267, 269, 273, 274, 276, 277, 278, 283, 289, 290, 318, 389, 565, 566, 795, 817, 822, 823, 827, 828, 829, 830, 835, 843, 856, 860, 863, 864, 877, 885, 913, 982, 1316, 1317], "ham_a": [273, 318], "ham_b": [273, 318], "ham_right": [223, 318, 843, 913], "hamburg": 795, "hand": [39, 133, 134, 147, 318, 530, 531, 532, 533, 1135, 1136, 1137, 1138], "handi": [410, 726, 1008], "handl": [38, 56, 57, 58, 94, 127, 133, 134, 147, 153, 200, 204, 318, 406, 511, 655, 694, 799, 820, 821, 835, 913, 917, 1004, 1116, 1225, 1264, 1300], "handler": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 318, 405, 799, 826, 913], "happen": [135, 415, 598, 799, 1013, 1175, 1300], "hard": [147, 849, 913], "harder": [209, 318, 839, 913], "hardwar": 1331, "has_head": [133, 134, 138, 144, 147], "has_nul": [799, 1082, 1300], "has_prefix": 678, "has_suffix": 653, "has_two": 1318, "has_valid": 1300, "hash": [210, 318, 799, 1300], "hash_row": 318, "hat": [670, 671, 1240, 1241], "have": [5, 14, 30, 39, 49, 50, 65, 88, 121, 131, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 177, 188, 197, 221, 223, 224, 243, 246, 250, 252, 253, 272, 280, 295, 318, 402, 405, 457, 459, 460, 550, 562, 601, 605, 606, 611, 658, 672, 728, 799, 826, 843, 844, 853, 862, 886, 887, 913, 917, 919, 1001, 1003, 1062, 1064, 1065, 1068, 1177, 1181, 1182, 1240, 1242, 1300, 1327, 1329, 1331], "haystack": [657, 1227], "he": 680, "head": [147, 207, 227, 269, 318, 333, 503, 799, 848, 913, 1108, 1272, 1300], "header": [36, 39, 44, 45, 48, 127, 133, 134, 138, 144, 147, 193, 282, 318, 913], "header_format": [39, 318], "header_nam": [282, 318], "headerless": 147, "heap": [195, 318, 799, 917, 1061, 1300], "heatmap": [39, 318], "heavili": 152, "height": [39, 130, 163, 192, 318], "hell": [679, 1249], "hello": [1, 20, 679, 680, 681, 919, 1125, 1249, 1250, 1251, 1311, 1314], "hello_": 750, "hello_data": 1314, "hello_world": 1314, "help": [39, 156, 157, 158, 159, 318, 913], "helper": [318, 322, 795], "henc": [670, 1241], "here": [38, 39, 44, 120, 122, 123, 124, 126, 135, 136, 137, 142, 143, 145, 147, 148, 149, 150, 151, 152, 161, 163, 167, 177, 243, 318, 410, 549, 550, 565, 658, 665, 726, 799, 869, 913, 919, 1008, 1235], "hex": [372, 373, 651, 652, 689, 966, 967, 1221, 1222, 1259], "hexadecim": [966, 967], "hf": [143, 145, 147, 150, 151, 152], "hf_token": [143, 145, 147, 150, 151, 152], "hi": [1, 1323], "hidden": [39, 318], "hidden_column": [39, 318], "hide": [21, 22, 23, 24], "hide_gridlin": [39, 318], "hide_password": 135, "high": [253, 318, 322, 598, 799, 811, 1175, 1300], "higher": [44, 48, 187, 245, 310, 318, 599, 621, 622, 772, 799, 825, 859, 902, 913, 1003, 1176, 1192, 1300], "highest": [318, 322, 601, 711, 731, 799, 913, 1177, 1300], "highli": [799, 917], "hippopotamu": [668, 669, 1238, 1239], "hist": [799, 1300, 1305], "histogram": [1300, 1305], "hit": [816, 913], "hive": [145, 150, 152], "hive_partit": [145, 150, 152], "hive_schema": [145, 150, 152], "hmm": 919, "hold": [262, 276, 318, 1281, 1300], "holidai": [410, 726, 1008], "home": [692, 1262], "horizont": [20, 58, 96, 202, 213, 230, 232, 237, 268, 286, 318, 717, 719, 728, 729, 730, 735, 736, 738, 746, 749, 763, 765, 768, 773, 783, 885, 913], "host": [55, 133, 139, 141, 152], "hour": [143, 147, 150, 151, 209, 224, 250, 288, 318, 424, 426, 427, 431, 432, 436, 437, 441, 443, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 742, 743, 744, 745, 785, 786, 787, 799, 839, 844, 862, 913, 919, 1034, 1038, 1045, 1051, 1063, 1300, 1324], "hours_diff": 443, "hous": [280, 318], "how": [11, 38, 39, 50, 58, 96, 136, 143, 145, 147, 150, 151, 152, 192, 200, 223, 224, 243, 286, 287, 318, 351, 406, 435, 485, 510, 511, 591, 604, 623, 684, 687, 726, 742, 789, 799, 835, 843, 844, 880, 885, 913, 917, 946, 1004, 1037, 1115, 1116, 1193, 1254, 1257, 1300], "howev": [1, 123, 135, 145, 152, 195, 228, 276, 318, 591, 799, 820, 913, 1061, 1300], "hstack": [96, 318], "html": [32, 39, 40, 41, 121, 135, 139, 141, 174, 175, 176, 185, 318, 921, 922], "http": [20, 32, 39, 40, 41, 121, 135, 136, 139, 141, 174, 175, 176, 185, 318, 565, 656, 658, 869, 913, 921, 922, 1226, 1228], "hug": [143, 145, 147, 150, 151, 152], "hut": [670, 671, 1240, 1241], "hvplot": [318, 321, 1300, 1305], "hyperbol": [336, 338, 340, 394, 640, 704, 799, 931, 933, 935, 993, 1211, 1274, 1300], "hyperloglog": [178, 318, 334, 720, 799, 814, 913, 929, 1300], "hyphen": [647, 1217], "hypothesi": [161, 163, 166, 167, 1331], "i": [1, 12, 14, 17, 31, 32, 33, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 55, 56, 57, 58, 64, 65, 66, 67, 68, 80, 88, 92, 94, 95, 96, 97, 98, 99, 101, 102, 107, 113, 116, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 177, 178, 179, 182, 183, 187, 188, 191, 192, 194, 195, 197, 200, 204, 208, 209, 210, 211, 214, 215, 219, 221, 222, 223, 224, 225, 226, 227, 228, 234, 235, 239, 241, 242, 243, 247, 248, 250, 251, 252, 253, 254, 257, 258, 259, 261, 263, 264, 265, 266, 269, 270, 275, 276, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 293, 295, 296, 304, 318, 321, 322, 327, 330, 332, 333, 334, 344, 347, 354, 355, 362, 367, 386, 387, 402, 403, 405, 408, 409, 410, 411, 414, 422, 429, 430, 432, 436, 438, 441, 449, 457, 458, 459, 460, 463, 467, 471, 480, 482, 484, 487, 499, 505, 512, 513, 516, 518, 520, 529, 534, 535, 537, 541, 543, 546, 549, 550, 554, 556, 557, 558, 560, 561, 562, 564, 573, 591, 596, 598, 601, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 637, 638, 641, 642, 643, 644, 646, 647, 648, 649, 650, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 677, 679, 680, 681, 684, 685, 686, 687, 689, 691, 692, 694, 699, 706, 707, 712, 713, 716, 717, 718, 719, 720, 725, 726, 728, 729, 730, 731, 732, 733, 734, 735, 736, 740, 741, 743, 744, 749, 753, 754, 755, 756, 758, 759, 761, 764, 766, 769, 771, 774, 775, 776, 777, 778, 780, 784, 786, 787, 788, 789, 790, 795, 799, 814, 815, 816, 819, 820, 821, 823, 825, 826, 828, 829, 830, 831, 835, 838, 839, 842, 843, 844, 845, 847, 849, 853, 854, 858, 860, 862, 863, 865, 866, 867, 868, 869, 870, 871, 872, 873, 876, 877, 879, 880, 881, 882, 884, 887, 888, 896, 906, 913, 917, 919, 926, 927, 928, 929, 942, 949, 950, 957, 962, 980, 983, 985, 990, 991, 1001, 1002, 1003, 1006, 1007, 1008, 1009, 1012, 1020, 1034, 1038, 1040, 1043, 1051, 1060, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1072, 1073, 1083, 1084, 1085, 1089, 1091, 1101, 1103, 1104, 1105, 1108, 1110, 1117, 1118, 1121, 1123, 1125, 1134, 1139, 1140, 1146, 1154, 1173, 1175, 1177, 1179, 1181, 1182, 1183, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1200, 1201, 1202, 1203, 1205, 1208, 1209, 1212, 1213, 1216, 1217, 1218, 1219, 1220, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1247, 1249, 1250, 1251, 1254, 1255, 1256, 1257, 1259, 1261, 1262, 1264, 1272, 1275, 1279, 1281, 1282, 1284, 1285, 1289, 1290, 1300, 1305, 1309, 1310, 1315, 1319, 1320, 1323, 1326, 1328, 1329, 1331], "i0e0": 1331, "i16": [1, 53, 418, 433, 451, 636, 799, 919, 1035, 1278, 1300, 1331], "i32": [1, 53, 120, 123, 127, 160, 162, 163, 256, 265, 318, 353, 354, 356, 388, 413, 421, 423, 424, 425, 426, 427, 431, 453, 636, 726, 789, 799, 864, 913, 948, 949, 951, 1011, 1021, 1025, 1026, 1027, 1033, 1055, 1152, 1300, 1320, 1324, 1331], "i64": [1, 10, 13, 16, 17, 21, 27, 51, 52, 53, 54, 58, 59, 75, 95, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 135, 142, 143, 147, 177, 179, 180, 181, 182, 184, 188, 189, 192, 193, 196, 197, 199, 200, 203, 204, 206, 207, 208, 209, 211, 213, 214, 216, 218, 220, 223, 224, 225, 227, 228, 229, 235, 236, 241, 242, 243, 244, 247, 248, 249, 250, 254, 256, 258, 261, 263, 264, 265, 267, 269, 271, 278, 281, 282, 283, 284, 285, 286, 287, 288, 290, 292, 294, 295, 296, 297, 298, 300, 301, 302, 304, 305, 308, 311, 312, 318, 327, 329, 333, 343, 348, 349, 351, 352, 357, 359, 360, 361, 362, 363, 365, 368, 370, 386, 387, 392, 398, 399, 400, 401, 402, 403, 406, 407, 420, 440, 442, 443, 444, 445, 446, 447, 448, 458, 461, 463, 464, 466, 467, 468, 469, 471, 472, 474, 475, 477, 481, 483, 484, 485, 486, 487, 490, 491, 493, 494, 495, 496, 497, 500, 503, 506, 507, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 547, 549, 550, 570, 571, 572, 574, 575, 577, 579, 581, 582, 587, 591, 592, 595, 596, 597, 598, 601, 602, 603, 605, 606, 607, 608, 609, 610, 611, 632, 634, 635, 636, 637, 642, 643, 644, 662, 670, 671, 685, 689, 694, 695, 697, 698, 699, 700, 701, 702, 706, 707, 708, 709, 711, 714, 721, 724, 727, 728, 729, 730, 735, 736, 737, 738, 739, 742, 745, 746, 747, 748, 749, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 765, 767, 768, 770, 773, 777, 778, 779, 782, 783, 784, 785, 789, 795, 799, 815, 817, 818, 820, 821, 826, 827, 829, 832, 834, 835, 836, 837, 838, 839, 840, 843, 844, 845, 846, 848, 849, 850, 854, 855, 857, 858, 860, 861, 862, 864, 866, 868, 870, 871, 872, 874, 875, 876, 877, 878, 879, 880, 883, 886, 887, 889, 890, 892, 893, 894, 896, 897, 900, 903, 904, 913, 919, 923, 924, 925, 928, 947, 952, 954, 956, 957, 958, 960, 963, 980, 990, 991, 997, 998, 999, 1000, 1001, 1002, 1018, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1067, 1068, 1069, 1071, 1072, 1076, 1077, 1079, 1084, 1086, 1094, 1108, 1116, 1117, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1128, 1131, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1144, 1146, 1147, 1154, 1159, 1167, 1173, 1175, 1178, 1179, 1180, 1181, 1182, 1183, 1185, 1188, 1191, 1195, 1199, 1200, 1202, 1205, 1206, 1208, 1213, 1214, 1259, 1265, 1270, 1272, 1277, 1285, 1286, 1291, 1300, 1309, 1310, 1312, 1316, 1317, 1318, 1319, 1320, 1322, 1325, 1326, 1328, 1329, 1331], "i8": [366, 367, 418, 421, 424, 426, 427, 428, 431, 433, 434, 437, 450, 451, 540, 636, 771, 774, 790, 799, 961, 962, 1004, 1016, 1019, 1029, 1030, 1036, 1039, 1052, 1053, 1145, 1184, 1206, 1288, 1300, 1324], "i_bitand_j": 1319, "i_bitand_op_j": 1319, "i_bitcount": 1319, "i_bitor_j": 1319, "i_bitor_op_j": 1319, "i_bitxor_j": 1319, "i_bitxor_op_j": 1319, "iceberg": [149, 811], "icon": [39, 318], "id": [26, 39, 58, 130, 133, 149, 225, 275, 282, 295, 304, 318, 610, 670, 671, 710, 799, 845, 887, 896, 913, 919, 1186, 1287, 1300, 1328, 1329, 1331], "id_char": 1331, "id_var": [234, 285, 318, 853, 879, 913], "ideal": 129, "ident": [127, 181, 182, 318, 438, 609, 610, 799, 818, 819, 913, 989, 991, 1040, 1185, 1186, 1300], "identifi": [127, 135, 234, 241, 283, 285, 296, 318, 853, 877, 879, 913], "idiograph": 919, "idiomat": [795, 823, 830, 863, 882, 896, 913], "idx": [147, 209, 222, 295, 318, 354, 367, 541, 839, 887, 913, 962, 1146, 1230], "idx_lit": 1230, "idx_rx": 1230, "ieee": [708, 799], "if_set": [5, 30], "if_table_exist": [37, 318], "ifnul": 1321, "ignor": [38, 135, 162, 163, 167, 232, 268, 287, 318, 330, 332, 355, 406, 435, 457, 459, 460, 511, 520, 583, 584, 647, 663, 716, 718, 730, 799, 880, 913, 919, 926, 927, 950, 1004, 1037, 1062, 1064, 1065, 1116, 1125, 1163, 1164, 1217, 1233, 1300], "ignore_error": [133, 134, 143, 147, 151], "ignore_nul": [232, 268, 318, 330, 332, 355, 457, 459, 460, 520, 647, 663, 716, 718, 730, 799, 926, 927, 950, 1062, 1064, 1065, 1125, 1217, 1233, 1300], "ignore_spac": 919, "ij": 671, "ij67": 671, "ijkl": 1323, "ilmsuxu": [648, 656, 657, 660, 670, 671, 1218, 1226, 1227, 1230, 1240, 1241], "imbal": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "imdb_scor": 1309, "immedi": [601, 721, 725, 740, 741, 743, 744, 755, 756, 771, 774, 781, 786, 787, 790, 799, 1177, 1300, 1310], "immut": [276, 318, 1281, 1300], "impact": [209, 318, 839, 913, 1309, 1328], "impl": 149, "implement": [44, 121, 135, 176, 210, 228, 304, 318, 321, 322, 480, 550, 574, 575, 577, 579, 581, 582, 695, 705, 761, 799, 896, 1083, 1154, 1200, 1202, 1283, 1300, 1305], "implic": [405, 799, 826, 913], "implicit": [287, 318, 880, 913], "implicitli": [200, 318, 467, 789, 799, 835, 913, 1328], "implod": [799, 1300, 1318], "import": [10, 16, 28, 34, 36, 38, 39, 40, 41, 44, 50, 65, 120, 121, 124, 125, 133, 135, 136, 142, 143, 147, 153, 156, 157, 158, 159, 160, 161, 162, 163, 166, 167, 168, 169, 180, 187, 188, 189, 192, 207, 209, 222, 224, 241, 243, 258, 265, 273, 275, 280, 285, 286, 288, 318, 321, 322, 375, 404, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 557, 558, 564, 591, 612, 614, 616, 618, 620, 622, 625, 627, 629, 726, 739, 740, 741, 742, 743, 744, 745, 778, 786, 787, 795, 799, 811, 817, 821, 825, 826, 827, 829, 839, 844, 849, 866, 879, 913, 969, 992, 994, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1063, 1092, 1095, 1097, 1098, 1187, 1210, 1273, 1300, 1305, 1310, 1325, 1328, 1331], "improv": [37, 48, 139, 150, 318, 549, 799, 913], "in_plac": [213, 262, 290, 318, 1178, 1207, 1214, 1300], "includ": [20, 30, 36, 38, 39, 45, 55, 125, 135, 137, 143, 145, 147, 148, 149, 150, 151, 152, 163, 164, 183, 187, 195, 200, 225, 241, 243, 253, 264, 280, 282, 286, 287, 318, 403, 437, 467, 471, 482, 487, 557, 598, 613, 615, 617, 619, 621, 623, 624, 626, 628, 670, 671, 675, 676, 679, 680, 726, 735, 775, 776, 799, 825, 835, 845, 871, 880, 913, 919, 1002, 1003, 1039, 1061, 1072, 1085, 1089, 1175, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1240, 1241, 1245, 1246, 1249, 1300, 1328], "include_bom": [36, 45, 318, 913], "include_boundari": [209, 318, 839, 913], "include_break": [403, 598, 799, 1002, 1175, 1300], "include_breakpoint": [482, 799, 1085, 1300], "include_categor": 919, "include_categori": [482, 799, 1085, 1300], "include_col": 163, "include_file_path": [143, 145, 147, 150, 151, 152], "include_head": [36, 39, 45, 134, 282, 318, 913], "include_index": 125, "include_init": 735, "include_kei": [241, 253, 318], "include_nul": [287, 318, 880, 913], "inclus": [177, 209, 250, 318, 441, 487, 611, 614, 616, 618, 620, 622, 625, 627, 629, 675, 676, 721, 740, 741, 743, 744, 755, 756, 786, 787, 799, 839, 862, 913, 1043, 1089, 1245, 1246, 1300], "incom": 135, "incompat": 114, "incomplet": [606, 799, 1182, 1300], "incorpor": 1328, "incorrect": [259, 318, 452, 549, 550, 634, 799, 867, 896, 913, 1054, 1203, 1300], "incorrectli": [133, 541], "increas": [39, 50, 133, 138, 144, 145, 152, 318, 402, 610, 799, 1001, 1186, 1300], "independ": [56, 57, 160, 163, 167, 280, 318, 637, 799, 820, 821, 831, 858, 869, 913], "index": [39, 102, 121, 125, 128, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 155, 176, 203, 205, 209, 214, 219, 221, 243, 248, 250, 251, 252, 261, 263, 275, 276, 278, 285, 287, 288, 294, 295, 318, 328, 341, 342, 343, 345, 348, 349, 354, 362, 367, 458, 474, 475, 477, 506, 507, 516, 517, 518, 534, 535, 541, 611, 614, 616, 618, 620, 622, 625, 627, 629, 633, 635, 642, 648, 656, 660, 662, 674, 685, 695, 724, 755, 758, 799, 837, 839, 862, 868, 870, 879, 880, 886, 887, 913, 919, 936, 937, 938, 939, 940, 943, 944, 949, 957, 962, 1063, 1076, 1077, 1103, 1111, 1112, 1121, 1122, 1123, 1139, 1140, 1146, 1167, 1200, 1201, 1205, 1213, 1226, 1230, 1232, 1244, 1255, 1300, 1305, 1318, 1323], "index_column": [209, 250, 318, 611, 799, 839, 862, 913], "indexord": [275, 276, 318], "indic": [39, 64, 65, 67, 80, 95, 105, 131, 133, 134, 135, 138, 139, 141, 143, 144, 145, 147, 150, 151, 152, 160, 161, 167, 209, 250, 253, 259, 261, 273, 318, 344, 362, 474, 482, 488, 489, 490, 492, 493, 494, 495, 496, 497, 516, 534, 554, 555, 556, 557, 558, 559, 560, 611, 614, 616, 618, 620, 622, 625, 627, 629, 633, 635, 724, 725, 770, 799, 839, 862, 867, 868, 913, 917, 919, 957, 1076, 1085, 1092, 1093, 1095, 1096, 1097, 1098, 1099, 1100, 1121, 1139, 1200, 1201, 1205, 1276, 1300, 1331], "indistinguish": [36, 45, 318, 913], "individu": [39, 48, 172, 250, 275, 276, 280, 318, 550, 657, 698, 799, 820, 862, 913, 919, 988, 1227, 1300], "inequ": [585, 799], "inexact": [156, 157, 158, 159], "inf": [160, 163, 167, 340, 403, 489, 492, 598, 708, 799, 935, 994, 1002, 1092, 1095, 1152, 1170, 1175, 1288, 1300, 1325], "infer": [36, 45, 66, 79, 95, 120, 122, 123, 124, 125, 126, 133, 134, 135, 138, 142, 143, 144, 145, 147, 150, 151, 152, 228, 318, 549, 550, 607, 664, 684, 686, 687, 688, 691, 745, 759, 774, 799, 913, 1154, 1183, 1234, 1254, 1256, 1257, 1258, 1261, 1300], "infer_schema": [133, 147], "infer_schema_length": [123, 126, 130, 133, 134, 135, 138, 142, 143, 144, 147, 151, 318, 664, 913, 1234], "inference_length": [688, 1258], "inference_s": [228, 318], "infin": [692, 708, 799, 1262], "infinit": [492, 708, 799, 1095, 1300], "influenc": [138, 849, 913], "influxdb": 135, "info": [137, 148, 149, 155], "inform": [19, 23, 37, 55, 137, 143, 145, 147, 148, 149, 150, 151, 152, 156, 158, 174, 185, 187, 318, 322, 499, 550, 641, 648, 656, 657, 660, 670, 671, 799, 820, 825, 858, 913, 917, 921, 984, 1104, 1212, 1218, 1226, 1227, 1230, 1240, 1241, 1300], "inherit": [251, 318, 405, 799, 826, 913], "init": [172, 1309], "initcap": 1321, "initi": [32, 33, 39, 79, 172, 318, 735, 749, 789, 1328], "initialis": [135, 172, 913], "inject": [39, 50, 318], "inlin": [18, 253, 318, 648, 656, 657, 660, 670, 671, 1218, 1226, 1227, 1230, 1240, 1241, 1318], "inner": [59, 75, 162, 223, 225, 287, 318, 355, 366, 407, 520, 540, 550, 604, 705, 778, 799, 843, 845, 880, 913, 950, 961, 1005, 1125, 1145, 1154, 1283, 1300, 1316, 1328], "inner_dtyp": [162, 165], "innermost": [162, 165], "innter": 949, "inprocessqueri": [820, 913], "input": [0, 50, 56, 95, 123, 125, 133, 134, 179, 189, 208, 225, 228, 232, 241, 243, 247, 256, 257, 261, 264, 268, 281, 292, 293, 297, 318, 327, 387, 392, 458, 461, 473, 487, 545, 549, 550, 562, 591, 605, 606, 638, 644, 662, 672, 674, 680, 681, 682, 683, 685, 687, 699, 707, 715, 717, 719, 721, 724, 727, 728, 729, 730, 738, 745, 747, 755, 756, 759, 760, 761, 763, 765, 768, 777, 781, 783, 789, 795, 799, 811, 815, 827, 838, 845, 860, 864, 865, 868, 871, 876, 883, 884, 889, 913, 917, 990, 1063, 1089, 1150, 1151, 1154, 1173, 1181, 1182, 1205, 1209, 1232, 1244, 1255, 1257, 1300, 1322, 1323, 1325], "input_wildcard_expans": [799, 917], "insensit": [649, 657, 659, 661, 670, 671, 672, 919, 1218, 1219, 1227, 1229, 1230, 1231, 1240, 1241, 1242], "insensitive_match": [648, 660], "insert": [37, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 214, 282, 284, 318, 633, 647, 663, 694, 799, 878, 913, 1201, 1217, 1233, 1264, 1300], "insert_aft": [39, 318], "insert_befor": [39, 318], "insert_chart": [39, 318], "insert_column": 318, "insid": [57, 549, 799, 821, 913], "inspect": [799, 913], "instal": [32, 33, 99, 125, 133, 134, 136, 139, 141, 185, 277, 318, 410, 565, 726, 869, 913, 1008, 1282, 1300], "instanc": [131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 150, 151, 152, 163, 167, 172, 180, 197, 202, 318, 562, 735, 749, 795, 817, 849, 886, 887, 913, 1068, 1300], "instanti": [37, 39, 135, 165, 256, 274, 275, 292, 318, 864, 883, 913, 918, 1278, 1279, 1300], "instantli": [57, 821, 913], "instead": [36, 38, 42, 43, 50, 57, 58, 122, 123, 126, 133, 134, 135, 138, 144, 145, 147, 152, 153, 160, 161, 162, 163, 167, 178, 179, 207, 220, 221, 224, 228, 234, 239, 241, 251, 252, 253, 256, 257, 258, 261, 275, 276, 277, 281, 293, 294, 318, 321, 322, 343, 362, 387, 388, 403, 417, 441, 458, 461, 471, 534, 564, 598, 605, 635, 647, 655, 666, 667, 679, 680, 681, 682, 683, 694, 707, 714, 721, 723, 725, 732, 740, 741, 743, 744, 745, 755, 756, 771, 774, 778, 781, 786, 787, 790, 799, 814, 815, 821, 831, 844, 853, 864, 865, 866, 868, 876, 884, 885, 886, 888, 913, 919, 938, 957, 966, 981, 1002, 1015, 1023, 1024, 1043, 1063, 1082, 1139, 1175, 1181, 1200, 1202, 1205, 1214, 1217, 1225, 1236, 1237, 1249, 1250, 1251, 1264, 1281, 1282, 1300, 1305, 1309, 1310, 1314, 1328, 1329], "int": [10, 12, 13, 14, 17, 25, 26, 36, 37, 39, 44, 45, 48, 52, 59, 66, 123, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 179, 181, 187, 195, 198, 199, 203, 205, 207, 210, 211, 212, 214, 219, 221, 222, 224, 227, 228, 238, 239, 248, 250, 251, 254, 260, 261, 263, 266, 269, 274, 278, 281, 286, 289, 291, 294, 295, 301, 312, 318, 327, 350, 354, 362, 364, 367, 369, 370, 386, 387, 402, 406, 410, 457, 459, 460, 464, 465, 466, 472, 474, 475, 477, 480, 481, 482, 503, 509, 511, 516, 517, 518, 519, 529, 534, 535, 537, 539, 540, 541, 543, 590, 592, 595, 596, 598, 601, 604, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 642, 646, 656, 662, 664, 668, 669, 670, 674, 676, 677, 685, 688, 689, 694, 702, 706, 707, 713, 715, 721, 731, 733, 739, 742, 745, 751, 753, 755, 756, 770, 771, 774, 775, 776, 780, 781, 784, 785, 788, 790, 799, 815, 818, 825, 833, 834, 837, 840, 844, 848, 858, 868, 870, 873, 875, 876, 881, 882, 886, 887, 888, 893, 904, 913, 918, 919, 936, 937, 945, 949, 957, 959, 962, 964, 980, 981, 988, 989, 995, 1001, 1004, 1005, 1008, 1061, 1062, 1064, 1065, 1069, 1070, 1071, 1076, 1077, 1083, 1084, 1085, 1103, 1107, 1108, 1114, 1116, 1121, 1122, 1123, 1124, 1134, 1139, 1140, 1142, 1144, 1145, 1146, 1148, 1160, 1161, 1163, 1164, 1167, 1169, 1170, 1173, 1174, 1175, 1177, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1204, 1205, 1208, 1213, 1216, 1226, 1232, 1234, 1238, 1239, 1240, 1244, 1246, 1247, 1255, 1258, 1259, 1264, 1271, 1272, 1278, 1285, 1290, 1300, 1312, 1315, 1328, 1331], "int16": [1, 53, 280, 318, 400, 401, 433, 701, 799, 919, 999, 1000, 1035, 1271, 1278, 1300], "int32": [1, 39, 53, 58, 120, 123, 160, 162, 163, 209, 222, 250, 275, 318, 353, 354, 356, 388, 413, 423, 424, 425, 426, 431, 453, 458, 611, 705, 774, 799, 839, 862, 913, 918, 919, 945, 948, 949, 951, 1011, 1021, 1025, 1026, 1027, 1033, 1055, 1063, 1152, 1283, 1284, 1300], "int64": [1, 38, 39, 52, 53, 58, 59, 79, 97, 133, 142, 183, 193, 202, 209, 242, 250, 255, 256, 270, 277, 318, 348, 349, 351, 352, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 400, 401, 442, 443, 444, 445, 446, 447, 448, 452, 458, 461, 549, 550, 576, 578, 580, 595, 603, 611, 664, 689, 701, 705, 721, 728, 747, 755, 756, 759, 774, 781, 795, 799, 822, 830, 839, 857, 862, 863, 864, 913, 919, 943, 944, 946, 947, 952, 953, 954, 955, 956, 957, 958, 959, 960, 963, 964, 999, 1000, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1054, 1056, 1063, 1154, 1179, 1259, 1271, 1281, 1282, 1283, 1284, 1300], "int64arrai": [1275, 1300], "int8": [1, 53, 79, 202, 318, 366, 367, 400, 401, 418, 421, 427, 428, 434, 437, 450, 451, 540, 701, 771, 774, 790, 799, 918, 961, 962, 999, 1000, 1004, 1016, 1019, 1029, 1030, 1036, 1039, 1052, 1053, 1145, 1184, 1271, 1281, 1288, 1300], "int_rang": [209, 286, 295, 304, 318, 721, 758, 839, 849, 887, 896, 913], "integ": [36, 39, 45, 64, 65, 67, 71, 72, 73, 74, 80, 81, 82, 83, 84, 154, 161, 163, 166, 168, 192, 209, 250, 273, 276, 318, 331, 391, 437, 470, 471, 590, 596, 598, 603, 610, 611, 623, 662, 685, 689, 715, 721, 751, 755, 756, 774, 799, 829, 839, 862, 913, 919, 987, 1039, 1075, 1173, 1175, 1179, 1186, 1193, 1200, 1232, 1255, 1259, 1281, 1300, 1322, 1328, 1331], "integer_list": 75, "integr": [39, 280, 318, 1331], "intend": [1, 156, 157, 158, 159, 694, 1264], "intens": [228, 304, 318, 591, 799, 1154, 1300], "interact": [163, 167, 187, 318, 321, 825, 913, 1300, 1305], "interchang": [121, 176], "interest": [134, 438, 441, 1040, 1043], "interfac": [0, 110, 111, 175, 811, 922, 1328], "interleav": 1323, "intermedi": [215, 318, 842, 913, 1331], "intern": [40, 41, 135, 154, 221, 270, 318, 471, 799, 1275, 1300, 1310], "interoper": [174, 921], "interpol": [187, 245, 310, 318, 466, 486, 553, 599, 621, 622, 772, 799, 825, 859, 902, 913, 1003, 1088, 1176, 1192, 1300, 1317], "interpolate_bi": [799, 1300], "interpolationmethod": [485, 799, 1087, 1300], "interpret": [124, 126, 133, 134, 147, 318, 913], "intersect": [39, 318, 531, 919, 1136, 1327], "interv": [209, 250, 288, 318, 403, 436, 449, 482, 487, 598, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 862, 913, 1002, 1016, 1018, 1019, 1025, 1027, 1029, 1030, 1033, 1035, 1036, 1038, 1042, 1051, 1052, 1085, 1089, 1175, 1300, 1317], "intoexpr": [179, 208, 209, 250, 256, 257, 261, 264, 281, 292, 293, 297, 318, 333, 351, 371, 374, 376, 387, 410, 458, 464, 474, 482, 486, 487, 510, 530, 531, 532, 533, 591, 605, 606, 614, 616, 618, 620, 622, 625, 627, 629, 633, 635, 644, 649, 659, 661, 672, 675, 676, 677, 682, 683, 699, 707, 717, 719, 724, 727, 728, 729, 730, 731, 733, 735, 738, 742, 749, 763, 765, 768, 774, 777, 781, 783, 799, 815, 838, 839, 862, 864, 865, 868, 871, 876, 883, 884, 889, 913, 917, 946, 965, 968, 970, 1008, 1063, 1069, 1088, 1089, 1115, 1181, 1182, 1201, 1205, 1231, 1245, 1246, 1247, 1252, 1253, 1300], "intoexprcolumn": [200, 214, 318, 350, 354, 355, 362, 386, 387, 392, 436, 464, 467, 509, 517, 520, 529, 534, 592, 596, 632, 635, 656, 662, 665, 674, 679, 680, 681, 685, 689, 694, 706, 707, 721, 726, 740, 741, 743, 744, 755, 756, 786, 787, 789, 799, 835, 868, 913, 945, 949, 950, 957, 990, 1038, 1051, 1069, 1114, 1122, 1125, 1134, 1139, 1170, 1226, 1232, 1235, 1244, 1249, 1250, 1251, 1255, 1264, 1300], "introduc": [49, 88, 684, 686, 687, 1254, 1256, 1257], "introduct": 1327, "intuit": [471, 799, 919], "invalid": [36, 45, 111, 133, 134, 147, 318, 388, 664, 665, 689, 708, 799, 913, 966, 981, 1234, 1235, 1259, 1300], "invalid_valu": 966, "invalidoperationerror": [606, 799, 1182, 1300, 1326], "invari": [849, 913], "invers": [335, 336, 337, 338, 339, 340, 799, 930, 931, 932, 933, 934, 935, 1281, 1300, 1325], "invert": 919, "invok": [549, 799], "involv": [200, 318, 835, 913], "io": [34, 36, 39, 40, 41, 44, 131, 133, 138, 139, 140, 141, 142, 143, 144, 146, 147, 149, 150, 151, 188, 258, 318, 405, 473, 564, 799, 826, 866, 913], "iobas": [42, 43, 142, 143, 188, 258, 318, 405, 564, 568, 799, 826, 866, 913], "ipc": [40, 41, 46, 139, 140, 141, 150, 153, 318, 811, 913], "ipccompress": [40, 41, 318], "is_between": [799, 1300], "is_dupl": [318, 799, 1300], "is_elementwis": [549, 799, 917], "is_empti": [318, 1300], "is_finit": [799, 1300], "is_first_distinct": [799, 1300], "is_in": [97, 200, 318, 799, 1300], "is_infinit": [799, 1300], "is_last_distinct": [799, 1300], "is_nan": [191, 318, 799, 828, 913, 1300], "is_not_nan": [799, 1300], "is_not_nul": [799, 1300], "is_nul": [192, 318, 799, 829, 913, 1300], "is_numer": 1331, "is_odd": [256, 318, 864, 913, 919], "is_selector": 919, "is_sort": 1300, "is_uniqu": [318, 799, 1300], "isn": 789, "iso": [423, 441, 450, 451, 1021, 1043, 1052, 1053, 1323], "iso8601": [133, 134, 147, 441, 1043], "iso_lang": 1323, "iso_year": 453, "isodow": 1324, "isoweek": 1324, "isoyear": 1324, "issu": [90, 91, 94, 95, 98, 105, 107, 118, 133, 134, 135, 147, 318, 400, 401, 701, 799, 999, 1000, 1271, 1300, 1328], "ital": [39, 318], "item": [13, 58, 134, 207, 251, 254, 318, 350, 354, 355, 406, 463, 509, 511, 518, 520, 529, 632, 677, 799, 945, 949, 950, 1004, 1067, 1114, 1116, 1123, 1125, 1134, 1199, 1247, 1300], "iter": [56, 57, 58, 68, 120, 123, 135, 166, 168, 179, 189, 200, 208, 209, 220, 221, 222, 225, 250, 251, 252, 253, 256, 257, 264, 281, 282, 292, 293, 296, 297, 318, 387, 402, 410, 467, 591, 644, 699, 707, 717, 719, 724, 726, 727, 728, 729, 730, 738, 763, 765, 768, 777, 781, 783, 789, 795, 799, 815, 827, 835, 838, 839, 845, 862, 864, 865, 871, 876, 883, 884, 889, 913, 917, 918, 1001, 1008, 1200, 1300, 1331], "iter_batch": 135, "iter_column": 318, "iter_row": [222, 251, 252, 253, 318], "iter_slic": 318, "its": [89, 127, 155, 195, 276, 318, 414, 436, 449, 458, 549, 609, 644, 698, 789, 799, 823, 830, 882, 913, 984, 1012, 1038, 1051, 1061, 1063, 1185, 1281, 1300, 1330], "itself": [161, 318, 321, 322, 550, 613, 615, 617, 619, 621, 623, 624, 626, 628, 775, 776, 799, 847, 913, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1300, 1305, 1309, 1310, 1328], "ix": [243, 318], "j": [282, 318, 1319], "jax": [275, 318, 1279, 1300], "jax_enable_x64": [275, 318], "jaxexporttyp": [275, 318], "jjk": 919, "jkl": [657, 1227], "jklmn": 1323, "job": [816, 913], "join": [45, 46, 47, 48, 49, 50, 56, 57, 58, 88, 200, 224, 225, 287, 318, 467, 485, 591, 647, 778, 799, 820, 821, 831, 835, 844, 845, 858, 869, 880, 885, 913, 1217, 1310, 1312, 1318, 1327, 1328], "join_asof": [223, 318, 843, 913], "join_nul": [223, 318, 843, 913], "join_wher": [318, 913], "joinstrategi": [50, 223, 318, 843, 913], "joinvalid": [223, 318, 843, 913], "jpy": 1331, "json": [2, 3, 5, 6, 42, 43, 130, 142, 143, 149, 151, 188, 258, 318, 405, 473, 564, 568, 664, 665, 696, 799, 811, 826, 866, 913, 917, 1234, 1235, 1267], "json_path": [665, 1235], "json_path_match": [664, 1234], "json_stat": 5, "json_str": [142, 143], "json_val": [665, 1235], "jsonpath": [664, 665, 1234, 1235], "jst": [127, 919], "jul": [684, 1254, 1323], "juli": [1043, 1323, 1324], "just": [39, 125, 135, 147, 234, 285, 318, 853, 879, 913, 919], "k": [179, 253, 281, 282, 318, 386, 387, 397, 499, 706, 707, 799, 815, 876, 913, 980, 996, 1104, 1285, 1300], "k_2": [641, 799, 1212, 1300], "k_3": [641, 799, 1212, 1300], "kanji": 919, "karen": [243, 318], "kathmandu": [1014, 1015, 1041], "kb": [195, 318, 375, 969, 1061, 1300], "kde": [1300, 1305], "keep": [50, 133, 134, 143, 147, 150, 151, 200, 283, 287, 288, 318, 473, 549, 567, 575, 605, 727, 799, 835, 877, 880, 913, 1181, 1300], "kei": [39, 44, 48, 50, 55, 58, 143, 145, 147, 149, 150, 151, 152, 177, 209, 221, 223, 224, 235, 241, 243, 247, 249, 252, 253, 287, 318, 467, 550, 605, 606, 672, 740, 743, 781, 799, 839, 843, 844, 854, 860, 861, 880, 913, 919, 923, 1181, 1182, 1242, 1300, 1316], "kept": [283, 318, 877, 913], "keyerror": 16, "keystrok": 795, "keyword": [38, 137, 145, 148, 163, 167, 185, 208, 242, 251, 256, 257, 277, 292, 293, 297, 318, 467, 595, 699, 777, 781, 789, 799, 838, 857, 864, 865, 883, 884, 889, 913, 1282, 1300, 1313], "kl": 671, "kleen": [330, 332, 716, 717, 718, 719, 799, 926, 927, 1300], "klmnoopqrstuvwxyz": [222, 318], "knight": 1309, "know": [50, 135, 243, 285, 318, 541, 549, 799, 879, 913], "known": [139, 367, 541, 896, 962, 1146], "kurtosi": [799, 1300], "kuzu_db_conn": 135, "kwarg": [31, 32, 35, 49, 60, 61, 63, 64, 69, 70, 71, 72, 73, 74, 76, 77, 78, 80, 81, 82, 83, 84, 85, 132, 135, 136, 163, 165, 167, 185, 200, 242, 277, 318, 321, 595, 799, 835, 857, 888, 913, 917, 1282, 1300, 1305, 1313, 1328], "k\u00f9zudb": 135, "l1": 58, "l2": 58, "label": [209, 275, 280, 318, 322, 403, 598, 612, 613, 615, 617, 619, 621, 624, 626, 628, 799, 839, 858, 913, 1002, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1300], "label_column": [280, 318], "lag": [261, 318, 362, 534, 635, 729, 799, 868, 913, 957, 1139, 1205, 1300], "lake": [38, 137, 148, 318, 811], "lambda": [147, 202, 228, 242, 243, 247, 304, 318, 367, 459, 460, 541, 549, 550, 575, 576, 735, 736, 749, 760, 761, 773, 799, 849, 857, 860, 896, 913, 962, 1064, 1065, 1146, 1154, 1300], "land": [410, 1008], "languag": [147, 209, 224, 250, 288, 318, 432, 436, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051, 1063, 1300], "larg": [10, 11, 14, 50, 135, 138, 144, 152], "large_str": [222, 270, 277, 318], "larger": [10, 45, 46, 47, 48, 56, 57, 471, 731, 799, 820, 821, 913], "largest": [179, 281, 318, 387, 706, 707, 799, 815, 876, 913, 1285, 1300], "last": [38, 143, 147, 150, 151, 156, 157, 158, 159, 211, 224, 227, 243, 253, 264, 269, 276, 283, 312, 318, 343, 354, 363, 402, 418, 429, 433, 450, 472, 493, 518, 536, 539, 541, 574, 575, 577, 579, 581, 582, 606, 643, 644, 662, 677, 685, 702, 724, 784, 795, 799, 844, 871, 875, 877, 904, 913, 919, 938, 949, 958, 1001, 1016, 1031, 1035, 1052, 1084, 1096, 1108, 1123, 1141, 1144, 1182, 1214, 1232, 1247, 1255, 1272, 1281, 1300, 1321, 1323], "last_column": [39, 318], "later": [224, 258, 318, 564, 844, 866, 913], "latest": [32, 121, 137, 148, 176, 435, 562, 684, 687, 742, 1037, 1254, 1257], "latt": 919, "latter": [39, 197, 318, 1068, 1300], "lazi": [1, 58, 147, 163, 224, 242, 243, 265, 318, 550, 751, 771, 774, 790, 799, 825, 843, 844, 885, 889, 890, 892, 894, 896, 897, 898, 899, 900, 901, 902, 903, 913, 919, 1309, 1310, 1311, 1312, 1313, 1315, 1328, 1331], "lazili": [133, 134, 147, 148, 149, 150, 151, 152, 821, 913], "lazy_fram": [56, 57], "lazyfram": [0, 1, 50, 51, 52, 53, 54, 56, 57, 58, 147, 148, 149, 150, 151, 152, 153, 156, 157, 163, 183, 188, 226, 242, 243, 258, 265, 318, 405, 467, 541, 564, 778, 799, 811, 910, 911, 912, 919, 1309, 1310, 1313, 1315, 1328, 1329, 1331], "lazygroupbi": [838, 839, 862, 913], "lbl": [275, 280, 318], "ldf": [1, 889, 890, 892, 894, 897, 898, 899, 900, 901, 902, 903], "ldot": [458, 799, 1063, 1300], "le": [653, 799, 1300], "lead": [14, 44, 127, 153, 232, 259, 261, 268, 318, 362, 474, 477, 534, 541, 549, 550, 634, 635, 679, 681, 731, 799, 849, 867, 868, 896, 913, 957, 1139, 1154, 1203, 1205, 1249, 1251, 1300], "leap": [422, 432, 1020, 1034], "leap_year": 422, "learn": [280, 318], "least": [101, 243, 318, 383, 384, 592, 656, 658, 799, 977, 978, 1170, 1226, 1228, 1300, 1321], "leav": [6, 234, 285, 318, 541, 853, 879, 913], "left": [15, 16, 39, 50, 156, 157, 158, 159, 209, 223, 224, 250, 287, 318, 403, 457, 458, 459, 460, 485, 487, 598, 611, 614, 616, 618, 620, 622, 625, 627, 629, 633, 705, 727, 735, 736, 740, 741, 743, 744, 749, 773, 786, 787, 789, 799, 839, 843, 844, 862, 880, 913, 1002, 1062, 1063, 1064, 1065, 1089, 1175, 1201, 1283, 1300, 1312, 1316, 1321], "left_clos": [403, 598, 799, 1002, 1175, 1300], "left_on": [223, 224, 287, 318, 843, 844, 880, 913], "leftmost": [633, 799, 1201, 1300, 1323], "len": [12, 39, 163, 167, 183, 222, 243, 295, 299, 304, 318, 396, 550, 561, 563, 609, 732, 755, 799, 822, 882, 887, 891, 896, 913, 918, 995, 1185, 1300], "len_byt": [12, 667, 1237], "len_char": [666, 1236], "length": [58, 59, 75, 138, 144, 147, 161, 165, 207, 209, 250, 263, 318, 321, 402, 436, 449, 535, 541, 562, 605, 606, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 642, 662, 666, 667, 668, 669, 672, 674, 685, 694, 728, 771, 774, 775, 776, 790, 799, 839, 858, 862, 870, 913, 917, 988, 1001, 1012, 1038, 1051, 1140, 1146, 1167, 1181, 1182, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1213, 1232, 1236, 1237, 1238, 1239, 1242, 1244, 1255, 1264, 1300, 1317, 1318, 1321], "leq": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "less": [147, 224, 318, 471, 501, 548, 549, 677, 799, 844, 913, 1247, 1331], "letter": [196, 301, 312, 318, 461, 649, 657, 659, 661, 672, 692, 747, 799, 832, 893, 904, 913, 919, 1219, 1227, 1229, 1231, 1242, 1262, 1323], "level": [10, 39, 40, 41, 44, 48, 130, 147, 150, 151, 152, 202, 228, 239, 265, 270, 318, 322, 467, 799, 811, 872, 913, 1275, 1300, 1328], "lexic": [62, 919, 985], "lf": [45, 46, 47, 48, 53, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 855, 856, 857, 858, 859, 860, 861, 863, 864, 866, 868, 869, 870, 871, 873, 874, 875, 876, 877, 879, 880, 881, 882, 883, 885, 886, 887, 891, 895, 913, 1317, 1328, 1331], "lf1": [778, 872, 913, 1313, 1315, 1329], "lf2": [778, 872, 913, 1313, 1315, 1329], "lf3": [913, 1313], "lf4": [913, 1313], "lf5": 913, "lf6": 913, "lf_other": [885, 913], "lib": [799, 1275, 1300], "librari": [1, 103, 135, 138, 549, 799, 917, 1331], "life": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "lifetim": [172, 810, 1315], "light": [39, 318], "like": [34, 36, 38, 40, 41, 42, 43, 44, 57, 121, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 188, 209, 216, 218, 223, 253, 258, 275, 276, 318, 321, 405, 411, 473, 513, 549, 567, 601, 656, 680, 681, 712, 795, 799, 816, 821, 826, 839, 913, 917, 1009, 1118, 1177, 1226, 1289, 1300, 1305], "limit": [10, 11, 48, 135, 136, 169, 199, 318, 370, 466, 472, 799, 834, 913, 1071, 1300, 1318, 1327], "line": [10, 20, 39, 133, 134, 138, 147, 207, 216, 218, 318, 321, 656, 1226, 1300, 1305], "line_termin": [36, 45, 318, 913], "linear": [187, 215, 245, 310, 318, 485, 486, 508, 553, 599, 621, 622, 729, 730, 772, 799, 825, 842, 859, 902, 913, 1003, 1087, 1088, 1113, 1176, 1192, 1300], "lineitem": [129, 134, 136], "list": [1, 13, 38, 39, 50, 51, 53, 56, 57, 59, 65, 79, 95, 120, 122, 123, 124, 126, 127, 129, 131, 133, 134, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 161, 162, 163, 167, 184, 189, 193, 195, 196, 200, 206, 208, 209, 213, 221, 238, 241, 250, 251, 252, 253, 256, 264, 271, 272, 280, 282, 283, 284, 286, 292, 297, 298, 318, 328, 355, 366, 367, 368, 403, 410, 463, 469, 474, 483, 491, 549, 550, 562, 563, 591, 598, 604, 607, 612, 613, 615, 617, 619, 621, 624, 626, 628, 643, 644, 655, 657, 659, 661, 675, 695, 697, 698, 705, 724, 726, 729, 740, 741, 743, 744, 746, 754, 756, 759, 761, 779, 781, 787, 795, 799, 823, 830, 832, 835, 838, 839, 864, 871, 877, 878, 883, 885, 889, 890, 913, 918, 919, 950, 961, 962, 963, 988, 1002, 1008, 1061, 1067, 1072, 1076, 1079, 1085, 1086, 1094, 1154, 1175, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1219, 1225, 1227, 1229, 1231, 1242, 1245, 1280, 1283, 1300, 1309, 1314, 1318, 1320, 1330, 1331], "list_of_seri": 761, "listtostructwidthstrategi": [541, 1146], "lit": [1, 329, 371, 487, 558, 574, 660, 728, 729, 735, 749, 771, 774, 790, 799, 1071, 1300], "liter": [15, 16, 20, 38, 135, 143, 145, 147, 150, 151, 152, 166, 167, 168, 238, 256, 257, 261, 287, 292, 293, 318, 329, 371, 392, 414, 455, 456, 464, 471, 476, 478, 487, 501, 548, 558, 570, 572, 585, 586, 596, 605, 606, 648, 649, 650, 659, 660, 661, 670, 671, 672, 699, 700, 708, 717, 719, 721, 727, 728, 729, 730, 738, 739, 742, 755, 759, 763, 765, 768, 777, 781, 783, 785, 799, 834, 864, 865, 868, 880, 883, 884, 913, 919, 965, 990, 1012, 1059, 1069, 1089, 1166, 1181, 1182, 1200, 1202, 1205, 1218, 1219, 1220, 1229, 1230, 1231, 1240, 1241, 1242, 1300, 1323], "littl": [252, 318], "lmn": 919, "ln": [457, 458, 459, 460, 799, 1062, 1063, 1064, 1065, 1300, 1321], "ln_a": 1322, "load": [3, 5, 6, 123, 125, 135, 137, 138, 144, 148, 149, 166, 168, 318, 799, 811, 913, 917, 1331], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 138, "load_workbook": 138, "loader": [280, 318], "lobster": [660, 1230], "loc": [318, 322], "local": [4, 38, 135, 137, 148, 149, 152, 318, 449, 593, 594, 799, 983, 984, 1014, 1015, 1038, 1041, 1051, 1171, 1172, 1300, 1310], "localhost": 135, "localis": [436, 449, 1051], "locat": [39, 145, 147, 150, 152, 197, 248, 278, 284, 318, 633, 799, 878, 913, 1068, 1076, 1200, 1201, 1300], "lock": 169, "log": [29, 52, 387, 454, 546, 572, 596, 707, 799, 1057, 1300, 1321], "log10": [799, 1300, 1321], "log10_a": 1322, "log16_a": 1322, "log1p": [799, 1300, 1321], "log1p_a": 1322, "log2": 1321, "logarithm": [544, 545, 546, 799, 1149, 1150, 1151, 1300, 1322], "logic": [58, 228, 304, 318, 321, 322, 330, 332, 405, 550, 705, 716, 717, 718, 719, 761, 799, 826, 831, 843, 866, 896, 913, 926, 927, 1154, 1281, 1283, 1300, 1305], "london": [415, 419, 435, 1013, 1017, 1037], "london_timezon": [435, 1037], "london_to_amsterdam": [435, 1037], "long": [196, 234, 243, 285, 286, 318, 832, 853, 879, 913], "longer": [133, 134, 147], "longest": 541, "look": [10, 209, 318, 371, 541, 839, 913, 965], "lookup": 795, "loop": [550, 799], "lose": [412, 1010], "lossi": [133, 134, 147], "love": [649, 672, 1219, 1242], "low": [17, 135, 392, 598, 799, 1175, 1300], "low_memori": [133, 134, 143, 145, 147, 151, 152], "lower": [147, 187, 209, 245, 310, 318, 392, 487, 547, 575, 599, 603, 621, 622, 721, 740, 741, 743, 744, 772, 786, 787, 799, 825, 839, 859, 902, 913, 990, 1003, 1089, 1152, 1176, 1179, 1192, 1288, 1300, 1318, 1321], "lower_bound": [209, 318, 392, 487, 799, 839, 913, 990, 1089, 1288, 1300], "lowercas": [581, 690, 692, 1260, 1262, 1323], "lowest": [547, 799], "lru_cach": [228, 318, 550, 799, 1154, 1300], "lst": 162, "lt": [155, 467, 714, 799, 1300], "ltrim": 1321, "lyric": [649, 672, 1219, 1242], "lz4": [40, 41, 44, 46, 48, 318, 913], "lzo": [44, 48, 318, 913], "m": [65, 67, 223, 318, 411, 412, 414, 419, 420, 438, 440, 441, 452, 656, 684, 686, 687, 691, 742, 743, 744, 745, 751, 843, 913, 919, 1009, 1010, 1012, 1017, 1018, 1040, 1042, 1043, 1054, 1226, 1254, 1256, 1257, 1261, 1313, 1323, 1324], "m_2": [641, 799, 1212, 1300], "m_3": [641, 799, 1212, 1300], "m_i": [641, 799, 1212, 1300], "machin": 1331, "maco": 155, "made": [39, 135, 318, 441, 1043], "mai": [1, 31, 32, 33, 38, 44, 45, 46, 47, 48, 56, 57, 58, 66, 68, 120, 122, 123, 124, 126, 130, 131, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 156, 158, 160, 161, 163, 164, 165, 166, 167, 168, 187, 188, 195, 197, 209, 224, 225, 228, 250, 258, 265, 275, 277, 280, 286, 287, 288, 318, 321, 322, 402, 403, 405, 410, 411, 412, 423, 432, 436, 438, 449, 461, 482, 516, 541, 549, 550, 561, 564, 598, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 659, 661, 664, 666, 671, 726, 728, 735, 736, 740, 741, 743, 744, 749, 773, 775, 776, 786, 787, 799, 820, 821, 825, 826, 831, 839, 844, 845, 849, 862, 866, 872, 880, 886, 887, 896, 913, 984, 985, 1001, 1002, 1003, 1008, 1009, 1010, 1021, 1034, 1038, 1040, 1051, 1061, 1068, 1085, 1121, 1154, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1229, 1231, 1234, 1236, 1279, 1282, 1284, 1300, 1305, 1331], "main": [155, 821, 913], "maintain": [45, 46, 47, 48, 264, 318, 368, 542, 633, 644, 709, 724, 799, 825, 871, 913, 963, 1147, 1201, 1286, 1300], "maintain_ord": [45, 46, 47, 48, 208, 241, 243, 264, 283, 288, 298, 300, 302, 305, 306, 307, 308, 309, 310, 311, 318, 328, 368, 387, 474, 477, 542, 550, 644, 707, 709, 724, 799, 821, 831, 838, 858, 869, 871, 877, 890, 892, 894, 897, 898, 899, 900, 901, 902, 903, 913, 963, 1147, 1286, 1300], "major": [138, 275, 318], "make": [39, 58, 79, 120, 125, 133, 134, 137, 138, 139, 141, 145, 148, 235, 239, 246, 276, 288, 318, 459, 460, 482, 581, 582, 591, 604, 676, 799, 854, 913, 917, 1064, 1065, 1085, 1246, 1281, 1300], "man": [673, 1243], "manag": [49, 87, 88, 810, 811, 1315, 1328], "mandatori": [39, 318], "mango": [653, 678, 1223, 1248], "mani": [135, 136, 152, 197, 318, 659, 661, 672, 1068, 1229, 1231, 1242, 1300, 1304], "manner": 135, "many_to_mani": [223, 318, 843, 913], "many_to_on": [223, 318, 843, 913], "map": [79, 122, 123, 133, 134, 135, 136, 139, 140, 145, 146, 147, 150, 163, 180, 183, 201, 221, 228, 247, 251, 252, 253, 255, 271, 318, 329, 436, 449, 549, 550, 574, 576, 577, 579, 581, 582, 605, 606, 672, 712, 760, 799, 817, 860, 863, 913, 918, 919, 1003, 1038, 1051, 1154, 1181, 1182, 1242, 1289, 1300, 1310, 1312, 1313, 1328], "map_": 107, "map_batch": [799, 913], "map_el": [98, 228, 318, 549, 715, 799, 1300], "map_field": [578, 580], "map_row": 318, "mapelementsstrategi": [550, 799], "mapping_strategi": [591, 799], "march": [438, 1040], "mariadb": 136, "mark": [39, 130, 318, 388, 799, 981, 1300], "mark_area": [1300, 1305], "mark_attr": [318, 321, 1300, 1305], "mark_bar": [318, 321, 1300, 1305], "mark_lin": [318, 321], "mark_point": [318, 321], "markdown": 20, "marker": [39, 318], "mask": [152, 216, 218, 318, 372, 488, 490, 493, 498, 593, 594, 648, 651, 660, 799, 966, 1072, 1089, 1090, 1093, 1096, 1102, 1171, 1172, 1202, 1218, 1221, 1230, 1291, 1300], "mass": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "massag": [234, 285, 318, 853, 879, 913], "match": [38, 39, 58, 65, 109, 120, 122, 123, 124, 126, 133, 135, 142, 143, 145, 151, 152, 156, 157, 158, 159, 180, 199, 223, 224, 251, 287, 318, 557, 558, 559, 605, 606, 623, 648, 649, 650, 653, 656, 657, 659, 660, 661, 664, 665, 670, 671, 672, 678, 684, 686, 687, 789, 795, 799, 817, 834, 843, 844, 880, 913, 919, 1060, 1181, 1182, 1193, 1218, 1219, 1220, 1223, 1226, 1227, 1229, 1230, 1231, 1234, 1235, 1240, 1241, 1242, 1248, 1254, 1256, 1257, 1300, 1323], "matches_overlap": [659, 661, 1231], "matches_supertyp": [199, 318, 834, 913], "materi": [228, 253, 304, 318, 820, 858, 896, 906, 913, 919, 1154, 1300], "materialis": [221, 222, 251, 252, 318], "math": [1, 10, 54, 243, 318, 404, 799, 992, 994, 1210, 1273, 1300, 1321, 1325, 1327], "mathemat": [708, 746, 799, 1321], "mathshortcut": [1, 54], "matplotlib": [155, 565, 858, 869, 913], "matter": [209, 221, 250, 252, 253, 272, 318, 611, 680, 681, 799, 839, 862, 913], "max": [25, 39, 44, 48, 130, 187, 199, 208, 230, 243, 250, 318, 322, 398, 466, 541, 549, 591, 601, 605, 606, 611, 613, 614, 634, 677, 728, 740, 743, 763, 779, 799, 825, 834, 838, 862, 913, 997, 1003, 1071, 1146, 1177, 1188, 1203, 1247, 1300, 1309, 1318, 1321], "max_a": [250, 318, 611, 799, 862, 913], "max_binary_s": 135, "max_col": [161, 163], "max_colname_length": [207, 318], "max_color": [39, 318], "max_data_s": 167, "max_elem": 1318, "max_horizont": [318, 762], "max_items_per_column": [207, 318], "max_level": 130, "max_siz": [162, 163, 165, 167, 1331], "max_text_s": 135, "max_valu": 1331, "max_width": [541, 1146], "maxim": [305, 341, 799, 897, 936, 1300], "maximum": [10, 26, 36, 44, 45, 48, 66, 123, 126, 133, 134, 135, 138, 142, 143, 144, 147, 151, 153, 161, 162, 163, 165, 167, 207, 209, 229, 230, 318, 348, 506, 551, 583, 593, 601, 662, 664, 667, 674, 685, 762, 763, 799, 839, 850, 913, 943, 1022, 1111, 1155, 1163, 1171, 1177, 1232, 1234, 1237, 1244, 1255, 1300, 1317], "mb": [195, 318, 375, 1061, 1300], "me": [649, 672, 692, 1219, 1242, 1262], "mean": [44, 48, 133, 134, 139, 145, 147, 150, 187, 199, 208, 209, 224, 232, 243, 250, 288, 297, 318, 432, 436, 449, 463, 466, 471, 611, 614, 615, 616, 618, 620, 622, 625, 627, 629, 641, 647, 656, 663, 740, 741, 743, 744, 745, 765, 786, 787, 789, 799, 825, 834, 838, 839, 844, 849, 862, 889, 913, 1003, 1034, 1038, 1051, 1067, 1071, 1189, 1212, 1217, 1226, 1233, 1300, 1317, 1318], "mean_horizont": [318, 764], "measur": [234, 285, 318, 322, 853, 879, 913], "measure_a": [318, 322], "measure_b": [318, 322], "median": [187, 243, 318, 466, 617, 618, 799, 825, 885, 913, 1003, 1190, 1300, 1321], "mediat": 1328, "medium": [39, 318], "megan": [235, 318, 854, 913], "melt": [285, 318, 879, 913], "member": [209, 318, 839, 913, 1094, 1300], "membership": [350, 509, 945, 1114], "memori": [14, 44, 48, 56, 57, 58, 120, 121, 124, 125, 126, 133, 134, 135, 137, 138, 139, 143, 145, 147, 148, 150, 151, 152, 176, 197, 228, 252, 253, 262, 276, 304, 318, 591, 602, 636, 799, 820, 821, 888, 913, 1068, 1154, 1178, 1206, 1207, 1281, 1300], "memory_map": [139, 145, 150], "memory_resourc": 888, "merg": [38, 223, 224, 235, 318, 843, 844, 854, 913], "merge_sort": [318, 913], "messi": [656, 658, 1226, 1228], "met": 789, "meta": [89, 405, 654, 799, 1224], "metadata": [0, 149, 811], "method": [4, 31, 32, 33, 34, 37, 38, 39, 40, 41, 49, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 119, 121, 131, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 153, 160, 163, 167, 172, 174, 183, 187, 188, 191, 192, 197, 204, 208, 215, 221, 228, 239, 245, 251, 252, 253, 261, 283, 292, 299, 304, 310, 318, 327, 330, 331, 362, 392, 405, 438, 441, 455, 456, 464, 471, 473, 476, 478, 485, 501, 534, 548, 550, 568, 570, 572, 574, 575, 577, 579, 581, 582, 585, 586, 587, 590, 596, 599, 601, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 635, 649, 659, 661, 672, 680, 681, 682, 683, 688, 694, 700, 708, 710, 715, 731, 761, 772, 791, 792, 794, 795, 799, 800, 801, 804, 805, 806, 807, 808, 811, 821, 825, 826, 828, 829, 842, 859, 868, 877, 883, 888, 891, 896, 902, 913, 918, 921, 928, 957, 990, 1003, 1040, 1043, 1058, 1059, 1068, 1069, 1078, 1080, 1087, 1106, 1139, 1153, 1154, 1165, 1166, 1176, 1177, 1192, 1205, 1219, 1229, 1231, 1242, 1258, 1264, 1283, 1292, 1294, 1296, 1300, 1301, 1304, 1306, 1307, 1308, 1310, 1314], "metric": 135, "micro": [437, 1039], "microsecond": [65, 67, 209, 221, 224, 250, 252, 253, 272, 288, 318, 432, 436, 441, 444, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 742, 743, 744, 745, 785, 786, 787, 799, 839, 844, 858, 862, 913, 919, 1034, 1038, 1046, 1051, 1063, 1300, 1324], "microsoft": [39, 318], "mid_color": [39, 318], "midnight": 80, "midpoint": [187, 245, 310, 318, 599, 621, 622, 772, 799, 825, 859, 902, 913, 1003, 1176, 1192, 1300], "might": [133, 134, 147, 169, 243, 276, 285, 318, 550, 710, 799, 871, 879, 913], "millennia": 1324, "millennium": 1324, "milli": [437, 1039], "millisecond": [209, 224, 250, 288, 318, 421, 427, 432, 436, 445, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 919, 1034, 1038, 1047, 1051, 1063, 1300, 1324], "milliseconds_diff": [444, 445, 447], "mimic": 729, "min": [39, 44, 48, 187, 199, 237, 243, 250, 318, 399, 466, 550, 591, 601, 611, 619, 620, 740, 743, 768, 777, 799, 825, 834, 862, 913, 917, 998, 1003, 1071, 1177, 1191, 1300, 1318, 1321, 1324, 1331], "min_a": [250, 318, 611, 799, 862, 913], "min_col": [161, 163], "min_color": [39, 318], "min_elem": 1318, "min_horizont": [318, 767, 777], "min_period": [402, 457, 459, 460, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 775, 776, 799, 1001, 1062, 1064, 1065, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1300], "min_siz": [162, 163, 165, 167, 1331], "min_valu": 1331, "mincol": 161, "minim": [308, 342, 349, 507, 636, 644, 799, 900, 937, 944, 1112, 1158, 1206, 1300], "minimum": [44, 48, 161, 162, 163, 165, 167, 202, 236, 237, 318, 457, 459, 460, 569, 584, 594, 601, 767, 768, 799, 855, 913, 1028, 1062, 1064, 1065, 1164, 1172, 1177, 1300, 1317, 1331], "minu": [432, 587, 799, 1034], "minut": [209, 224, 250, 288, 318, 421, 424, 426, 431, 432, 436, 437, 446, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 742, 743, 744, 745, 785, 786, 787, 799, 839, 844, 862, 913, 919, 1034, 1038, 1048, 1051, 1063, 1300, 1324], "minutes_diff": 446, "misc": 1315, "miscellan": 811, "mismatch": [58, 112, 143, 151, 156, 158], "miss": [58, 133, 134, 147, 198, 204, 318, 370, 457, 459, 460, 465, 472, 494, 495, 541, 799, 833, 913, 1062, 1064, 1065, 1070, 1300], "missing_utf8_is_empty_str": [133, 134, 147], "mix": [11, 224, 276, 318, 728, 778, 844, 872, 913, 919, 1003, 1300], "mixin": 1, "mlnm": 425, "mm": [39, 318], "mn": 1323, "mno": [16, 20], "mnop": 1323, "mo": 745, "mocha": 919, "mod": [799, 1321], "mode": [37, 38, 45, 46, 47, 48, 56, 57, 156, 158, 243, 265, 318, 657, 771, 774, 790, 799, 820, 821, 831, 913, 1227, 1300, 1309, 1310, 1328], "model": [280, 318], "modifi": [133, 134, 147, 169, 172, 197, 213, 220, 221, 290, 318, 344, 435, 452, 648, 656, 657, 660, 670, 671, 690, 692, 693, 799, 928, 1037, 1054, 1068, 1218, 1226, 1227, 1230, 1240, 1241, 1260, 1262, 1263, 1300], "modul": [91, 99, 138, 798, 919, 1331], "modulu": [570, 799], "moment": [44, 185, 318, 499, 641, 799, 1104, 1212, 1300], "mon": [318, 321, 1324], "mondai": [209, 318, 410, 449, 451, 726, 839, 913, 1008, 1051, 1053], "monkei": [668, 669, 1238, 1239], "month": [209, 224, 250, 288, 318, 418, 429, 430, 432, 436, 438, 441, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 739, 740, 741, 742, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 1016, 1031, 1032, 1034, 1038, 1040, 1043, 1051, 1063, 1300, 1324], "month_nam": [438, 441], "monthbegin": [430, 1032], "monthend": [429, 1031], "moos": 919, "more": [20, 39, 44, 48, 50, 58, 87, 88, 117, 120, 121, 122, 123, 124, 125, 126, 135, 136, 137, 138, 142, 143, 144, 145, 148, 149, 151, 156, 158, 163, 172, 174, 185, 187, 191, 200, 220, 221, 228, 234, 239, 251, 252, 254, 265, 275, 276, 280, 283, 285, 304, 318, 322, 331, 368, 467, 471, 479, 499, 529, 542, 546, 549, 550, 590, 591, 632, 641, 657, 666, 684, 686, 687, 709, 720, 732, 748, 754, 757, 764, 766, 769, 770, 779, 789, 795, 799, 825, 828, 829, 835, 853, 872, 877, 879, 888, 913, 917, 919, 921, 963, 984, 1003, 1081, 1082, 1104, 1134, 1147, 1154, 1199, 1212, 1227, 1236, 1254, 1256, 1257, 1279, 1281, 1286, 1300, 1315, 1316, 1326, 1329, 1330, 1331], "more_bi": [241, 264, 318, 644, 799, 871, 913], "more_column": [196, 284, 318, 461, 747, 799, 832, 878, 913, 919], "more_expr": [591, 724, 727, 728, 729, 730, 799], "more_nam": [695, 795], "most": [39, 120, 133, 134, 136, 147, 156, 157, 158, 159, 276, 318, 380, 381, 562, 571, 592, 606, 677, 799, 974, 975, 1159, 1170, 1182, 1247, 1281, 1300, 1312, 1328], "mostli": [270, 318, 467, 799], "move": [18, 243, 253, 318, 410, 457, 458, 459, 460, 613, 615, 619, 626, 799, 1008, 1062, 1063, 1064, 1065, 1188, 1189, 1191, 1195, 1300], "mr": 888, "mssql": [37, 318], "much": [228, 286, 304, 318, 402, 516, 550, 666, 667, 761, 799, 896, 1001, 1121, 1154, 1236, 1237, 1300], "mul": 799, "multi": [8, 39, 133, 134, 280, 318, 461, 656, 799, 1226], "multi_fram": [39, 318], "multicolselector": 177, "multiindexselector": [177, 923], "multipl": [39, 56, 57, 58, 104, 133, 134, 138, 144, 147, 150, 151, 152, 161, 163, 167, 189, 195, 197, 200, 208, 209, 213, 222, 225, 241, 243, 253, 256, 259, 264, 287, 292, 297, 318, 387, 516, 549, 555, 562, 571, 572, 591, 605, 607, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 644, 695, 707, 724, 732, 749, 760, 762, 767, 773, 779, 782, 789, 795, 799, 820, 821, 827, 835, 838, 839, 845, 864, 867, 871, 880, 883, 889, 896, 913, 928, 958, 1061, 1068, 1121, 1141, 1159, 1181, 1183, 1214, 1300, 1313, 1318], "multipli": [549, 612, 613, 615, 617, 619, 621, 624, 626, 628, 699, 799, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1300], "multithread": [264, 318, 644, 724, 799, 871, 913, 958, 1141, 1214, 1300], "must": [39, 68, 121, 122, 133, 137, 145, 148, 149, 152, 153, 187, 196, 209, 224, 225, 235, 243, 250, 251, 318, 403, 541, 550, 565, 598, 605, 606, 611, 614, 616, 618, 620, 622, 625, 627, 629, 672, 728, 740, 741, 789, 799, 825, 832, 839, 844, 845, 849, 854, 862, 869, 888, 913, 917, 1002, 1003, 1175, 1181, 1182, 1242, 1300], "mutual": [251, 318], "my": [149, 153], "my_column": 896, "my_column_": [282, 318], "my_column_0": [282, 318], "my_column_1": [282, 318], "my_column_2": [282, 318], "my_custom_aggreg": 761, "my_fil": 139, "my_holidai": [410, 726, 1008], "my_larger_than_ram_fil": [45, 46, 47, 48, 913], "my_long_fil": 147, "my_struct": 781, "mydf": 147, "myrol": 136, "mysql": 136, "n": [1, 12, 13, 17, 25, 36, 43, 45, 51, 52, 53, 54, 65, 67, 129, 133, 134, 138, 143, 147, 163, 181, 197, 203, 209, 211, 221, 222, 227, 228, 252, 253, 254, 261, 266, 269, 272, 274, 289, 301, 303, 312, 318, 334, 362, 367, 375, 386, 387, 402, 406, 410, 412, 414, 420, 440, 452, 458, 464, 467, 475, 481, 503, 511, 517, 519, 529, 530, 534, 537, 539, 541, 543, 592, 595, 604, 624, 625, 628, 629, 632, 635, 641, 646, 662, 666, 667, 670, 671, 676, 677, 679, 680, 685, 687, 702, 706, 707, 708, 712, 713, 715, 731, 733, 742, 743, 744, 745, 751, 753, 771, 774, 775, 776, 780, 784, 788, 790, 799, 818, 837, 839, 840, 848, 868, 873, 875, 881, 893, 895, 904, 913, 919, 957, 962, 969, 980, 989, 1001, 1004, 1008, 1010, 1012, 1018, 1042, 1054, 1063, 1068, 1069, 1077, 1084, 1108, 1116, 1122, 1124, 1134, 1135, 1139, 1144, 1146, 1170, 1194, 1196, 1199, 1205, 1212, 1216, 1232, 1236, 1237, 1240, 1241, 1246, 1247, 1255, 1257, 1272, 1278, 1285, 1289, 1290, 1300, 1312, 1313, 1320, 1323, 1324, 1326, 1328, 1331], "n0": [367, 541], "n00": [962, 1146], "n01": [962, 1146], "n02": [962, 1146], "n1": [367, 541], "n2": [1, 367], "n3": 1, "n_1": [467, 799], "n_2": [467, 799], "n_3": [467, 799], "n_bar": 1317, "n_bit": 1323, "n_byte": [375, 666, 667, 1323], "n_char": [666, 667, 1323], "n_chunk": [318, 928, 1068, 1178, 1300], "n_elem": 1318, "n_even": 919, "n_field_strategi": [541, 1146], "n_film": 1309, "n_foo_uniqu": 1317, "n_kilobyt": 375, "n_row": [131, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 222, 318, 913], "n_thread": [133, 134], "n_uniqu": [318, 334, 799, 1300], "na": [277, 318, 678, 1282, 1300], "naiv": [414, 415, 687, 1012, 1013, 1257], "name": [1, 18, 22, 24, 32, 34, 36, 37, 39, 45, 51, 52, 53, 54, 58, 79, 96, 120, 122, 123, 124, 125, 126, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 149, 150, 151, 152, 158, 159, 160, 161, 163, 166, 167, 168, 179, 180, 183, 184, 189, 190, 191, 192, 196, 200, 201, 204, 205, 207, 208, 219, 220, 221, 223, 224, 225, 228, 230, 232, 234, 235, 237, 241, 243, 247, 251, 252, 253, 255, 256, 257, 264, 265, 268, 271, 273, 275, 276, 279, 280, 281, 282, 283, 284, 285, 286, 287, 292, 293, 294, 295, 296, 297, 303, 318, 322, 329, 367, 371, 372, 374, 376, 387, 392, 403, 438, 441, 461, 467, 487, 494, 495, 496, 497, 541, 550, 555, 559, 561, 563, 567, 591, 598, 608, 644, 657, 658, 670, 671, 672, 695, 697, 699, 707, 712, 716, 717, 718, 719, 720, 722, 723, 724, 727, 728, 729, 730, 731, 732, 733, 734, 737, 738, 747, 748, 753, 754, 757, 762, 763, 764, 765, 766, 767, 768, 769, 772, 775, 776, 777, 778, 780, 781, 782, 783, 784, 788, 789, 795, 799, 815, 817, 822, 823, 827, 828, 829, 832, 835, 838, 843, 844, 845, 853, 854, 860, 863, 864, 865, 871, 872, 876, 877, 878, 879, 880, 883, 884, 885, 886, 887, 889, 895, 913, 917, 918, 919, 925, 962, 989, 1002, 1040, 1043, 1060, 1146, 1175, 1180, 1226, 1227, 1228, 1240, 1241, 1265, 1268, 1276, 1277, 1282, 1289, 1300, 1305, 1310, 1311, 1312, 1313, 1314, 1315, 1327, 1328, 1331], "name_gener": [282, 318], "named_agg": [297, 889], "named_bi": [208, 318, 838, 913], "named_expr": [256, 257, 292, 293, 318, 699, 777, 781, 864, 865, 883, 884, 913], "named_fram": [1313, 1328], "nameless": 125, "namespac": [1, 135, 317, 318, 321, 695, 778, 798, 811, 911, 912, 1300, 1305, 1331], "nan": [125, 163, 176, 191, 198, 276, 277, 318, 408, 409, 455, 456, 465, 476, 478, 485, 494, 495, 496, 497, 501, 548, 551, 569, 583, 584, 585, 586, 612, 638, 708, 731, 799, 828, 833, 913, 931, 935, 1006, 1007, 1070, 1097, 1098, 1163, 1164, 1187, 1209, 1281, 1282, 1300, 1331], "nan_as_nul": 176, "nan_max": [799, 1300], "nan_min": [799, 1300], "nan_to_nul": [125, 318, 913, 1300], "nana": 1323, "nanmax": [583, 584, 799, 1163, 1164, 1300], "nanosecond": [80, 209, 224, 250, 288, 318, 432, 436, 437, 447, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1039, 1049, 1051, 1063, 1300, 1324], "nansum": [612, 799, 1187, 1300], "nativ": [10, 37, 133, 135, 138, 139, 141, 145, 221, 228, 252, 253, 272, 276, 304, 318, 550, 761, 778, 799, 805, 872, 896, 913, 1154, 1281, 1300, 1304, 1328, 1331], "natur": [546, 799, 1151, 1300, 1316, 1322], "ndarrai": [124, 174, 200, 276, 318, 474, 633, 799, 835, 913, 921, 1076, 1200, 1201, 1281, 1300], "ndjson": [47, 913], "ne": [586, 799, 1166, 1300], "ne_miss": [200, 318, 799, 835, 913, 1059, 1300], "nearest": [52, 187, 224, 245, 310, 318, 391, 470, 485, 599, 621, 622, 772, 799, 825, 844, 859, 902, 913, 987, 1003, 1075, 1087, 1176, 1192, 1300, 1322], "nearest_pow2": 52, "necessari": [36, 37, 45, 49, 88, 138, 276, 318, 913, 1281, 1300], "need": [58, 90, 99, 127, 133, 134, 136, 145, 147, 150, 152, 209, 250, 253, 262, 318, 321, 541, 611, 636, 670, 671, 672, 688, 745, 771, 774, 790, 799, 839, 862, 913, 1206, 1240, 1241, 1242, 1258, 1300, 1305, 1331], "neg": [13, 64, 65, 66, 67, 133, 134, 139, 141, 145, 154, 211, 227, 250, 261, 263, 269, 295, 318, 362, 534, 535, 595, 596, 611, 635, 642, 662, 674, 685, 799, 862, 868, 870, 886, 887, 913, 919, 957, 1084, 1108, 1139, 1140, 1173, 1205, 1213, 1232, 1244, 1255, 1272, 1300], "negat": [588, 799, 1168, 1300], "neither": [127, 138, 144, 254, 318, 367, 541, 962, 1146], "nest": [49, 127, 130, 164, 165, 195, 318, 811, 1061, 1300, 1328, 1331], "nest_asyncio": 155, "nesting_level": 164, "net": [657, 1227], "netherland": [224, 318, 844, 913], "never": [36, 45, 135, 223, 224, 251, 318, 843, 844, 913], "new": [37, 38, 39, 147, 172, 177, 203, 213, 214, 228, 239, 240, 243, 247, 282, 284, 286, 287, 292, 293, 318, 329, 414, 463, 473, 475, 485, 575, 576, 591, 605, 606, 610, 670, 671, 676, 677, 695, 697, 795, 799, 811, 837, 860, 878, 880, 883, 884, 896, 913, 923, 925, 1012, 1067, 1077, 1167, 1180, 1181, 1182, 1186, 1240, 1241, 1246, 1247, 1265, 1268, 1277, 1300, 1328, 1330], "new_column": [133, 134, 138, 147], "new_dat": 432, "new_df": [287, 318, 880, 913], "new_fil": [34, 36, 40, 41, 44, 318], "new_from_index": 1300, "new_id": [282, 318], "new_lf": [880, 913], "new_tabl": 1330, "new_valu": [735, 736, 749, 773], "new_york": 743, "newli": 50, "newlin": [43, 143, 151, 318], "next": [52, 209, 224, 250, 288, 318, 370, 410, 432, 436, 449, 601, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1008, 1034, 1038, 1051, 1177, 1300], "next_batch": 134, "next_pow2": 52, "nfruit": 685, "nl": [410, 726, 1008], "nnel_id": 127, "no1": 919, "no_default": [204, 318, 605, 606, 672, 799, 1181, 1182, 1242, 1300], "no_optim": [45, 46, 47, 48, 56, 57, 820, 821, 849, 858, 913], "nodataerror": [133, 134, 138, 144, 147], "nodd": [656, 1226], "node": [816, 820, 841, 849, 853, 858, 860, 913], "nodefault": [204, 318, 605, 606, 672, 799, 1181, 1182, 1242, 1300], "non": [4, 5, 36, 38, 39, 45, 50, 65, 66, 125, 154, 179, 186, 222, 234, 250, 256, 257, 261, 281, 282, 285, 287, 292, 293, 318, 370, 386, 387, 392, 396, 397, 410, 435, 472, 487, 541, 549, 550, 556, 591, 592, 605, 606, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 650, 657, 666, 670, 671, 672, 692, 694, 699, 706, 707, 717, 719, 727, 728, 729, 730, 732, 734, 738, 745, 763, 765, 768, 775, 776, 777, 781, 783, 799, 815, 824, 853, 862, 864, 865, 868, 876, 879, 880, 883, 884, 913, 917, 919, 980, 990, 995, 996, 1003, 1008, 1037, 1089, 1146, 1154, 1170, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1205, 1220, 1227, 1236, 1240, 1241, 1262, 1264, 1281, 1285, 1300, 1320, 1328], "non_exist": [435, 1037], "non_numer": [36, 45, 318, 913], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 57, 59, 62, 65, 66, 67, 68, 75, 79, 88, 120, 122, 123, 124, 125, 126, 129, 130, 131, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 174, 175, 181, 186, 187, 191, 192, 198, 199, 200, 202, 204, 207, 209, 210, 215, 219, 223, 224, 226, 228, 231, 234, 239, 240, 243, 250, 251, 254, 258, 261, 263, 264, 270, 271, 273, 275, 276, 277, 280, 282, 283, 284, 285, 286, 287, 288, 299, 303, 318, 330, 332, 333, 345, 346, 347, 354, 355, 367, 370, 392, 396, 397, 398, 401, 403, 408, 409, 417, 432, 435, 441, 456, 457, 458, 459, 460, 461, 464, 465, 466, 472, 479, 480, 482, 485, 486, 487, 494, 495, 496, 497, 502, 504, 505, 512, 518, 520, 522, 529, 530, 531, 532, 533, 535, 541, 549, 550, 561, 564, 565, 566, 568, 573, 586, 587, 588, 589, 591, 592, 598, 601, 602, 605, 606, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 635, 636, 637, 638, 642, 643, 647, 648, 650, 652, 653, 654, 657, 660, 662, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 679, 680, 681, 684, 685, 686, 687, 689, 691, 694, 695, 696, 697, 698, 705, 712, 717, 718, 719, 721, 727, 728, 729, 730, 732, 734, 738, 740, 741, 742, 743, 744, 745, 747, 748, 755, 756, 757, 758, 759, 760, 761, 763, 765, 768, 774, 775, 776, 781, 783, 785, 786, 787, 789, 799, 818, 819, 821, 824, 825, 828, 829, 831, 833, 834, 835, 839, 842, 843, 844, 847, 849, 853, 856, 862, 866, 868, 869, 870, 871, 877, 878, 879, 880, 885, 888, 891, 895, 896, 905, 906, 913, 917, 918, 919, 921, 922, 926, 927, 929, 936, 937, 941, 942, 949, 950, 962, 971, 976, 979, 989, 990, 995, 996, 1002, 1003, 1005, 1006, 1007, 1015, 1022, 1023, 1024, 1028, 1037, 1043, 1057, 1059, 1062, 1063, 1064, 1065, 1069, 1070, 1071, 1073, 1081, 1083, 1085, 1087, 1088, 1089, 1099, 1100, 1103, 1104, 1105, 1107, 1109, 1110, 1113, 1117, 1123, 1125, 1127, 1134, 1135, 1136, 1137, 1138, 1140, 1146, 1154, 1155, 1156, 1157, 1158, 1166, 1169, 1175, 1176, 1177, 1181, 1182, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1199, 1200, 1201, 1202, 1205, 1208, 1209, 1212, 1213, 1216, 1217, 1218, 1220, 1222, 1223, 1224, 1227, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1254, 1255, 1256, 1257, 1259, 1261, 1264, 1267, 1275, 1277, 1278, 1279, 1281, 1282, 1283, 1289, 1290, 1300, 1309, 1311, 1312, 1313, 1315, 1318, 1320, 1324, 1328], "nonexist": [435, 1037], "nor": [138, 144, 254, 318], "normal": [38, 130, 209, 318, 454, 499, 641, 712, 799, 839, 913, 1057, 1104, 1212, 1289, 1300], "normalised_scor": 135, "norowsreturnederror": [251, 318], "not_": [292, 318, 799, 883, 913, 919, 1300], "not_c": [292, 318, 883, 913], "notabl": 135, "notat": [11, 39, 318], "note": [4, 10, 20, 38, 39, 44, 49, 50, 57, 64, 65, 67, 80, 87, 88, 120, 121, 122, 124, 126, 127, 133, 135, 136, 137, 138, 142, 143, 148, 149, 151, 153, 156, 158, 161, 163, 167, 169, 172, 176, 183, 185, 187, 188, 191, 198, 200, 209, 210, 219, 220, 221, 223, 224, 228, 239, 242, 243, 247, 250, 251, 252, 253, 258, 261, 265, 272, 275, 277, 280, 282, 283, 285, 287, 288, 292, 294, 295, 318, 362, 392, 400, 401, 405, 408, 409, 415, 429, 430, 432, 436, 441, 449, 458, 465, 471, 473, 480, 487, 494, 495, 513, 516, 534, 541, 550, 564, 565, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 637, 641, 647, 648, 649, 655, 656, 657, 658, 659, 660, 661, 662, 666, 667, 670, 671, 672, 674, 679, 680, 681, 684, 685, 692, 694, 695, 701, 708, 717, 719, 726, 735, 740, 741, 743, 744, 745, 749, 759, 771, 773, 774, 778, 786, 787, 789, 790, 795, 799, 810, 821, 825, 826, 828, 833, 835, 839, 844, 860, 862, 866, 868, 869, 871, 872, 877, 879, 880, 883, 886, 887, 913, 919, 957, 990, 999, 1000, 1003, 1006, 1007, 1013, 1031, 1032, 1034, 1038, 1043, 1051, 1063, 1070, 1083, 1089, 1118, 1121, 1139, 1154, 1181, 1182, 1186, 1193, 1200, 1202, 1205, 1207, 1212, 1217, 1218, 1219, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1236, 1237, 1240, 1241, 1242, 1244, 1249, 1250, 1251, 1254, 1255, 1262, 1264, 1271, 1282, 1284, 1300, 1309, 1310, 1314, 1315, 1326, 1328], "noth": [20, 656, 665, 1226, 1235], "notic": [135, 200, 318, 835, 913, 1300], "notimplementederror": 176, "now": [50, 138, 250, 276, 318, 558, 862, 913, 1281, 1300], "np": [124, 174, 200, 276, 318, 474, 549, 633, 799, 835, 913, 921, 1076, 1092, 1095, 1097, 1098, 1200, 1201, 1300], "npt": [174, 921], "nr": [301, 312, 893, 904], "nth": [203, 318, 475, 677, 795, 799, 837, 913, 1077, 1247, 1300], "nthe": [656, 1226], "nthose": [656, 1226], "nu": 653, "null": [16, 36, 38, 44, 45, 48, 50, 58, 65, 122, 123, 126, 130, 133, 134, 143, 145, 147, 151, 152, 153, 160, 163, 167, 176, 179, 181, 186, 187, 191, 192, 194, 199, 200, 202, 215, 223, 231, 232, 233, 240, 243, 245, 261, 264, 266, 267, 268, 271, 276, 277, 281, 284, 287, 289, 292, 299, 318, 330, 332, 333, 343, 346, 347, 354, 355, 362, 363, 370, 372, 386, 387, 388, 392, 396, 397, 398, 401, 406, 408, 409, 432, 435, 442, 443, 444, 445, 446, 447, 448, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 472, 479, 485, 486, 494, 495, 496, 497, 502, 504, 505, 511, 512, 515, 516, 518, 520, 521, 522, 530, 531, 532, 533, 534, 536, 541, 549, 550, 573, 586, 587, 588, 589, 592, 602, 606, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 635, 636, 638, 643, 644, 647, 648, 650, 651, 652, 653, 654, 655, 656, 657, 658, 660, 662, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 684, 685, 687, 689, 694, 695, 696, 697, 698, 705, 706, 707, 716, 717, 718, 719, 724, 727, 728, 729, 730, 732, 734, 738, 742, 747, 758, 759, 763, 765, 768, 775, 776, 781, 783, 789, 799, 815, 818, 824, 825, 828, 829, 834, 835, 842, 843, 856, 868, 871, 876, 878, 880, 883, 885, 891, 913, 919, 926, 927, 938, 941, 942, 949, 950, 957, 958, 966, 980, 981, 989, 990, 995, 996, 1004, 1006, 1007, 1037, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1059, 1060, 1062, 1063, 1064, 1065, 1069, 1071, 1072, 1081, 1082, 1087, 1088, 1099, 1100, 1101, 1107, 1109, 1110, 1113, 1116, 1117, 1120, 1121, 1123, 1125, 1126, 1127, 1136, 1138, 1139, 1141, 1146, 1154, 1166, 1169, 1170, 1182, 1185, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1205, 1209, 1214, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1244, 1246, 1247, 1248, 1254, 1255, 1257, 1259, 1264, 1267, 1278, 1281, 1282, 1283, 1285, 1300, 1312, 1316, 1318, 1320, 1324, 1326, 1328, 1329, 1331], "null_behavior": [406, 511, 799, 1004, 1116, 1300], "null_count": [44, 48, 187, 192, 318, 402, 799, 825, 913, 1001, 1003, 1300], "null_equ": [194, 318, 1060, 1300], "null_on_oob": [354, 516, 518, 949, 1121, 1123], "null_prob": [160, 163, 167], "null_valu": [36, 45, 133, 134, 147, 318, 913], "nullabl": [38, 318], "nullbehavior": [406, 511, 799, 1004, 1116, 1300], "nullif": 1321, "nulls_last": [264, 318, 343, 363, 536, 643, 644, 724, 799, 871, 913, 938, 958, 1101, 1141, 1214, 1300], "num": [13, 39, 279, 318, 487, 799, 1089, 1300], "num_row": 176, "number": [10, 11, 12, 13, 14, 17, 25, 36, 37, 39, 44, 45, 48, 49, 50, 64, 65, 66, 80, 88, 109, 120, 122, 123, 124, 126, 129, 130, 133, 134, 135, 136, 138, 142, 143, 144, 145, 147, 150, 151, 152, 154, 161, 163, 166, 168, 169, 170, 179, 181, 186, 195, 196, 198, 199, 207, 211, 212, 221, 222, 227, 238, 239, 250, 254, 261, 266, 269, 281, 286, 289, 291, 299, 301, 303, 312, 318, 344, 360, 362, 367, 370, 378, 379, 380, 381, 383, 384, 386, 387, 396, 402, 403, 406, 410, 413, 421, 423, 425, 427, 428, 437, 450, 451, 453, 457, 458, 459, 460, 464, 465, 466, 472, 481, 494, 495, 502, 503, 511, 519, 522, 527, 529, 534, 537, 539, 541, 543, 591, 595, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 635, 637, 646, 662, 664, 666, 667, 670, 674, 676, 677, 685, 688, 702, 706, 707, 713, 726, 731, 732, 733, 745, 753, 758, 775, 776, 780, 784, 788, 799, 815, 818, 824, 832, 833, 834, 840, 848, 858, 868, 873, 875, 876, 881, 882, 891, 893, 895, 904, 913, 918, 955, 957, 962, 972, 973, 974, 975, 977, 978, 980, 989, 995, 1001, 1002, 1004, 1008, 1011, 1019, 1021, 1026, 1029, 1030, 1039, 1052, 1053, 1055, 1061, 1062, 1063, 1064, 1065, 1069, 1070, 1071, 1084, 1107, 1108, 1116, 1124, 1127, 1132, 1134, 1139, 1144, 1146, 1160, 1161, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1197, 1198, 1199, 1205, 1208, 1216, 1232, 1234, 1236, 1237, 1240, 1244, 1246, 1247, 1255, 1258, 1272, 1285, 1290, 1300, 1316, 1319, 1322, 1331], "number_of_two": [351, 510], "numbers_decim": 688, "numer": [10, 16, 36, 39, 45, 137, 148, 180, 189, 224, 276, 277, 285, 286, 318, 327, 388, 392, 471, 487, 546, 570, 572, 596, 604, 636, 638, 658, 694, 700, 708, 799, 811, 817, 827, 844, 879, 913, 919, 981, 990, 1003, 1089, 1206, 1209, 1228, 1264, 1281, 1300, 1322, 1331], "numeric_dtyp": 1331, "numericliter": [392, 799, 990, 1300], "numpi": [94, 124, 155, 174, 185, 221, 252, 253, 272, 276, 277, 318, 549, 583, 584, 612, 799, 913, 921, 1092, 1095, 1097, 1098, 1163, 1164, 1187, 1281, 1282, 1300], "nworld": 679, "o": [139, 150, 375, 386, 387, 402, 655, 706, 707, 799, 969, 980, 1001, 1225, 1249, 1285, 1300, 1313], "oauth": 149, "obj": 919, "object": [34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 58, 79, 97, 121, 122, 127, 130, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 161, 163, 164, 175, 176, 183, 188, 208, 209, 224, 226, 241, 250, 253, 258, 265, 275, 276, 277, 318, 405, 564, 740, 741, 743, 744, 759, 778, 786, 787, 799, 811, 820, 826, 839, 844, 847, 862, 872, 910, 913, 919, 922, 1275, 1300, 1310, 1312, 1315, 1328, 1330], "observ": [403, 457, 458, 459, 460, 598, 799, 1002, 1062, 1063, 1064, 1065, 1175, 1300], "obtain": 541, "obvious": 697, "occur": [39, 56, 57, 95, 104, 110, 225, 318, 351, 510, 571, 601, 799, 820, 821, 831, 845, 858, 869, 913, 946, 1115, 1159, 1177, 1281, 1300], "occurr": [482, 490, 493, 712, 799, 1085, 1093, 1096, 1289, 1300], "oct": 1323, "octet_length": 1321, "octob": [441, 1043, 1323], "od": [144, 811], "odbc": [37, 135, 318], "odd": 656, "odi": [659, 661, 1231], "off": [45, 46, 47, 48, 56, 57, 133, 134, 147, 223, 224, 318, 410, 726, 820, 821, 831, 843, 844, 849, 858, 913, 1008], "offer": [242, 318, 595, 799, 857, 913, 1324, 1328], "offic": [39, 318], "offset": [67, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 203, 209, 250, 263, 294, 295, 318, 410, 411, 419, 429, 430, 432, 436, 449, 475, 517, 535, 611, 642, 660, 661, 674, 687, 799, 837, 839, 862, 870, 886, 887, 913, 1008, 1009, 1017, 1031, 1032, 1034, 1038, 1051, 1077, 1122, 1140, 1213, 1230, 1231, 1244, 1257, 1300, 1327], "offset_bi": 745, "often": [136, 172, 209, 250, 318, 351, 510, 604, 611, 799, 839, 862, 913, 946, 1115, 1315, 1328], "ok": 541, "old": [38, 247, 318, 605, 606, 799, 860, 913, 1181, 1182, 1300], "old_tabl": 1330, "older": [44, 48, 318, 913], "oldw": 680, "omit": [27, 123, 127, 138, 144, 161, 172, 239, 253, 275, 280, 318, 740, 743, 755, 756, 786, 787, 919, 1329], "onc": [133, 134, 169, 228, 252, 254, 297, 318, 529, 549, 550, 632, 682, 683, 799, 816, 889, 913, 1134, 1154, 1199, 1252, 1253, 1300, 1313], "one": [20, 36, 37, 39, 45, 50, 101, 120, 122, 123, 124, 125, 126, 133, 134, 138, 142, 143, 144, 147, 151, 166, 168, 172, 180, 188, 191, 199, 200, 207, 208, 209, 221, 225, 226, 234, 243, 250, 251, 252, 258, 259, 261, 276, 279, 285, 298, 318, 328, 362, 403, 405, 466, 467, 471, 474, 477, 479, 534, 541, 546, 564, 574, 575, 577, 579, 581, 582, 591, 610, 611, 635, 643, 656, 657, 658, 672, 695, 740, 743, 761, 779, 789, 795, 799, 817, 826, 828, 829, 834, 835, 838, 839, 845, 853, 862, 866, 867, 868, 879, 885, 890, 913, 928, 957, 962, 1002, 1071, 1081, 1082, 1139, 1146, 1151, 1175, 1186, 1205, 1226, 1227, 1228, 1242, 1265, 1281, 1300, 1315, 1316, 1318, 1322, 1330], "one_to_mani": [223, 318, 843, 913], "one_to_on": [223, 318, 843, 913], "oneormoredatatyp": [39, 161, 318], "ones": 919, "onf": [674, 1244], "onli": [1, 5, 10, 13, 20, 30, 36, 37, 39, 45, 49, 50, 55, 58, 88, 133, 134, 135, 138, 139, 141, 143, 145, 147, 150, 151, 152, 153, 156, 157, 158, 159, 163, 167, 172, 191, 192, 197, 209, 210, 221, 224, 225, 228, 243, 250, 252, 253, 272, 274, 275, 276, 287, 288, 304, 318, 328, 330, 332, 344, 391, 392, 405, 410, 432, 439, 441, 461, 470, 480, 549, 550, 557, 558, 574, 575, 576, 577, 578, 579, 580, 581, 582, 591, 603, 649, 659, 661, 672, 710, 726, 761, 799, 823, 826, 828, 829, 830, 839, 844, 845, 862, 863, 880, 882, 896, 913, 917, 919, 926, 927, 928, 987, 990, 1008, 1034, 1043, 1068, 1075, 1083, 1154, 1179, 1219, 1229, 1231, 1242, 1275, 1278, 1281, 1300, 1309, 1312, 1328, 1329, 1331], "onlin": [197, 318, 1068, 1300], "ont": [659, 661, 1229, 1231], "onto": 163, "oof": [673, 1243, 1318, 1323], "op": [20, 133, 134, 167, 247, 318, 557, 604, 799, 847, 860, 913, 1300], "opaqu": 896, "open": [39, 131, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 188, 318, 405, 799, 826, 913], "openoffic": 144, "openpyxl": [138, 155], "oper": [4, 39, 49, 58, 88, 97, 100, 107, 114, 120, 122, 123, 124, 125, 126, 133, 135, 182, 197, 200, 202, 208, 214, 226, 228, 235, 239, 241, 242, 243, 246, 248, 250, 253, 254, 259, 261, 270, 276, 277, 282, 285, 286, 296, 297, 318, 327, 328, 331, 362, 397, 398, 399, 400, 401, 402, 455, 456, 471, 473, 476, 478, 501, 529, 530, 531, 532, 533, 534, 541, 548, 567, 570, 572, 573, 574, 575, 577, 579, 581, 582, 585, 586, 587, 590, 591, 596, 603, 632, 635, 700, 708, 715, 716, 718, 729, 730, 734, 746, 778, 789, 799, 811, 819, 823, 825, 830, 835, 838, 843, 853, 854, 863, 867, 868, 872, 879, 882, 889, 913, 917, 957, 991, 996, 997, 998, 999, 1000, 1001, 1058, 1059, 1068, 1078, 1080, 1106, 1134, 1135, 1136, 1137, 1138, 1139, 1153, 1165, 1166, 1179, 1199, 1205, 1240, 1275, 1280, 1281, 1282, 1300, 1319, 1327, 1328], "operand": [708, 799], "opp": 919, "oppos": 726, "opposit": [261, 318, 362, 534, 635, 799, 868, 913, 957, 1139, 1205, 1300], "opt": [280, 318], "optim": [45, 46, 47, 48, 56, 57, 145, 147, 150, 151, 152, 221, 226, 242, 246, 252, 283, 318, 816, 820, 821, 831, 849, 858, 869, 877, 886, 887, 896, 913, 986, 1200, 1300], "optimis": [135, 228, 253, 304, 318, 913, 1154, 1202, 1300, 1331], "optimist": 14, "option": [2, 3, 4, 5, 6, 30, 37, 38, 39, 50, 66, 133, 135, 136, 137, 138, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 153, 155, 160, 161, 162, 163, 166, 167, 168, 188, 204, 209, 219, 224, 234, 258, 265, 271, 282, 285, 287, 318, 405, 410, 499, 557, 558, 564, 591, 612, 613, 615, 617, 619, 621, 624, 626, 628, 641, 649, 659, 661, 672, 674, 712, 781, 789, 799, 811, 820, 826, 839, 843, 844, 853, 866, 872, 879, 880, 888, 913, 919, 1008, 1104, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1212, 1219, 1229, 1231, 1242, 1244, 1277, 1289, 1300, 1318, 1323], "optional_memb": [491, 799, 1094, 1300], "or_": 799, "oracl": 136, "orang": [184, 299, 300, 302, 303, 305, 306, 308, 310, 311, 318, 387, 707, 799, 891, 892, 894, 895, 897, 898, 900, 902, 903, 1323], "order": [10, 39, 45, 46, 47, 48, 50, 56, 62, 123, 133, 135, 154, 156, 157, 158, 159, 179, 183, 184, 191, 192, 193, 200, 208, 209, 223, 225, 241, 242, 243, 250, 252, 254, 255, 259, 264, 275, 276, 281, 283, 288, 318, 343, 363, 368, 386, 387, 408, 409, 467, 512, 529, 536, 542, 591, 596, 601, 611, 632, 633, 634, 643, 644, 673, 680, 681, 682, 683, 697, 706, 707, 709, 710, 712, 724, 778, 789, 799, 810, 815, 823, 828, 829, 830, 835, 838, 839, 843, 845, 853, 862, 863, 867, 871, 872, 876, 877, 913, 918, 919, 938, 958, 963, 980, 985, 1006, 1007, 1072, 1101, 1117, 1134, 1141, 1147, 1173, 1177, 1184, 1199, 1201, 1203, 1214, 1243, 1268, 1285, 1286, 1287, 1289, 1300, 1309, 1312, 1318, 1327, 1328, 1331], "order_bi": [591, 799], "ordin": [433, 601, 799, 1035, 1177, 1300, 1329], "ordinal_dai": [418, 451], "org": [20, 40, 41, 121, 135, 136, 139, 141, 174, 175, 176, 185, 318, 565, 869, 913, 921, 922], "orient": [51, 53, 95, 124, 126, 239, 318, 913, 1309], "origin": [50, 133, 134, 147, 191, 192, 200, 283, 318, 408, 409, 435, 436, 449, 467, 512, 550, 574, 591, 603, 604, 605, 606, 607, 609, 650, 656, 665, 722, 723, 799, 828, 829, 835, 877, 913, 1006, 1007, 1037, 1038, 1051, 1072, 1117, 1181, 1182, 1183, 1185, 1220, 1226, 1235, 1300], "orld": 1250, "other": [1, 20, 35, 39, 44, 57, 132, 133, 134, 135, 138, 147, 152, 156, 157, 158, 159, 192, 194, 197, 200, 223, 224, 225, 234, 235, 243, 251, 253, 256, 257, 280, 285, 287, 290, 292, 293, 316, 318, 321, 327, 331, 333, 343, 344, 392, 407, 441, 455, 456, 467, 471, 476, 478, 487, 491, 501, 508, 530, 531, 532, 533, 548, 554, 560, 570, 572, 585, 586, 590, 605, 606, 637, 644, 672, 699, 700, 705, 708, 715, 717, 719, 724, 727, 728, 729, 730, 738, 745, 763, 765, 768, 777, 781, 783, 799, 811, 821, 835, 843, 844, 845, 853, 854, 864, 865, 879, 880, 883, 884, 885, 913, 919, 928, 990, 1005, 1043, 1058, 1059, 1060, 1068, 1078, 1080, 1094, 1106, 1113, 1135, 1136, 1137, 1138, 1153, 1165, 1166, 1181, 1182, 1283, 1291, 1299, 1300, 1305, 1315, 1328], "other_df": [223, 318], "other_lf": [843, 913], "otherwis": [37, 135, 138, 145, 150, 162, 165, 169, 204, 228, 235, 253, 256, 275, 280, 304, 318, 367, 372, 392, 403, 457, 458, 459, 460, 541, 550, 561, 591, 595, 596, 598, 603, 638, 648, 651, 655, 660, 662, 667, 670, 671, 674, 685, 712, 716, 745, 748, 757, 761, 789, 799, 854, 864, 896, 913, 962, 966, 990, 1002, 1062, 1063, 1064, 1065, 1146, 1154, 1173, 1175, 1179, 1200, 1202, 1209, 1218, 1221, 1225, 1230, 1232, 1237, 1240, 1241, 1244, 1255, 1289, 1300, 1320], "our": 177, "out": [8, 14, 37, 45, 46, 47, 48, 102, 127, 152, 155, 200, 250, 253, 318, 354, 372, 516, 518, 648, 651, 660, 789, 835, 862, 913, 949, 966, 1121, 1123, 1218, 1221, 1230, 1326], "outcom": [591, 799], "outer": [50, 58, 287, 318, 880, 913], "outermost": 49, "outlin": 7, "output": [0, 8, 30, 36, 39, 40, 41, 42, 43, 44, 45, 179, 187, 221, 228, 232, 235, 241, 243, 252, 256, 258, 268, 281, 288, 292, 318, 330, 332, 355, 386, 387, 403, 441, 520, 541, 549, 550, 561, 564, 575, 598, 605, 647, 663, 667, 706, 707, 712, 716, 717, 718, 719, 729, 730, 731, 760, 761, 799, 811, 815, 825, 831, 849, 853, 854, 864, 866, 876, 883, 896, 913, 926, 927, 950, 980, 1002, 1043, 1125, 1154, 1175, 1217, 1233, 1237, 1285, 1289, 1300], "output_path": [565, 869, 913], "outsid": [392, 799, 990, 1300], "over": [129, 133, 134, 135, 138, 144, 147, 152, 163, 164, 179, 197, 220, 221, 222, 228, 251, 252, 253, 265, 281, 282, 296, 304, 318, 322, 386, 387, 402, 405, 458, 466, 549, 550, 561, 563, 564, 565, 566, 567, 575, 576, 601, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 706, 707, 735, 736, 749, 760, 761, 773, 778, 799, 815, 820, 872, 876, 888, 896, 910, 913, 919, 980, 1001, 1063, 1068, 1154, 1188, 1189, 1191, 1195, 1285, 1300, 1328], "overflow": [180, 318, 388, 400, 401, 689, 701, 799, 817, 913, 981, 999, 1000, 1259, 1271, 1300], "overhead": [49, 88, 147, 150, 151, 152], "overlap": [650, 657, 659, 661, 1220, 1227, 1229, 1231], "overrid": [1, 39, 120, 122, 123, 124, 125, 126, 133, 135, 136, 138, 142, 143, 144, 151, 160, 161, 167, 169, 318, 913], "overridden": [39, 120, 122, 124, 126, 142, 143, 151, 169, 318, 913], "overview": [318, 799, 811, 913, 1300, 1327, 1331], "overwrit": [14, 37, 38, 120, 122, 123, 124, 126, 130, 133, 134, 142, 143, 147, 151, 176, 287, 318, 329, 699, 799, 880, 913], "overwrite_schema": [38, 318], "ow": 679, "own": [789, 1281, 1300, 1331], "p": [52, 242, 318, 595, 781, 799, 857, 913, 919, 1230, 1232, 1313], "p13dt14h0": 441, "p1dt42": 441, "pa": [38, 120, 153, 318, 778], "pa_tabl": 778, "pacif": [411, 1009], "pack": [239, 318], "packag": [32, 33, 135, 318, 322, 410, 726, 917, 1008], "pad": [668, 669, 694, 1238, 1239, 1264], "pad_end": [669, 1239], "pad_start": [668, 694, 1238, 1264], "page": [44, 48, 139, 145, 150, 152, 318, 799, 811, 913, 1300, 1327], "pair": [120, 122, 123, 124, 126, 142, 143, 151, 247, 318, 860, 913, 1331], "pairwis": [185, 318], "panda": [37, 121, 125, 130, 155, 200, 209, 277, 283, 285, 318, 429, 430, 705, 778, 799, 835, 839, 877, 879, 913, 1031, 1032, 1282, 1283, 1300, 1310, 1312, 1328], "pandas_df": 1328, "pane": [39, 318], "panic": 103, "pap": 1232, "papa": 662, "papai": [662, 1232], "papaya": [662, 674, 685, 1232, 1244, 1255], "parallel": [56, 58, 129, 136, 145, 152, 209, 224, 226, 242, 257, 293, 318, 402, 513, 712, 789, 799, 811, 839, 843, 844, 865, 884, 896, 913, 1001, 1118, 1289, 1300], "parallelis": [228, 304, 318, 1154, 1300], "parallelstrategi": [145, 152], "param": [39, 120, 122, 123, 124, 126, 133, 134, 142, 143, 147, 151, 162, 163, 167, 251, 318, 913], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 56, 57, 58, 59, 62, 65, 66, 67, 68, 75, 79, 89, 95, 104, 120, 121, 122, 123, 124, 125, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 176, 177, 179, 180, 181, 185, 187, 188, 189, 190, 191, 192, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 207, 208, 209, 210, 211, 213, 214, 219, 221, 222, 223, 224, 225, 227, 228, 232, 234, 235, 238, 239, 241, 242, 243, 245, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 264, 265, 266, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 297, 301, 303, 304, 310, 312, 318, 327, 329, 330, 331, 332, 333, 343, 350, 351, 354, 355, 362, 363, 367, 368, 370, 371, 372, 373, 374, 375, 376, 386, 387, 388, 392, 397, 398, 399, 400, 401, 402, 403, 405, 406, 407, 410, 412, 414, 415, 420, 432, 435, 436, 437, 438, 440, 441, 449, 452, 454, 455, 456, 457, 458, 459, 460, 461, 464, 465, 466, 467, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 485, 486, 487, 491, 499, 501, 503, 508, 509, 510, 511, 513, 516, 517, 518, 519, 520, 529, 530, 531, 532, 533, 534, 535, 536, 537, 539, 540, 541, 542, 543, 544, 548, 549, 550, 557, 558, 564, 565, 566, 570, 572, 575, 576, 577, 578, 579, 580, 585, 586, 590, 591, 592, 595, 596, 598, 599, 601, 603, 604, 605, 606, 607, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 637, 641, 642, 643, 644, 646, 647, 648, 649, 650, 651, 652, 653, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 691, 694, 695, 697, 699, 700, 702, 706, 707, 708, 709, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 799, 815, 817, 818, 820, 821, 825, 826, 827, 828, 829, 831, 832, 833, 834, 835, 837, 838, 839, 840, 843, 844, 845, 848, 849, 853, 854, 857, 858, 859, 860, 862, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 893, 895, 896, 902, 904, 913, 917, 918, 919, 923, 925, 926, 927, 928, 938, 945, 946, 949, 950, 957, 958, 962, 963, 965, 966, 967, 968, 970, 980, 981, 989, 990, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1008, 1010, 1012, 1013, 1018, 1034, 1037, 1038, 1039, 1040, 1042, 1043, 1051, 1054, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1068, 1069, 1070, 1071, 1072, 1076, 1077, 1083, 1084, 1085, 1087, 1088, 1089, 1101, 1104, 1108, 1113, 1114, 1115, 1116, 1118, 1121, 1122, 1123, 1124, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1144, 1145, 1146, 1147, 1154, 1166, 1170, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1208, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1264, 1265, 1268, 1272, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1285, 1286, 1289, 1290, 1291, 1300, 1309, 1310, 1311, 1312, 1313, 1315, 1320, 1323, 1328], "parameteris": 135, "parametr": 811, "paramount": [849, 913], "parent": [39, 202, 318], "parenthes": 18, "parquet": [44, 48, 145, 146, 152, 318, 811, 913], "parquetcompress": [44, 318], "pars": [36, 45, 132, 133, 134, 136, 138, 143, 144, 145, 147, 150, 151, 152, 179, 208, 256, 257, 261, 264, 281, 292, 293, 297, 318, 387, 392, 487, 591, 605, 606, 644, 664, 672, 688, 689, 699, 707, 717, 719, 724, 727, 728, 729, 730, 738, 751, 763, 765, 768, 777, 779, 781, 783, 789, 799, 815, 838, 864, 865, 868, 871, 876, 883, 884, 889, 913, 990, 1089, 1181, 1182, 1205, 1234, 1258, 1259, 1300, 1309], "parseerror": [689, 1259], "parser": [133, 138], "part": [120, 138, 177, 275, 280, 318, 591, 657, 676, 677, 799, 831, 858, 869, 885, 913, 923, 1227, 1246, 1247, 1324], "parti": [549, 799], "partial": [123, 133, 147, 318, 913], "particip": [39, 318], "particular": [133, 139, 141, 179, 195, 281, 318, 386, 387, 706, 707, 799, 815, 876, 913, 980, 1061, 1285, 1300], "partit": [44, 136, 145, 148, 150, 152, 153, 222, 241, 318, 591, 799], "partition_bi": [44, 134, 222, 318, 591, 799], "partition_chunk_size_byt": [44, 318], "partition_col": [44, 136, 318], "partition_df": 134, "partition_num": 136, "partition_on": 136, "partition_rang": 136, "partitioned_object": [44, 318], "pass": [32, 33, 35, 37, 38, 39, 44, 50, 95, 122, 130, 132, 135, 136, 138, 145, 147, 150, 153, 156, 158, 161, 163, 165, 167, 179, 185, 189, 208, 209, 211, 224, 227, 241, 242, 243, 247, 250, 256, 261, 264, 269, 277, 280, 281, 288, 292, 297, 318, 362, 387, 410, 420, 432, 435, 441, 464, 484, 534, 549, 550, 565, 591, 595, 605, 606, 611, 635, 644, 672, 679, 680, 681, 707, 716, 724, 726, 751, 781, 789, 795, 799, 815, 827, 838, 839, 841, 844, 849, 857, 860, 862, 864, 868, 869, 871, 876, 883, 888, 889, 896, 913, 917, 918, 957, 1008, 1018, 1037, 1043, 1069, 1084, 1108, 1139, 1154, 1181, 1182, 1205, 1242, 1249, 1250, 1251, 1272, 1282, 1300, 1313, 1328], "pass_nam": [550, 799], "pass_name_to_appli": [799, 917], "password": [133, 136, 139, 141], "past": [35, 318, 849, 913], "pat": [660, 1230], "path": [3, 6, 34, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 131, 133, 134, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 188, 258, 318, 405, 564, 565, 568, 634, 665, 799, 826, 866, 869, 913, 917, 1203, 1235, 1300, 1331], "pathlib": [34, 36, 40, 41, 44, 147, 318], "pattern": [58, 91, 133, 134, 147, 150, 151, 152, 221, 318, 559, 648, 649, 650, 653, 656, 657, 658, 659, 660, 661, 670, 671, 672, 678, 896, 919, 1200, 1202, 1218, 1219, 1220, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1240, 1241, 1242, 1248, 1300, 1323], "paya": 685, "pct": 163, "pct_chang": [799, 1300], "pd": [121, 125, 705, 778, 799, 1282, 1283, 1300, 1310, 1328], "pd_df": 125, "pd_frame": 778, "pd_seri": 125, "pdsh": [129, 134], "pea": 662, "peak": [252, 318, 593, 594, 799, 1171, 1172, 1300], "peak_max": [799, 1300], "peak_min": [799, 1300], "pear": [662, 674, 685, 1232, 1244, 1255], "pearson": [185, 318, 499, 641, 731, 799, 1104, 1212, 1300], "penalti": [684, 686, 687, 1254, 1256, 1257], "per": [14, 36, 39, 45, 138, 161, 163, 179, 207, 239, 240, 243, 257, 264, 281, 293, 307, 309, 310, 318, 354, 387, 513, 516, 518, 549, 550, 574, 575, 577, 579, 581, 582, 644, 707, 712, 724, 799, 815, 865, 871, 876, 884, 899, 901, 902, 913, 917, 949, 1118, 1121, 1123, 1289, 1300], "percent": [592, 799, 1170, 1300], "percentag": [160, 163, 167, 592, 799, 1170, 1300], "percentil": [187, 318, 825, 913, 1003, 1300], "perform": [37, 44, 46, 48, 50, 93, 98, 100, 105, 107, 114, 121, 133, 134, 135, 139, 143, 145, 147, 150, 151, 152, 176, 200, 208, 209, 224, 225, 228, 246, 250, 252, 253, 276, 304, 318, 377, 382, 385, 471, 541, 549, 550, 591, 611, 649, 659, 661, 666, 667, 672, 684, 686, 687, 799, 835, 839, 844, 845, 862, 871, 886, 887, 913, 971, 976, 979, 1154, 1219, 1229, 1231, 1236, 1237, 1242, 1254, 1256, 1257, 1281, 1300], "perhap": [282, 318], "period": [133, 134, 147, 209, 250, 318, 436, 449, 457, 459, 460, 592, 611, 740, 741, 743, 744, 786, 787, 799, 839, 862, 913, 1038, 1051, 1062, 1064, 1065, 1170, 1300], "persist": 1315, "phase": [37, 286, 318], "philadelphia": [670, 671], "phone": [692, 1262], "physic": [49, 62, 88, 133, 134, 224, 243, 318, 705, 799, 816, 843, 844, 913, 984, 1283, 1300], "pi": [10, 404, 799, 992, 994, 1210, 1273, 1300, 1321, 1325], "pick": [164, 789], "pickl": [405, 799, 826, 913], "pip": [410, 726, 1008], "pipe": [318, 799, 913], "pipelin": [138, 280, 318], "pitfal": 105, "pivot": [286, 318, 919], "pivot_long": [285, 318, 879, 913], "pivot_wid": [243, 318], "pivotagg": [243, 318], "pixel": [39, 318], "pk": [454, 799, 1057, 1300], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 58, 59, 75, 79, 87, 88, 92, 95, 96, 97, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 147, 148, 149, 152, 153, 155, 156, 157, 158, 159, 160, 161, 162, 163, 167, 169, 172, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 258, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 799, 814, 815, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 866, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 918, 919, 923, 924, 925, 926, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1074, 1075, 1076, 1077, 1079, 1081, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1300, 1305, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1331], "pl_frame": 778, "place": [10, 11, 36, 45, 190, 197, 213, 214, 243, 248, 253, 264, 290, 318, 322, 343, 355, 363, 520, 536, 643, 644, 724, 799, 871, 913, 928, 938, 950, 958, 1068, 1125, 1141, 1178, 1214, 1300], "placehold": 750, "plai": [12, 730], "plain": [831, 913], "plan": [224, 226, 318, 405, 799, 816, 820, 826, 831, 843, 844, 866, 869, 913, 1330], "plane": [722, 723], "platform": 155, "ple": 1323, "pleas": [125, 135, 136, 200, 209, 234, 318, 322, 458, 732, 745, 799, 835, 839, 853, 913, 1063, 1300], "plenti": 919, "plot": [318, 858, 869, 913, 1300], "plu": [403, 546, 799, 1002, 1151, 1175, 1300, 1322], "plugin": [0, 799, 811], "plugin_path": 917, "point": [10, 11, 31, 32, 33, 39, 45, 46, 47, 48, 56, 57, 66, 68, 69, 70, 130, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 191, 198, 209, 225, 226, 265, 275, 280, 286, 287, 318, 321, 322, 391, 402, 403, 408, 436, 437, 465, 470, 471, 482, 494, 495, 529, 550, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 632, 728, 775, 776, 799, 820, 821, 828, 831, 833, 839, 845, 849, 860, 872, 880, 913, 985, 987, 1001, 1002, 1006, 1038, 1039, 1070, 1075, 1085, 1134, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1199, 1279, 1284, 1300, 1305, 1328], "poison": [583, 584, 799, 1163, 1164, 1300], "pola": 318, "polar": [1, 318, 321, 322, 798, 799, 805, 811, 913, 917, 918, 919, 1300, 1304, 1305, 1327, 1328, 1330], "polars_df": 1328, "polars_file_cache_ttl": [143, 147, 150, 151], "polars_hypothesis_profil": [166, 168], "polars_max_thread": 169, "polars_seri": 1328, "polars_verbos": [820, 913], "polarsdatafram": 176, "polarsdataset": [280, 318], "polarsdatatyp": [59, 75, 133, 134, 147, 160, 161, 162, 163, 164, 167, 180, 228, 275, 280, 318, 388, 461, 549, 550, 605, 606, 664, 747, 759, 760, 761, 771, 774, 790, 795, 799, 817, 913, 919, 981, 1154, 1181, 1182, 1234, 1300], "polarsintegertyp": [721, 755, 756], "polarstemporaltyp": [684, 1254], "polarstyp": 58, "pool": [14, 57, 169, 170, 821, 913], "poor": 135, "pop2": [224, 318, 844, 913], "popul": [224, 318, 844, 913], "port": [37, 133, 135, 136, 139, 141, 318], "portion": 1323, "pos_a": 1323, "posit": [39, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 177, 189, 196, 208, 241, 256, 257, 261, 264, 284, 292, 293, 297, 318, 362, 457, 459, 460, 461, 534, 591, 596, 598, 635, 644, 658, 670, 671, 689, 699, 722, 723, 724, 727, 728, 729, 730, 747, 777, 781, 795, 799, 827, 832, 838, 864, 865, 868, 871, 878, 883, 884, 889, 913, 919, 957, 1062, 1064, 1065, 1139, 1173, 1175, 1205, 1228, 1259, 1300, 1329], "position": 1300, "possibl": [39, 44, 48, 95, 97, 122, 123, 126, 133, 138, 160, 163, 167, 208, 221, 228, 252, 283, 304, 318, 547, 550, 561, 612, 677, 711, 799, 820, 838, 871, 877, 913, 1154, 1187, 1247, 1300], "post": 50, "postgresql": [37, 135, 136, 318, 591, 799, 1326], "potenti": [105, 107, 138, 147, 150, 151, 221, 251, 253, 318, 574, 670, 671, 823, 825, 830, 863, 882, 913, 917, 1240, 1241], "pow": [799, 1300, 1321], "pow_n": 52, "power": [779, 1173, 1300, 1322], "powersofn": 52, "pre": [541, 550, 598, 771, 774, 790, 799, 1175, 1300], "preced": [163, 919], "precis": [10, 11, 36, 39, 45, 66, 135, 221, 252, 253, 272, 275, 280, 318, 412, 688, 913, 919, 1010, 1258], "predefin": [243, 318], "predic": [38, 45, 46, 47, 48, 56, 57, 147, 150, 151, 152, 153, 200, 219, 225, 251, 318, 467, 714, 749, 789, 799, 820, 821, 831, 835, 845, 849, 858, 860, 869, 886, 887, 913, 1072, 1200, 1202, 1300], "predicate_pushdown": [45, 46, 47, 48, 56, 57, 820, 821, 831, 849, 858, 869, 913], "predict": [243, 246, 288, 318], "prefer": [133, 134, 138, 147, 168, 179, 197, 221, 228, 251, 252, 281, 304, 318, 386, 387, 461, 550, 706, 707, 799, 815, 876, 913, 980, 1068, 1154, 1285, 1300, 1310, 1331], "prefilt": 152, "prefix": [38, 133, 134, 147, 172, 318, 329, 376, 441, 559, 575, 578, 579, 581, 582, 678, 681, 682, 694, 799, 919, 970, 1248, 1252, 1264], "prefix_": 578, "prefix_a": 578, "prefix_b": 578, "prefix_field": [576, 580], "presenc": [748, 757, 919], "present": [123, 163, 204, 318, 491, 565, 680, 681, 799, 869, 913], "preserv": [191, 192, 200, 208, 223, 225, 228, 276, 277, 318, 408, 409, 410, 429, 430, 467, 512, 591, 605, 638, 655, 799, 828, 829, 835, 843, 845, 913, 1006, 1007, 1008, 1072, 1117, 1181, 1209, 1225, 1282, 1300], "pressur": [48, 133, 134, 143, 145, 147, 151, 152, 636, 799, 913, 1206, 1300], "presum": [549, 799], "prev_pow2": 52, "prevent": [276, 318, 329, 400, 401, 574, 701, 799, 913, 999, 1000, 1271, 1300], "preview": [207, 318], "previou": [52, 172, 318, 321, 410, 574, 575, 577, 579, 581, 582, 592, 697, 799, 1008, 1170, 1300, 1305], "previous": [2, 3], "price": [318, 321, 1331], "primari": [138, 1328, 1331], "primarili": 1, "primit": [38, 318, 491, 799], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 134, 155, 156, 158, 193, 207, 208, 222, 226, 274, 296, 318, 484, 566, 740, 743, 799, 820, 841, 913, 919, 1094, 1278, 1300, 1331], "prior": [125, 318, 321, 1300, 1305], "prioriti": 164, "probabl": [454, 598, 799, 1057, 1175, 1300], "process": [14, 36, 45, 46, 47, 48, 56, 57, 133, 134, 135, 147, 169, 252, 318, 820, 821, 913], "process_index": [275, 318], "produc": [2, 3, 163, 167, 223, 318, 351, 510, 561, 760, 843, 849, 913, 946, 1115], "product": [50, 185, 223, 318, 400, 407, 799, 843, 913, 999, 1005, 1300], "profil": [32, 166, 168, 820, 913], "profile_nam": 32, "programmat": [187, 318, 825, 913], "progress": [66, 68], "project": [45, 46, 47, 48, 56, 57, 147, 149, 150, 151, 152, 643, 644, 799, 820, 821, 831, 849, 858, 860, 869, 913], "projection_pushdown": [45, 46, 47, 48, 56, 57, 820, 821, 831, 849, 858, 869, 913], "prompt": 127, "propag": [355, 456, 520, 583, 584, 586, 647, 663, 729, 730, 799, 950, 1059, 1125, 1163, 1164, 1166, 1217, 1233, 1300], "propagate_nan": 731, "proper": [225, 318, 845, 913], "properti": [39, 176, 183, 184, 193, 201, 212, 255, 260, 291, 295, 318, 321, 322, 822, 823, 830, 863, 882, 887, 913, 918, 919, 1056, 1074, 1162, 1204, 1300, 1305, 1331], "proport": [712, 799, 1289, 1300], "protocol": [38, 121, 136, 176, 318], "prototyp": 795, "provid": [31, 32, 33, 37, 39, 133, 134, 136, 137, 138, 143, 145, 147, 148, 149, 150, 151, 152, 163, 167, 200, 204, 219, 265, 275, 318, 321, 372, 373, 441, 461, 482, 541, 549, 550, 651, 652, 656, 664, 665, 680, 681, 682, 683, 751, 781, 799, 811, 820, 835, 872, 888, 910, 913, 966, 967, 1043, 1085, 1103, 1154, 1221, 1222, 1226, 1234, 1235, 1279, 1300, 1313, 1320, 1323, 1328, 1331], "provis": 812, "prune": [145, 150, 152, 849, 913], "pt0": 441, "public": [136, 318, 799, 811, 913, 1300, 1327], "pulp": 1309, "pure": [39, 318], "purpos": [573, 799, 913], "push": [147, 150, 151, 152, 153], "pushdown": [45, 46, 47, 48, 56, 57, 820, 821, 831, 849, 858, 860, 869, 886, 887, 913, 1200, 1202, 1300], "put": [36, 45, 318, 322, 913], "pwd": 135, "py": 149, "pyarrow": [38, 44, 120, 125, 133, 136, 137, 139, 141, 145, 148, 153, 155, 270, 276, 277, 318, 778, 811, 1275, 1281, 1282, 1300, 1310, 1312, 1328], "pyarrow_opt": [44, 137, 145, 148, 318], "pyarrow_t": 1328, "pycapsul": [175, 922], "pycapsuleinterfac": [175, 922], "pydant": 155, "pyiceberg": [149, 155], "pyodbc": [37, 318], "pyodbc_uri": [37, 318], "pyspark": 169, "pytest": [156, 158], "python": [0, 32, 33, 40, 41, 77, 91, 121, 133, 134, 139, 141, 155, 156, 158, 176, 221, 228, 252, 253, 272, 304, 318, 405, 410, 414, 471, 549, 550, 658, 726, 740, 741, 743, 744, 786, 787, 789, 799, 805, 826, 896, 913, 918, 1008, 1012, 1022, 1023, 1024, 1028, 1154, 1228, 1280, 1300, 1304, 1327], "pythondatatyp": [59, 75, 180, 318, 817, 913], "pythonliter": [929, 971, 976, 979, 1073, 1105, 1155, 1156, 1157, 1158, 1200, 1300], "pytorch": [280, 318, 1284, 1300], "q": [253, 318, 781, 1300, 1305, 1313], "q1": [39, 318], "q2": [39, 318], "q3": [39, 318], "q4": [39, 318], "qcut": [403, 799, 1002, 1300], "qhoo": 1331, "qmark": 135, "qqr": 919, "quad": [458, 799, 1063, 1300], "qualifi": [37, 318], "quantifi": [657, 1227], "quantil": [318, 598, 621, 622, 799, 913, 1175, 1192, 1300, 1317], "quantile_cont": 1321, "quantile_disc": 1321, "quarter": [209, 224, 250, 288, 318, 432, 436, 449, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051, 1324], "queri": [45, 46, 47, 48, 56, 57, 135, 136, 139, 147, 150, 151, 152, 197, 226, 242, 265, 318, 541, 549, 550, 665, 778, 799, 820, 821, 831, 858, 869, 872, 886, 887, 888, 896, 905, 913, 1068, 1154, 1235, 1300, 1309, 1310, 1312, 1316, 1327, 1329, 1330], "quick": [795, 1003, 1300, 1331], "quit": [224, 318, 844, 913], "quot": [36, 37, 45, 133, 134, 136, 147, 318, 692, 913, 1262], "quota_project_id": 33, "quote_char": [36, 45, 133, 134, 147, 318, 913], "quote_plu": 136, "quote_styl": [36, 45, 318, 913], "quotes_titl": 692, "quotient": 1322, "r": [133, 134, 147, 318, 556, 595, 650, 655, 656, 657, 658, 670, 671, 799, 919, 1220, 1225, 1226, 1227, 1228, 1240, 1241, 1255, 1313, 1323], "r1": 58, "r2": 58, "r3": 58, "rab": [648, 673, 1218, 1243, 1318], "rad": 1325, "radian": [404, 722, 799, 1321], "radix": [689, 1259], "rai": [722, 723], "raini": [670, 671, 1240, 1241], "rais": [1, 15, 16, 20, 38, 92, 93, 96, 97, 99, 100, 101, 102, 103, 104, 109, 110, 111, 112, 113, 114, 115, 116, 117, 119, 133, 134, 138, 144, 145, 147, 152, 156, 158, 176, 204, 243, 251, 276, 318, 354, 372, 410, 435, 516, 518, 561, 596, 598, 606, 648, 651, 660, 684, 686, 687, 689, 691, 742, 759, 799, 888, 949, 966, 1008, 1037, 1121, 1123, 1173, 1175, 1182, 1218, 1221, 1230, 1254, 1256, 1257, 1259, 1261, 1281, 1300], "raise_if_empti": [133, 134, 138, 144, 147], "raise_if_undetermin": 561, "raise_on_fail": 888, "raker": 130, "ram": [45, 46, 47, 48, 913], "ran": [799, 917], "random": [39, 40, 139, 154, 161, 210, 254, 318, 480, 529, 601, 632, 637, 712, 799, 811, 1083, 1134, 1177, 1199, 1208, 1289, 1300], "randomli": 162, "rang": [17, 39, 135, 136, 187, 195, 209, 222, 318, 334, 404, 410, 418, 428, 433, 434, 436, 449, 450, 485, 721, 726, 729, 739, 740, 741, 742, 743, 744, 755, 756, 785, 786, 787, 799, 825, 839, 913, 919, 1003, 1008, 1016, 1030, 1035, 1036, 1038, 1051, 1052, 1061, 1170, 1300, 1323], "rank": [343, 513, 724, 731, 746, 799, 938, 1118, 1300], "rankmethod": [601, 799, 1177, 1300], "rare": [411, 1009], "rather": [224, 318, 473, 549, 566, 598, 610, 694, 799, 844, 913, 1175, 1186, 1264, 1300], "raw": 136, "raw_output": [565, 869, 913], "re": [204, 209, 220, 283, 285, 318, 429, 430, 438, 441, 839, 877, 879, 913, 1031, 1032, 1040, 1043, 1328], "reach": [668, 669, 694, 1238, 1239, 1264], "read": [35, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 188, 197, 318, 405, 473, 789, 799, 826, 913, 1068, 1300], "read_arrow_batches_from_odbc": 135, "read_clipboard": [35, 318], "read_csv": [132, 138, 147], "read_csv_batch": 129, "read_databas": 136, "read_database_uri": 135, "read_excel": 144, "read_ndjson": 142, "read_od": 138, "read_opt": 138, "read_parquet": 152, "read_tabl": 145, "readabl": 795, "reader": [44, 48, 129, 133, 134, 139, 141, 145, 318, 913], "readi": 906, "readthedoc": [39, 318], "real": [657, 1227], "realli": [402, 649, 672, 799, 1001, 1219, 1242, 1300], "realloc": [143, 147, 150, 151, 197, 318, 1068, 1300], "rearrang": [228, 318], "reason": [169, 187, 318, 541, 549, 799, 825, 913], "receiv": [50, 135, 147, 228, 242, 304, 318, 550, 595, 799, 857, 913, 1331], "recent": [156, 157, 158, 159, 276, 318, 592, 606, 799, 1170, 1182, 1281, 1300, 1312, 1328], "rechunk": [58, 120, 125, 133, 134, 137, 139, 141, 143, 145, 147, 148, 150, 151, 152, 197, 318, 799, 988, 1068, 1079, 1160, 1300], "recognis": [15, 16, 20, 919], "recommend": [39, 169, 187, 221, 226, 242, 318, 541, 816, 825, 913, 919], "record": [36, 41, 45, 130, 141, 153, 318, 913], "record_batch": [222, 318], "recordbatch": [120, 222, 318, 778, 1310, 1312, 1328], "recurs": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "red": [49, 87, 88, 304, 712, 799, 896, 1289, 1300], "redempt": 1309, "redshift": 136, "reduc": [48, 133, 134, 143, 145, 147, 150, 151, 152, 252, 305, 306, 308, 311, 318, 636, 736, 749, 799, 897, 898, 900, 903, 913, 1156, 1174, 1206, 1271, 1300], "reduct": [202, 318, 550, 799], "ref": [656, 658, 1226, 1228], "refer": [0, 32, 39, 91, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 185, 188, 318, 322, 405, 438, 441, 601, 656, 670, 671, 684, 686, 687, 691, 799, 826, 913, 1040, 1043, 1177, 1240, 1241, 1254, 1256, 1257, 1261, 1300], "referenc": [39, 318, 549, 670, 671, 697, 799, 1240, 1241, 1310, 1328], "refin": 138, "reg": 130, "regard": [133, 731], "regardless": [125, 179, 208, 224, 281, 318, 387, 415, 665, 707, 789, 799, 815, 844, 876, 913, 1013, 1235], "regex": [89, 461, 556, 557, 559, 648, 650, 656, 657, 658, 660, 670, 671, 695, 747, 799, 919, 1218, 1220, 1226, 1227, 1228, 1230, 1240, 1241], "regexp_lik": 1321, "region": [39, 149, 318], "regist": [1, 51, 52, 53, 54, 166, 168, 265, 318, 799, 872, 913, 917, 1309, 1310, 1312, 1313, 1314, 1315, 1328, 1330], "register_dataframe_namespac": [1, 52, 53, 54], "register_expr_namespac": [1, 51, 53, 54], "register_glob": [1311, 1313, 1315, 1328], "register_lazyframe_namespac": [1, 51, 52, 54], "register_mani": [1311, 1312, 1315], "register_plugin": 799, "register_plugin_funct": [799, 917], "register_series_namespac": [1, 51, 52, 53], "registr": [265, 318, 778, 811, 872, 913, 1315, 1328], "regrid": [485, 799], "regular": [128, 221, 251, 252, 288, 295, 318, 461, 648, 649, 650, 654, 656, 657, 658, 659, 660, 661, 670, 671, 672, 726, 747, 795, 799, 887, 913, 919, 1218, 1219, 1220, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1240, 1241, 1242, 1326], "reinterpret": [799, 1300], "rel": [39, 136, 137, 148, 149, 156, 157, 158, 159, 318, 432, 457, 459, 460, 712, 799, 1034, 1062, 1064, 1065, 1289, 1300], "relat": [135, 172, 670, 671, 919, 1240, 1241, 1316], "releas": [57, 550, 799, 821, 913, 1331], "release_year": 1309, "relev": 58, "reliabl": [87, 88], "remain": [133, 134, 147, 191, 192, 195, 200, 243, 318, 408, 409, 467, 512, 605, 676, 677, 799, 828, 829, 835, 849, 913, 1006, 1007, 1061, 1072, 1117, 1181, 1246, 1247, 1300, 1315], "remaind": [677, 1247, 1322], "remap": 90, "remot": [133, 134, 139, 141], "remov": [4, 133, 134, 147, 176, 189, 273, 318, 461, 575, 679, 680, 681, 682, 683, 747, 799, 827, 913, 1249, 1250, 1251, 1252, 1253, 1276, 1300, 1330], "removes_pronoun": 672, "renam": [1, 123, 133, 134, 170, 208, 256, 257, 292, 293, 297, 299, 318, 329, 473, 567, 568, 574, 575, 576, 577, 579, 581, 582, 697, 699, 777, 781, 799, 838, 864, 865, 883, 884, 889, 891, 913, 925, 1230, 1268, 1277, 1300, 1328], "rename_field": [676, 677, 1246, 1247], "render": [565, 869, 913], "render_as_str": 135, "reoconstruct": [253, 318], "repeat": [139, 150, 602, 604, 771, 790, 799], "repeat_bi": 799, "replac": [37, 38, 133, 134, 147, 198, 199, 248, 282, 285, 292, 293, 318, 321, 414, 435, 465, 549, 550, 606, 671, 672, 687, 799, 833, 879, 883, 884, 913, 1012, 1037, 1070, 1182, 1200, 1202, 1241, 1242, 1257, 1300, 1305, 1321], "replace_al": [606, 670, 799, 1181, 1182, 1240, 1300], "replace_column": 318, "replace_strict": [605, 799, 1181, 1300], "replace_time_zon": [411, 417, 419, 1014, 1015, 1041], "replace_with": [672, 1242], "replic": [705, 799, 1283, 1300], "report": 135, "repr": [127, 441, 1043], "repres": [36, 39, 45, 64, 65, 67, 76, 80, 85, 120, 122, 124, 125, 126, 135, 243, 265, 266, 275, 276, 289, 296, 318, 471, 494, 495, 537, 543, 549, 646, 662, 667, 670, 671, 674, 685, 713, 716, 731, 733, 745, 747, 759, 760, 761, 770, 775, 776, 780, 788, 795, 799, 872, 873, 881, 913, 919, 1200, 1216, 1232, 1237, 1240, 1241, 1244, 1255, 1281, 1290, 1300, 1328], "represent": [10, 42, 43, 64, 65, 67, 80, 127, 258, 274, 318, 413, 418, 421, 423, 424, 425, 426, 427, 428, 431, 433, 434, 437, 450, 451, 453, 564, 705, 799, 831, 847, 866, 913, 984, 1011, 1016, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1036, 1039, 1052, 1053, 1055, 1278, 1283, 1300, 1319], "request": 33, "requested_schema": [175, 922], "requir": [1, 32, 33, 38, 39, 50, 125, 135, 136, 156, 157, 158, 159, 185, 191, 251, 275, 276, 277, 280, 318, 368, 457, 459, 460, 542, 550, 591, 636, 684, 686, 687, 709, 774, 799, 823, 828, 829, 830, 871, 882, 913, 963, 1060, 1062, 1064, 1065, 1147, 1206, 1240, 1254, 1256, 1257, 1281, 1282, 1286, 1300], "require_al": 919, "rerais": [57, 821, 913], "rerun": [197, 318, 1068, 1300], "resampl": [209, 318, 839, 913], "reset": [4, 172], "reset_index": [125, 209, 318, 839, 913], "reshap": [243, 276, 318, 514, 728, 799, 1119, 1300], "resolv": [414, 541, 822, 823, 830, 863, 882, 913], "resourc": [888, 917], "respect": [39, 318, 649, 659, 661, 672, 919, 1219, 1229, 1231, 1242, 1284, 1300], "respons": [136, 235, 318, 854, 913], "rest": [692, 1262], "restor": [172, 318, 321, 1300, 1305], "restore_default": 172, "restrict": [30, 677, 1247], "result": [13, 36, 42, 43, 44, 45, 46, 47, 48, 50, 58, 124, 125, 126, 135, 136, 138, 147, 150, 152, 153, 167, 197, 200, 209, 210, 223, 224, 225, 239, 243, 250, 253, 258, 259, 261, 275, 276, 277, 288, 295, 297, 303, 318, 410, 436, 438, 441, 449, 457, 458, 459, 460, 464, 471, 480, 487, 499, 540, 541, 549, 550, 564, 591, 596, 598, 605, 606, 607, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 634, 635, 655, 671, 675, 676, 687, 708, 712, 735, 736, 740, 742, 743, 744, 745, 759, 760, 771, 774, 775, 776, 778, 790, 799, 816, 820, 825, 835, 839, 843, 844, 845, 849, 858, 862, 866, 867, 868, 887, 889, 895, 906, 907, 913, 919, 928, 1038, 1040, 1043, 1051, 1062, 1064, 1065, 1068, 1069, 1083, 1089, 1104, 1145, 1154, 1173, 1175, 1181, 1182, 1183, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1203, 1205, 1225, 1245, 1246, 1257, 1281, 1282, 1289, 1300, 1310, 1316, 1328, 1329, 1331], "resultset": 135, "retri": [143, 145, 147, 150, 151, 152], "retriev": [204, 275, 318, 348, 349, 506, 507, 695, 770, 943, 944, 1111, 1112, 1265, 1279, 1300, 1316], "return": [1, 5, 6, 30, 36, 37, 38, 39, 40, 41, 42, 43, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 98, 101, 109, 117, 120, 122, 123, 124, 125, 126, 128, 129, 131, 133, 134, 135, 136, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 169, 170, 174, 177, 179, 181, 184, 185, 186, 190, 193, 195, 196, 197, 198, 199, 201, 202, 203, 204, 207, 208, 209, 211, 212, 213, 217, 219, 220, 221, 222, 223, 226, 227, 228, 230, 232, 237, 238, 239, 241, 242, 243, 247, 250, 251, 252, 253, 254, 258, 265, 268, 269, 275, 276, 277, 280, 281, 282, 283, 288, 291, 292, 293, 299, 301, 303, 304, 307, 312, 318, 330, 332, 335, 336, 337, 338, 339, 340, 343, 344, 348, 349, 350, 352, 354, 355, 366, 371, 372, 373, 374, 375, 376, 386, 387, 393, 394, 395, 396, 397, 403, 404, 410, 411, 413, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 453, 458, 463, 471, 474, 475, 477, 481, 482, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 502, 503, 506, 507, 509, 514, 516, 518, 519, 520, 522, 529, 539, 540, 547, 549, 550, 562, 564, 565, 566, 571, 595, 598, 600, 604, 605, 606, 607, 609, 610, 632, 633, 638, 639, 640, 647, 648, 650, 651, 652, 654, 655, 656, 657, 658, 660, 661, 662, 663, 665, 666, 667, 668, 669, 673, 674, 675, 676, 677, 685, 689, 694, 702, 703, 704, 706, 707, 708, 710, 711, 712, 715, 716, 721, 722, 723, 724, 725, 726, 732, 734, 739, 740, 741, 742, 743, 744, 745, 748, 751, 753, 755, 756, 757, 758, 759, 760, 761, 771, 774, 777, 778, 781, 784, 785, 786, 787, 789, 790, 799, 815, 818, 820, 821, 823, 824, 825, 830, 831, 837, 839, 840, 843, 847, 848, 849, 857, 858, 860, 862, 866, 869, 875, 876, 877, 882, 883, 884, 891, 893, 895, 899, 904, 906, 913, 917, 918, 919, 921, 923, 926, 927, 928, 936, 937, 939, 940, 941, 942, 943, 944, 945, 947, 949, 950, 961, 963, 965, 966, 967, 969, 980, 983, 985, 989, 995, 996, 1002, 1003, 1008, 1009, 1011, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1038, 1039, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1055, 1061, 1063, 1067, 1068, 1073, 1077, 1084, 1085, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1105, 1107, 1108, 1109, 1110, 1111, 1112, 1114, 1119, 1121, 1123, 1124, 1125, 1127, 1134, 1144, 1145, 1152, 1154, 1159, 1168, 1175, 1181, 1182, 1183, 1184, 1185, 1186, 1199, 1201, 1209, 1217, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1243, 1244, 1245, 1246, 1247, 1255, 1259, 1264, 1272, 1275, 1282, 1285, 1287, 1288, 1289, 1291, 1300, 1309, 1310, 1314, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1326, 1328, 1329, 1330, 1331], "return_as_str": [207, 318, 566], "return_dtyp": [39, 228, 318, 549, 550, 605, 606, 715, 760, 761, 799, 1154, 1181, 1182, 1300], "return_typ": [275, 280, 318], "returns_scalar": [549, 550, 761, 799, 917], "reus": [56, 57, 820, 821, 831, 858, 869, 913], "rev": [225, 318, 845, 913], "revers": [179, 195, 281, 318, 387, 397, 398, 399, 400, 401, 575, 577, 579, 707, 728, 734, 799, 815, 876, 913, 996, 997, 998, 999, 1000, 1300, 1318, 1321], "reverse_": 577, "reverse_a": 577, "reverse_b": 577, "revert": [7, 9, 10], "rhap": [659, 661, 1231], "rhapsodi": [659, 661, 1231], "right": [9, 10, 15, 16, 18, 27, 39, 66, 133, 134, 156, 157, 158, 159, 209, 223, 224, 250, 287, 318, 403, 457, 458, 459, 460, 487, 530, 531, 532, 533, 598, 611, 614, 616, 618, 620, 622, 625, 627, 629, 633, 641, 727, 740, 741, 743, 744, 786, 787, 799, 839, 843, 844, 862, 880, 913, 1002, 1062, 1063, 1064, 1065, 1089, 1135, 1136, 1137, 1138, 1175, 1201, 1212, 1300, 1316, 1321], "right_on": [223, 224, 287, 318, 843, 844, 880, 913], "rightmost": [633, 799, 1201, 1300, 1323], "rld": [679, 681, 1251], "rle": [610, 799, 1186, 1300], "rle_id": [609, 799, 1300], "rle_id_a": [610, 799], "rle_id_ab": [610, 799], "rmm": 888, "rn": [133, 134, 147], "role": [32, 136], "roll": [209, 318, 410, 429, 430, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 729, 775, 776, 799, 839, 913, 1008, 1031, 1032, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1300], "rollback": [430, 1032], "rolled_forward": 410, "rollforward": [429, 1031], "rolling_map": [799, 1300], "rolling_max": [799, 1300], "rolling_max_bi": 799, "rolling_mean": [799, 1300], "rolling_mean_bi": 799, "rolling_median": [799, 1300], "rolling_median_bi": 799, "rolling_min": [799, 1300], "rolling_min_bi": 799, "rolling_quantil": [799, 1300], "rolling_quantile_bi": 799, "rolling_row_max": [614, 799], "rolling_row_mean": [616, 799], "rolling_row_median": [618, 799], "rolling_row_min": [620, 799], "rolling_row_quantil": [622, 799], "rolling_row_std": [625, 799], "rolling_row_sum": [627, 799], "rolling_row_var": [629, 799], "rolling_skew": [799, 1300], "rolling_std": [799, 1300], "rolling_std_bi": 799, "rolling_sum": [612, 799, 1187, 1300], "rolling_sum_bi": 799, "rolling_var": [799, 1300], "rolling_var_bi": 799, "rollinggroupbi": [250, 318], "rollinginterpolationmethod": [187, 245, 310, 318, 599, 621, 622, 772, 799, 825, 859, 902, 913, 1003, 1176, 1192, 1300], "ronaldo": [656, 1226], "root": [137, 148, 390, 563, 574, 575, 577, 579, 581, 582, 645, 798, 799, 986, 1215, 1300, 1322], "round": [20, 39, 52, 127, 135, 318, 391, 395, 470, 631, 703, 799, 987, 1075, 1198, 1300, 1321], "round_sig_fig": [799, 1300], "round_str": 1038, "round_td": 1038, "rounded_corn": 20, "row": [14, 20, 25, 36, 37, 39, 44, 45, 48, 50, 51, 53, 58, 95, 101, 109, 117, 123, 124, 125, 126, 127, 130, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 153, 156, 157, 163, 177, 179, 181, 191, 192, 197, 200, 202, 203, 207, 208, 209, 210, 211, 212, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 228, 234, 239, 243, 250, 253, 254, 263, 269, 272, 274, 275, 280, 281, 283, 285, 286, 287, 294, 295, 299, 301, 303, 304, 312, 318, 322, 343, 344, 352, 367, 387, 463, 471, 475, 481, 503, 514, 541, 591, 592, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 637, 642, 644, 655, 664, 702, 707, 721, 724, 730, 732, 749, 753, 755, 756, 758, 773, 775, 776, 784, 789, 799, 815, 818, 828, 829, 835, 836, 837, 839, 840, 843, 844, 845, 846, 848, 849, 853, 870, 875, 876, 877, 879, 880, 886, 887, 891, 893, 895, 896, 904, 913, 923, 938, 947, 1067, 1068, 1077, 1084, 1108, 1119, 1170, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1213, 1225, 1234, 1272, 1300, 1309, 1316, 1318, 1329, 1331], "row_group": [145, 152], "row_group_s": [44, 48, 318, 913], "row_height": [39, 318], "row_index": [39, 318], "row_index_nam": [133, 134, 139, 141, 143, 145, 147, 150, 151, 152], "row_index_offset": [133, 134, 139, 141, 143, 145, 147, 150, 151, 152], "row_nr": [294, 318, 886, 913], "row_tot": [39, 318], "rowname_col": [318, 322], "rows_by_kei": [221, 252, 271, 318], "rowserror": [251, 318], "rowtotalsdefinit": [39, 318], "rpc": 135, "rstrip": 575, "rtol": [156, 157, 158, 159], "rtrim": 1321, "ru": 1323, "rule": [133, 145, 147, 152, 202, 318, 649, 672, 687, 1219, 1242, 1257], "run": [45, 46, 47, 48, 56, 57, 65, 135, 163, 166, 167, 168, 208, 226, 228, 257, 283, 293, 304, 318, 402, 513, 549, 550, 609, 610, 667, 777, 799, 820, 821, 831, 838, 849, 853, 858, 865, 869, 877, 884, 888, 913, 919, 1001, 1118, 1154, 1185, 1186, 1237, 1300, 1328, 1331], "runtimeerror": [276, 318, 1281, 1300], "rust": [36, 44, 45, 91, 103, 139, 141, 145, 228, 304, 318, 658, 913, 917, 1154, 1228, 1300], "s1": [49, 87, 88, 158, 159, 202, 318, 962, 1059, 1060, 1079, 1103, 1113, 1146, 1166, 1178, 1291, 1300], "s2": [1, 49, 87, 88, 158, 159, 202, 318, 962, 988, 1005, 1059, 1060, 1079, 1094, 1103, 1113, 1146, 1160, 1166, 1178, 1291, 1300], "s3": [1, 38, 137, 148, 149, 152, 153, 318, 962, 1146, 1300], "s_": 441, "s_bar": 1318, "s_dt": [441, 1323, 1324], "s_dt1": 1323, "s_dt2": 1323, "s_dtm": 441, "s_foo": 1318, "s_from_str_repr": [1278, 1300], "s_head_5": 662, "s_head_n": 662, "s_tail_5": 685, "s_tail_n": 685, "s_td": 441, "s_tm": [441, 1323, 1324], "safe": [603, 799, 1179, 1300], "sale": [591, 799], "sam": 12, "same": [20, 38, 39, 49, 50, 56, 57, 58, 87, 88, 104, 139, 147, 156, 157, 158, 159, 161, 172, 200, 208, 228, 243, 252, 253, 264, 283, 292, 293, 297, 304, 318, 326, 333, 366, 408, 409, 441, 467, 471, 473, 474, 477, 540, 554, 560, 591, 605, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 644, 655, 666, 697, 795, 799, 820, 821, 835, 838, 847, 849, 871, 877, 883, 884, 889, 913, 919, 924, 961, 1006, 1007, 1012, 1043, 1145, 1154, 1181, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1225, 1236, 1291, 1300, 1314, 1316, 1324], "samoa": [411, 1009], "sampl": [133, 134, 304, 318, 637, 641, 799, 896, 1212, 1300, 1317], "sample_s": [133, 134], "sampled_from": 1331, "sandwich": [205, 318], "sat": [318, 321], "satisfi": [487, 799, 1089, 1300], "saturdai": [209, 318, 839, 913], "save": [2, 3, 6, 209, 224, 250, 288, 318, 411, 419, 432, 436, 449, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 745, 786, 787, 795, 799, 811, 839, 844, 862, 913, 1017, 1034, 1038, 1051], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [177, 219, 228, 251, 318, 549, 633, 662, 667, 674, 685, 759, 761, 799, 917, 923, 1103, 1201, 1232, 1237, 1244, 1255, 1300], "scale": [28, 66, 195, 318, 375, 550, 595, 688, 799, 919, 1061, 1258, 1300], "scale_negative_even": [595, 799], "scan": [123, 126, 133, 134, 135, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 318, 664, 913, 1234], "scan_csv": [45, 46, 47, 48, 133, 134, 913], "scan_parquet": [145, 153], "scan_pyarrow_dataset": [145, 152], "scansourc": [145, 152], "scatter": [318, 321, 1300], "scenario": 1300, "schedul": [57, 821, 913], "schema": [0, 1, 14, 28, 34, 37, 38, 51, 52, 53, 58, 95, 112, 113, 120, 122, 123, 124, 126, 130, 133, 134, 135, 136, 138, 140, 142, 143, 144, 145, 146, 147, 150, 151, 152, 181, 182, 183, 189, 193, 195, 222, 226, 228, 235, 239, 247, 276, 280, 318, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 417, 540, 541, 550, 561, 576, 578, 580, 664, 715, 781, 799, 811, 818, 819, 822, 823, 827, 830, 849, 854, 860, 882, 896, 913, 919, 991, 1234, 1300, 1309], "schema_mod": [38, 318], "schema_overrid": [120, 122, 123, 124, 125, 126, 133, 134, 135, 136, 138, 142, 143, 144, 147, 151, 222, 276, 318, 913, 919], "schemadefinit": [120, 122, 123, 124, 126, 142, 143, 151, 318, 913], "schemadict": [79, 120, 122, 123, 124, 125, 126, 133, 135, 136, 138, 144, 145, 147, 150, 152, 318, 781, 849, 896, 913], "schemainitdatatyp": 918, "schindler": 1309, "scientif": [11, 36, 45, 318, 913], "scikit": [280, 318], "scipi": [499, 641, 799, 1104, 1212, 1300], "scope": [33, 172, 810, 919, 1312, 1315, 1328], "score": [39, 243, 318], "script": [318, 321, 1300, 1305], "scroll": [39, 318], "sdiff": 532, "search": [224, 318, 541, 649, 659, 661, 672, 844, 871, 913, 1219, 1229, 1231, 1242], "search_sort": [799, 1300], "searchsortedsid": [633, 799, 1201, 1300], "searchstrategi": [160, 162, 163, 164, 165, 167], "season": [670, 671], "sec": [1324, 1331], "second": [36, 45, 143, 147, 150, 151, 156, 157, 158, 159, 209, 224, 250, 288, 318, 421, 424, 426, 427, 431, 432, 436, 441, 448, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 670, 671, 684, 687, 742, 743, 744, 745, 785, 786, 787, 789, 799, 839, 844, 862, 913, 919, 1034, 1038, 1050, 1051, 1063, 1240, 1241, 1254, 1257, 1300, 1323, 1324, 1329, 1331], "second_part": [676, 677, 1246, 1247], "seconds_diff": 448, "secret": [149, 152], "section": [243, 318, 648, 656, 657, 660, 670, 671, 740, 741, 743, 744, 786, 787, 1218, 1226, 1227, 1230, 1240, 1241], "secur": [405, 799, 826, 913], "see": [38, 39, 40, 41, 56, 57, 65, 135, 136, 137, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 156, 157, 158, 159, 163, 167, 174, 185, 200, 209, 223, 242, 243, 318, 322, 380, 381, 383, 384, 392, 441, 466, 499, 549, 641, 648, 656, 657, 660, 662, 670, 671, 685, 740, 741, 743, 744, 773, 786, 787, 795, 799, 820, 821, 835, 839, 888, 913, 917, 919, 921, 974, 975, 977, 978, 984, 990, 1043, 1104, 1212, 1218, 1226, 1227, 1230, 1232, 1240, 1241, 1255, 1300, 1331], "seed": [154, 210, 254, 318, 480, 529, 601, 632, 637, 799, 1083, 1134, 1177, 1199, 1208, 1300], "seed_1": [210, 318, 480, 799, 1083, 1300], "seed_2": [210, 318, 480, 799, 1083, 1300], "seed_3": [210, 318, 480, 799, 1083, 1300], "seen": [441, 1043], "seen_group": 134, "select": [1, 8, 37, 50, 51, 52, 53, 92, 131, 133, 134, 135, 136, 137, 139, 141, 145, 147, 153, 162, 177, 178, 219, 220, 224, 228, 239, 242, 251, 257, 263, 265, 278, 284, 288, 295, 318, 326, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 352, 357, 358, 359, 364, 365, 366, 367, 368, 369, 370, 371, 374, 376, 386, 387, 389, 390, 391, 393, 394, 395, 396, 402, 404, 406, 407, 408, 409, 412, 414, 415, 423, 429, 430, 432, 435, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 454, 457, 459, 460, 461, 462, 463, 464, 468, 470, 472, 475, 479, 480, 481, 482, 483, 484, 485, 488, 489, 492, 498, 499, 500, 502, 503, 513, 514, 541, 544, 545, 546, 547, 549, 550, 551, 552, 553, 557, 569, 571, 573, 574, 576, 578, 580, 583, 584, 588, 589, 590, 591, 593, 594, 597, 599, 600, 601, 602, 603, 604, 607, 608, 609, 612, 623, 630, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 655, 656, 657, 658, 659, 660, 661, 663, 684, 695, 697, 698, 701, 702, 703, 704, 706, 707, 709, 710, 711, 712, 713, 716, 718, 720, 723, 724, 725, 728, 729, 731, 732, 733, 734, 737, 744, 745, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 762, 764, 766, 767, 769, 770, 773, 774, 778, 779, 780, 781, 782, 784, 788, 795, 799, 814, 820, 823, 844, 857, 865, 870, 872, 878, 885, 887, 888, 913, 919, 923, 1037, 1076, 1118, 1200, 1202, 1213, 1231, 1235, 1254, 1300, 1309, 1310, 1311, 1312, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330], "select_from": [162, 165, 167], "select_seq": [318, 913], "selector": [0, 39, 180, 189, 191, 192, 196, 234, 241, 243, 264, 273, 275, 280, 283, 285, 286, 318, 322, 441, 461, 557, 799, 811, 817, 827, 828, 829, 832, 853, 871, 877, 879, 913], "selectortyp": [39, 318, 919], "self": [1, 51, 52, 53, 54, 56, 57, 265, 296, 318, 778, 799, 820, 821, 831, 858, 869, 872, 885, 913, 928, 972, 973, 974, 975, 977, 978, 981, 991, 996, 1068, 1072, 1086, 1152, 1154, 1167, 1171, 1172, 1178, 1181, 1182, 1200, 1202, 1203, 1214, 1288, 1291, 1300, 1311, 1312, 1313, 1315, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328], "semi": [130, 223, 318, 843, 913, 1316], "semigraph": 20, "sens": [133, 139, 141, 235, 288, 318, 591, 799, 854, 913], "sensit": [648, 657, 660, 670, 671, 1218, 1227, 1230, 1240, 1241], "sep": 130, "separ": [9, 10, 24, 27, 35, 36, 45, 129, 130, 132, 133, 134, 138, 147, 241, 243, 273, 282, 284, 318, 352, 355, 441, 514, 520, 550, 655, 730, 735, 736, 799, 878, 913, 947, 950, 1043, 1119, 1125, 1225, 1270, 1276, 1300, 1323], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [39, 44, 50, 79, 120, 122, 123, 124, 126, 130, 133, 134, 135, 138, 142, 143, 144, 147, 151, 161, 162, 163, 164, 165, 179, 187, 196, 197, 223, 224, 234, 239, 241, 242, 243, 253, 264, 273, 275, 280, 281, 285, 286, 287, 288, 318, 367, 387, 403, 474, 491, 541, 549, 595, 598, 605, 606, 644, 672, 682, 683, 697, 707, 724, 735, 736, 749, 751, 760, 761, 770, 773, 779, 799, 815, 825, 832, 843, 844, 853, 857, 871, 876, 879, 880, 913, 919, 962, 1002, 1003, 1068, 1146, 1175, 1181, 1182, 1242, 1268, 1300], "sequenti": [56, 57, 257, 293, 318, 820, 821, 831, 858, 865, 869, 884, 913], "ser": [1014, 1015, 1041], "seri": [0, 1, 11, 25, 39, 49, 51, 52, 53, 54, 58, 59, 68, 79, 87, 88, 97, 120, 122, 125, 127, 158, 159, 163, 177, 190, 200, 202, 204, 206, 209, 210, 213, 214, 216, 218, 220, 230, 232, 237, 248, 250, 254, 268, 271, 274, 276, 278, 279, 298, 318, 333, 344, 367, 371, 389, 391, 435, 464, 467, 470, 474, 475, 484, 489, 491, 492, 494, 495, 496, 497, 508, 514, 516, 541, 547, 549, 550, 601, 602, 603, 604, 605, 606, 611, 612, 623, 634, 636, 662, 672, 684, 685, 686, 687, 691, 695, 706, 711, 721, 725, 728, 735, 736, 740, 741, 743, 744, 749, 751, 755, 756, 759, 760, 761, 771, 773, 774, 777, 778, 781, 786, 787, 790, 799, 811, 835, 839, 862, 890, 913, 917, 1292, 1294, 1296, 1299, 1301, 1304, 1305, 1306, 1307, 1308, 1310, 1312, 1328, 1331], "serial": [42, 43, 188, 318, 405, 568, 799, 826, 913], "serializ": [799, 917], "serializationformat": [188, 258, 318, 405, 564, 799, 826, 866, 913], "seriesplot": [1300, 1305], "server": [37, 135, 136, 318], "servic": 32, "service_account": [137, 148], "service_account_json_absolute_path": [137, 148], "session": 135, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 36, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 56, 57, 62, 65, 66, 68, 121, 122, 123, 126, 133, 134, 135, 138, 139, 141, 142, 143, 144, 145, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 172, 176, 184, 191, 192, 201, 204, 208, 210, 221, 224, 232, 234, 252, 254, 256, 258, 263, 268, 273, 275, 276, 280, 282, 283, 285, 286, 287, 292, 318, 330, 332, 354, 355, 367, 378, 380, 381, 383, 384, 392, 403, 435, 452, 480, 491, 516, 518, 520, 529, 530, 531, 532, 533, 535, 541, 549, 550, 557, 558, 564, 595, 598, 605, 606, 612, 613, 615, 617, 619, 621, 624, 626, 628, 632, 637, 641, 642, 647, 663, 664, 670, 671, 674, 679, 680, 681, 682, 683, 684, 686, 687, 691, 712, 716, 718, 721, 725, 730, 740, 741, 742, 743, 744, 745, 755, 756, 759, 771, 774, 775, 776, 781, 786, 787, 789, 790, 799, 811, 820, 821, 828, 829, 831, 838, 843, 844, 849, 853, 864, 866, 870, 877, 879, 880, 883, 896, 913, 917, 926, 927, 949, 950, 962, 966, 972, 974, 975, 977, 978, 990, 1002, 1037, 1054, 1074, 1083, 1094, 1101, 1121, 1123, 1125, 1134, 1135, 1136, 1137, 1138, 1140, 1146, 1154, 1175, 1181, 1182, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1199, 1200, 1201, 1208, 1212, 1213, 1217, 1233, 1234, 1240, 1241, 1244, 1249, 1250, 1251, 1254, 1256, 1257, 1261, 1281, 1289, 1300, 1319, 1327, 1331], "set_": 172, "set_ascii_t": 172, "set_auto_structifi": [256, 292, 318, 864, 883, 913], "set_decimal_separ": 27, "set_environ": 166, "set_except": [57, 821, 913], "set_fmt_float": 30, "set_fmt_str_length": [649, 659, 661, 672, 1219, 1231, 1242], "set_index": [209, 318, 839, 913], "set_legend": [39, 318], "set_sort": [250, 288, 318, 611, 799, 862, 913, 1300], "set_stat": 30, "set_streaming_chunk_s": [820, 913], "set_styl": [39, 318], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": 50, "set_tbl_row": 172, "set_tbl_width_char": 672, "set_thousands_separ": 9, "set_titl": [39, 318], "set_verbos": 172, "setosa": [318, 321], "setup": 1331, "sever": [120, 122, 123, 124, 126, 142, 143, 151, 318, 913, 1331], "sfu": 136, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 49, 50, 51, 52, 53, 54, 58, 59, 75, 79, 87, 88, 95, 114, 120, 121, 122, 123, 124, 125, 126, 127, 130, 133, 142, 143, 147, 153, 160, 163, 167, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 196, 197, 198, 199, 200, 202, 203, 204, 206, 208, 209, 210, 211, 213, 214, 215, 216, 218, 219, 220, 223, 224, 225, 227, 228, 229, 230, 231, 232, 233, 235, 236, 237, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 254, 256, 258, 261, 263, 264, 265, 266, 267, 268, 269, 271, 273, 274, 278, 279, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 292, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 569, 570, 571, 572, 573, 574, 575, 577, 579, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 753, 754, 755, 756, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 799, 814, 815, 817, 818, 820, 821, 824, 825, 826, 827, 828, 829, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 854, 855, 856, 857, 858, 859, 860, 861, 862, 864, 866, 868, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 918, 919, 923, 924, 925, 928, 930, 931, 932, 933, 934, 935, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 980, 981, 982, 984, 986, 987, 989, 990, 991, 992, 993, 994, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1059, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1075, 1076, 1077, 1079, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1154, 1159, 1166, 1167, 1168, 1170, 1171, 1172, 1173, 1175, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1205, 1206, 1208, 1209, 1210, 1211, 1213, 1214, 1215, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1270, 1272, 1273, 1274, 1276, 1277, 1278, 1283, 1285, 1286, 1287, 1288, 1289, 1291, 1300, 1309, 1310, 1311, 1312, 1314, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329], "share": [156, 157, 158, 159, 195, 318, 1061, 1300], "shawshank": 1309, "sheet": [39, 138, 144, 318], "sheet1": [39, 318], "sheet_id": [138, 144], "sheet_nam": [138, 144], "sheet_zoom": [39, 318], "sheetnam": [138, 144], "shift": [209, 318, 370, 406, 472, 511, 592, 729, 799, 839, 913, 1004, 1116, 1170, 1300], "short": [156, 158], "shorten": [156, 158], "shorter": [133, 134, 147, 541, 755, 756], "shorthand": [318, 321, 1300, 1305], "should": [10, 37, 39, 44, 45, 46, 47, 48, 58, 120, 122, 124, 126, 130, 138, 142, 143, 147, 151, 153, 160, 161, 163, 167, 189, 221, 224, 228, 251, 252, 253, 264, 272, 273, 284, 304, 318, 328, 402, 405, 452, 458, 461, 494, 495, 513, 550, 564, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 633, 641, 644, 670, 671, 712, 724, 745, 747, 759, 761, 775, 776, 789, 795, 799, 820, 826, 827, 843, 844, 849, 866, 871, 878, 913, 919, 1001, 1054, 1063, 1118, 1154, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1201, 1212, 1240, 1241, 1289, 1300, 1310], "show": [30, 39, 187, 192, 207, 226, 240, 318, 482, 565, 799, 825, 858, 869, 913, 1085, 1300, 1314, 1327], "show_graph": [226, 318, 913], "show_plot": [858, 913], "shrink": [262, 318, 636, 799, 1206, 1207, 1300], "shrink_dtyp": [799, 1300], "shrink_to_fit": [318, 1300], "shuffl": [154, 254, 280, 304, 318, 529, 632, 799, 896, 1134, 1199, 1300], "side": [39, 209, 250, 318, 487, 530, 531, 532, 533, 611, 614, 616, 618, 620, 622, 625, 627, 629, 633, 740, 741, 743, 744, 786, 787, 799, 839, 862, 913, 917, 1089, 1135, 1136, 1137, 1138, 1201, 1300], "sign": [64, 65, 67, 71, 72, 73, 74, 80, 432, 603, 670, 671, 694, 799, 919, 1034, 1179, 1240, 1241, 1264, 1300, 1321], "sign_x": 1322, "signed_integ": 919, "signific": [152, 221, 228, 318, 380, 381, 383, 384, 550, 631, 799, 974, 975, 977, 978, 1154, 1198, 1300], "significantli": [138, 228, 304, 318, 1154, 1300, 1331], "silenc": 95, "silent": [689, 1259], "similar": [35, 44, 132, 169, 202, 224, 261, 283, 285, 318, 362, 438, 441, 534, 591, 635, 699, 758, 789, 799, 844, 868, 877, 879, 913, 957, 1040, 1043, 1139, 1205, 1300], "similarli": [39, 123, 209, 224, 250, 288, 318, 432, 436, 449, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 1034, 1038, 1051], "simpl": [39, 239, 318], "simpler": [919, 1240], "simpli": [147, 735, 749], "simplifi": [45, 46, 47, 48, 56, 57, 820, 821, 831, 858, 869, 913], "simplify_express": [45, 46, 47, 48, 56, 57, 820, 821, 831, 858, 869, 913], "sin": [799, 1300, 1321], "sinc": [38, 64, 65, 80, 133, 134, 135, 137, 143, 147, 148, 150, 151, 160, 161, 162, 163, 167, 170, 178, 234, 276, 294, 299, 318, 417, 420, 452, 473, 549, 568, 605, 647, 655, 714, 723, 751, 799, 814, 831, 853, 871, 885, 886, 891, 913, 1015, 1018, 1023, 1024, 1054, 1082, 1181, 1217, 1225, 1281, 1300], "sind": 1321, "sine": [337, 338, 549, 639, 640, 799, 932, 933, 1210, 1211, 1300, 1325], "singl": [39, 44, 50, 56, 57, 58, 132, 133, 134, 135, 136, 137, 138, 145, 147, 148, 150, 161, 180, 189, 190, 191, 192, 197, 204, 210, 219, 228, 241, 251, 253, 264, 275, 276, 318, 351, 392, 410, 432, 474, 477, 480, 510, 516, 549, 550, 602, 605, 607, 609, 644, 647, 662, 663, 667, 674, 685, 714, 724, 728, 729, 730, 756, 760, 761, 779, 787, 795, 799, 817, 820, 821, 827, 828, 829, 871, 913, 919, 946, 990, 1008, 1034, 1068, 1083, 1115, 1121, 1178, 1181, 1183, 1185, 1217, 1232, 1233, 1237, 1244, 1255, 1275, 1281, 1300, 1311], "singlecolselector": 177, "singleindexselector": [177, 923], "sinh": [799, 1300], "sink_csv": 913, "sink_ipc": 913, "sink_ndjson": 913, "sink_parquet": 913, "site_id": [318, 322], "six": [633, 799], "size": [14, 44, 48, 133, 134, 135, 160, 161, 162, 163, 167, 169, 195, 286, 318, 541, 607, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 721, 755, 756, 775, 776, 799, 820, 913, 1061, 1183, 1193, 1300, 1331], "sizeunit": [195, 318, 375, 969, 1061, 1300], "skew": [623, 799, 1193, 1300], "skewtest": [641, 799, 1212, 1300], "skip": [133, 134, 138, 145, 147, 152, 224, 286, 318, 844, 913, 1154, 1300, 1316], "skip_empty_lin": 138, "skip_nul": [550, 799, 1154, 1300], "skip_row": [133, 134, 147], "skip_rows_after_head": [133, 134, 147], "sklearn": [280, 318], "slice": [45, 46, 47, 48, 51, 56, 57, 195, 211, 222, 269, 318, 519, 539, 550, 561, 563, 612, 613, 615, 617, 619, 621, 624, 626, 628, 662, 685, 799, 820, 821, 831, 849, 858, 869, 913, 917, 1061, 1084, 1124, 1144, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1232, 1255, 1272, 1300, 1323], "slice_pushdown": [45, 46, 47, 48, 56, 57, 820, 821, 831, 849, 858, 869, 913], "slide": [402, 799, 1001, 1300], "slightli": [45, 46, 47, 48, 91, 471, 799, 913, 1324], "slot": [402, 406, 511, 799, 1001, 1004, 1116, 1300], "slow": [107, 123, 126, 133, 134, 135, 138, 142, 143, 144, 147, 151, 152, 318, 402, 550, 612, 664, 799, 896, 913, 1001, 1187, 1234, 1300], "slower": [124, 126, 138, 208, 228, 241, 288, 304, 318, 550, 761, 799, 838, 896, 913, 1154, 1300], "small": [11, 136, 436, 913, 1331], "smaller": [44, 48, 195, 318, 913, 1061, 1300], "smallest": [179, 281, 318, 386, 387, 707, 799, 815, 876, 913, 980, 1300, 1317, 1320], "smooth": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "snappi": [34, 44, 48, 318, 913], "snapshot": 149, "snapshot_id": 149, "snowflak": [135, 136], "snowi": [670, 671], "so": [1, 39, 136, 147, 169, 207, 209, 225, 243, 250, 318, 344, 354, 405, 471, 487, 518, 541, 550, 611, 670, 671, 672, 679, 680, 681, 695, 799, 826, 839, 845, 862, 913, 919, 949, 1123, 1240, 1241, 1242, 1249, 1250, 1251], "softwar": [35, 132, 318], "solut": [37, 318], "some": [14, 30, 39, 49, 88, 123, 133, 134, 135, 147, 176, 192, 243, 253, 276, 318, 322, 670, 671, 795, 1094, 1240, 1241, 1300, 1331], "some_account": [657, 1227], "some_t": 1330, "someth": [549, 799], "sometim": [745, 798], "somewher": [657, 1227], "sort": [50, 51, 179, 209, 224, 235, 242, 243, 250, 259, 281, 288, 301, 312, 318, 343, 386, 387, 458, 467, 550, 591, 611, 634, 644, 706, 707, 712, 714, 724, 740, 743, 761, 799, 815, 831, 839, 844, 854, 857, 858, 862, 867, 869, 876, 893, 904, 913, 919, 938, 980, 1063, 1101, 1203, 1285, 1286, 1289, 1300, 1316, 1329, 1331], "sort_bi": 799, "sort_column": [243, 318], "sorted_asc": [1074, 1300], "sorted_desc": [1074, 1300], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 164, 165, 166, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 321, 322, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 799, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 913, 917, 918, 919, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1267, 1268, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1300, 1305, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1328], "source_ac": 127, "source_actor_id": 127, "source_alia": [38, 318], "source_cha": 127, "source_channel_id": 127, "space": [20, 209, 318, 441, 839, 913, 919, 1043], "spam": [231, 318, 657, 1227], "span": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "spanner": [318, 322], "spark": [44, 318], "sparklin": [39, 318], "speak": [641, 799, 1212, 1300], "spearman": 731, "speci": [318, 321], "special": [37, 133, 134, 136, 147, 280, 295, 318, 612, 657, 670, 671, 799, 887, 913, 1154, 1187, 1227, 1240, 1241, 1300], "specif": [1, 30, 38, 39, 40, 41, 91, 120, 122, 124, 126, 133, 136, 137, 138, 142, 143, 144, 148, 149, 151, 180, 221, 223, 270, 275, 318, 438, 441, 684, 686, 687, 691, 712, 799, 817, 843, 913, 918, 919, 1040, 1043, 1254, 1256, 1257, 1261, 1275, 1279, 1289, 1300, 1316, 1328, 1331], "specifi": [36, 37, 38, 39, 44, 45, 50, 92, 95, 98, 113, 116, 133, 138, 144, 145, 147, 152, 164, 179, 180, 195, 196, 199, 204, 208, 209, 223, 241, 243, 250, 251, 253, 256, 257, 261, 264, 275, 281, 284, 292, 293, 297, 318, 387, 392, 441, 457, 459, 460, 461, 466, 591, 604, 606, 613, 615, 617, 619, 621, 624, 626, 628, 635, 644, 699, 707, 724, 727, 728, 729, 730, 740, 741, 743, 744, 745, 747, 777, 781, 786, 787, 795, 799, 815, 817, 832, 834, 838, 839, 843, 862, 864, 865, 868, 871, 876, 878, 883, 884, 889, 913, 919, 990, 1043, 1061, 1062, 1064, 1065, 1071, 1182, 1205, 1279, 1300, 1316, 1330], "speed": [48, 259, 318, 550, 799, 867, 913, 1331], "speedup": [50, 152, 221, 228, 318, 550, 799, 1154, 1300], "split": [1, 39, 44, 51, 222, 318, 655, 676, 677, 1225, 1246, 1247], "split_by_column_dtyp": 53, "split_inclus": 675, "splitfram": [1, 51], "spreadsheet": [35, 132, 138, 144, 243, 318], "spring": [670, 671], "sql": [0, 37, 110, 111, 119, 135, 136, 223, 261, 318, 362, 534, 635, 758, 779, 799, 811, 868, 913, 957, 1139, 1205, 1300, 1309, 1310, 1312, 1314, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1329, 1330], "sql_expr": 1328, "sqlalchemi": [37, 135, 155, 318], "sqlcontext": [265, 318, 778, 872, 913, 1327], "sqlite": [37, 135, 318], "sqrt": [550, 641, 699, 799, 1154, 1212, 1300, 1321], "sqrt_x": 1322, "squar": [1, 54, 304, 499, 607, 645, 799, 896, 1104, 1183, 1215, 1300, 1322], "st": [32, 1331], "stabil": [210, 318, 480, 799, 1083, 1300], "stabl": [145, 174, 185, 187, 188, 210, 254, 258, 265, 318, 405, 480, 546, 564, 705, 799, 825, 826, 853, 866, 871, 872, 913, 921, 1083, 1283, 1300], "stack": [58, 213, 290, 318, 1310], "stai": [549, 637, 799], "standalon": [161, 919], "standard": [10, 39, 266, 275, 280, 318, 423, 459, 624, 625, 641, 646, 665, 780, 795, 799, 873, 913, 1021, 1059, 1064, 1166, 1212, 1216, 1235, 1300, 1317, 1331], "standardis": [39, 318], "start": [39, 131, 133, 134, 136, 138, 139, 141, 143, 144, 145, 147, 150, 151, 152, 169, 203, 208, 209, 226, 263, 288, 294, 295, 318, 371, 374, 376, 410, 418, 428, 433, 436, 449, 450, 461, 475, 517, 535, 610, 614, 616, 618, 620, 622, 625, 627, 629, 642, 648, 653, 657, 661, 669, 674, 678, 679, 681, 682, 685, 694, 721, 726, 735, 739, 740, 741, 742, 743, 744, 747, 749, 755, 756, 786, 787, 789, 795, 799, 837, 838, 839, 858, 870, 886, 887, 913, 919, 970, 1008, 1010, 1013, 1016, 1018, 1019, 1025, 1027, 1029, 1030, 1033, 1035, 1038, 1042, 1051, 1052, 1077, 1122, 1140, 1186, 1213, 1223, 1227, 1231, 1239, 1244, 1248, 1249, 1251, 1255, 1264, 1300, 1316, 1323, 1331], "start_bi": [209, 318, 839, 913], "startbi": [209, 318, 839, 913], "starts_a": 1323, "starts_with": [51, 243, 318, 322, 371, 374, 557, 648, 653, 778, 872, 913, 919, 1223, 1321], "starts_with_expr": 376, "starts_with_lit": 376, "startup": [275, 318], "stat": [499, 641, 799, 1104, 1212, 1300], "state": [4, 5, 103, 735, 811, 831, 858, 869, 913, 1328], "statement": [591, 789, 799, 1314, 1329], "static": [85, 896], "statist": [44, 48, 133, 134, 145, 150, 152, 187, 318, 459, 460, 499, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 641, 799, 825, 913, 1003, 1064, 1065, 1104, 1193, 1212, 1300], "std": [187, 318, 624, 625, 799, 825, 913, 1003, 1194, 1300], "std_dev": [39, 318], "stddev": 1321, "stddev_samp": 1317, "stdev": [39, 318, 1317], "stdev_samp": 1317, "stdout": [172, 207, 318, 566], "step": [286, 318, 471, 721, 755, 756, 799], "steve": [235, 318, 854, 913], "still": [135, 136], "stock": [318, 321], "stop": [131, 133, 134, 139, 141, 143, 145, 147, 150, 151, 152, 614, 616, 618, 620, 622, 625, 627, 629, 799, 1010, 1013, 1018, 1019, 1025, 1027, 1029, 1033, 1038, 1042], "storag": [38, 133, 137, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 318], "storage_opt": [38, 133, 137, 139, 141, 143, 145, 147, 148, 149, 150, 151, 152, 318], "store": [38, 133, 149, 197, 221, 252, 318, 389, 609, 799, 982, 1068, 1185, 1300], "store_id": [591, 799], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 50, 51, 52, 53, 54, 55, 65, 68, 89, 120, 121, 122, 123, 124, 126, 127, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 160, 161, 163, 166, 167, 168, 172, 179, 180, 184, 187, 188, 189, 190, 191, 192, 193, 195, 196, 200, 201, 202, 204, 205, 207, 208, 209, 211, 213, 216, 218, 219, 221, 223, 224, 225, 227, 229, 231, 233, 234, 235, 236, 239, 241, 243, 245, 247, 248, 249, 250, 251, 252, 254, 258, 259, 263, 264, 265, 266, 267, 269, 271, 272, 273, 274, 275, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318, 327, 328, 329, 350, 355, 367, 371, 372, 373, 374, 376, 387, 389, 397, 403, 405, 407, 415, 432, 435, 436, 438, 441, 449, 458, 461, 467, 469, 473, 474, 477, 484, 487, 508, 509, 518, 519, 520, 535, 539, 541, 550, 561, 563, 564, 565, 566, 568, 575, 576, 577, 578, 579, 580, 581, 582, 588, 591, 595, 598, 604, 605, 606, 608, 610, 611, 614, 616, 618, 620, 622, 625, 627, 629, 636, 643, 644, 695, 696, 697, 698, 707, 712, 714, 715, 716, 717, 718, 719, 720, 722, 723, 729, 730, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 747, 748, 749, 750, 751, 752, 753, 754, 757, 758, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 795, 799, 806, 815, 817, 820, 821, 823, 825, 826, 827, 828, 829, 831, 832, 835, 838, 839, 841, 843, 844, 845, 853, 854, 857, 858, 860, 861, 862, 866, 867, 869, 870, 871, 872, 876, 877, 878, 879, 880, 885, 886, 887, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 913, 917, 918, 919, 925, 945, 950, 962, 967, 981, 982, 1002, 1003, 1013, 1034, 1037, 1038, 1040, 1043, 1051, 1063, 1071, 1074, 1113, 1114, 1125, 1146, 1162, 1163, 1164, 1175, 1180, 1181, 1182, 1202, 1265, 1267, 1268, 1276, 1277, 1278, 1279, 1289, 1300, 1306, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1320, 1323, 1324, 1328, 1329, 1331], "str_date": 1323, "str_timestamp": 1323, "strategi": [36, 45, 50, 58, 133, 152, 160, 161, 162, 163, 164, 165, 167, 199, 209, 223, 224, 238, 287, 318, 466, 541, 550, 799, 834, 839, 843, 844, 880, 913, 1071, 1146, 1300], "stream": [14, 40, 41, 45, 46, 47, 48, 56, 57, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 208, 223, 283, 318, 549, 799, 820, 821, 831, 838, 843, 849, 853, 858, 869, 871, 877, 913], "streamabl": [849, 853, 879, 913], "strftime": [91, 441, 1043, 1321, 1323], "strict": [122, 123, 126, 130, 180, 189, 247, 318, 372, 388, 441, 648, 651, 660, 684, 686, 687, 689, 691, 799, 817, 827, 860, 913, 919, 966, 981, 1043, 1218, 1221, 1230, 1254, 1256, 1257, 1259, 1261, 1300], "strictli": [36, 45, 49, 88, 318, 913], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 34, 36, 37, 38, 39, 42, 43, 45, 49, 62, 65, 68, 79, 86, 87, 88, 89, 91, 97, 115, 123, 127, 130, 133, 134, 135, 136, 147, 156, 157, 158, 159, 160, 167, 171, 179, 180, 183, 188, 193, 195, 202, 204, 207, 208, 209, 224, 241, 243, 250, 253, 255, 256, 257, 258, 264, 274, 275, 281, 282, 286, 288, 292, 293, 297, 318, 327, 350, 355, 372, 373, 374, 387, 392, 405, 432, 436, 438, 441, 449, 458, 461, 469, 473, 487, 520, 564, 566, 591, 595, 605, 606, 611, 614, 616, 618, 620, 622, 625, 627, 629, 644, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 699, 707, 715, 717, 719, 724, 727, 728, 729, 730, 738, 740, 741, 743, 744, 750, 763, 765, 768, 777, 781, 783, 786, 787, 789, 795, 799, 811, 815, 817, 822, 826, 830, 831, 838, 839, 844, 862, 863, 864, 865, 866, 871, 876, 883, 884, 889, 913, 918, 919, 950, 966, 967, 968, 983, 1034, 1038, 1040, 1043, 1051, 1063, 1089, 1125, 1181, 1182, 1217, 1218, 1219, 1220, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1267, 1278, 1279, 1300, 1309, 1310, 1318, 1321, 1324, 1327, 1331], "stringcach": [87, 88, 223, 318, 811, 983, 984], "stringio": [142, 143, 473, 799], "strings_hex": 652, "strip": [28, 679, 680, 681, 682, 683, 1249, 1250, 1251, 1323], "strip_chars_end": [681, 683], "strip_chars_start": [680, 682], "strip_prefix": [681, 683], "strip_suffix": [680, 682], "strongli": [39, 169, 228, 251, 304, 318, 550, 799, 1154, 1300], "strpo": 1321, "strpost": 1323, "strptime": [250, 318, 435, 611, 799, 862, 913, 1037, 1321], "struct": [8, 116, 127, 239, 256, 279, 284, 292, 318, 367, 403, 482, 541, 549, 550, 576, 578, 580, 598, 609, 610, 658, 664, 676, 677, 705, 712, 735, 736, 738, 760, 799, 864, 878, 883, 896, 913, 962, 1002, 1146, 1154, 1175, 1185, 1228, 1234, 1246, 1247, 1281, 1283, 1300], "struct_col": [695, 697, 698], "struct_seri": 896, "structarrai": [195, 318, 1061, 1300], "structfieldnotfounderror": 697, "structur": [39, 40, 41, 97, 100, 114, 130, 197, 242, 253, 270, 276, 318, 595, 799, 857, 913, 1068, 1275, 1300, 1328], "student": [243, 318], "style": [7, 20, 39, 135, 243, 318], "sub": [304, 348, 349, 350, 353, 354, 355, 356, 357, 358, 359, 360, 364, 365, 369, 520, 527, 799, 943, 944, 945, 948, 949, 950, 951, 952, 953, 954, 955, 959, 960, 964, 1125, 1132], "subarrai": [346, 347, 941, 942], "subclass": [1, 318], "subexpress": [56, 57, 820, 821, 831, 858, 869, 913], "subinterv": 1317, "subject": [44, 243, 318], "sublist": [354, 506, 507, 509, 511, 515, 516, 517, 518, 519, 520, 521, 530, 535, 539, 541, 949, 1094, 1111, 1112, 1114, 1116, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1135, 1140, 1144, 1146, 1300], "subplan": [56, 57, 820, 821, 831, 858, 869, 913], "subsequ": [39, 145, 152, 246, 277, 318, 541, 778, 789, 831, 913, 1282, 1300, 1315], "subset": [191, 192, 239, 283, 318, 828, 829, 877, 913], "substr": [371, 374, 376, 648, 653, 660, 670, 671, 674, 675, 676, 677, 678, 919, 965, 968, 970, 1218, 1223, 1230, 1240, 1241, 1244, 1245, 1246, 1247, 1248, 1321], "subtl": [39, 318], "subtli": [471, 799], "subtract": [499, 700, 799, 1104, 1300], "succe": [133, 134, 147], "success": [650, 657, 1220, 1227], "successfulli": [820, 913], "suffix": [223, 224, 225, 256, 292, 297, 318, 329, 374, 387, 494, 495, 496, 497, 555, 575, 577, 580, 581, 582, 608, 653, 680, 683, 707, 799, 843, 844, 845, 864, 883, 885, 889, 913, 919, 968, 1223, 1253], "suffix_field": [576, 578], "sugar": [287, 318, 605, 606, 672, 716, 718, 720, 732, 734, 737, 747, 752, 753, 754, 762, 764, 766, 767, 769, 771, 772, 777, 780, 782, 784, 788, 790, 799, 880, 913, 1181, 1182, 1215, 1242, 1300], "suitabl": [50, 58, 135, 161, 228, 318, 550, 633, 799, 1154, 1201, 1300], "sum": [39, 195, 202, 208, 209, 219, 243, 250, 268, 297, 318, 400, 401, 405, 454, 467, 541, 550, 561, 563, 564, 565, 566, 567, 605, 606, 611, 626, 627, 714, 716, 728, 735, 737, 738, 749, 761, 773, 783, 799, 820, 821, 826, 831, 838, 839, 856, 858, 862, 866, 869, 889, 913, 917, 919, 999, 1000, 1057, 1061, 1195, 1300, 1309, 1316, 1318, 1321, 1328], "sum_": [641, 799, 1212, 1300], "sum_a": [250, 318, 611, 799, 862, 913], "sum_horizont": [50, 318, 782], "summari": [187, 318, 825, 913, 1003, 1300, 1316], "summer": [670, 671], "sun": [318, 321, 684, 1254], "sundai": [209, 318, 410, 438, 441, 451, 726, 839, 913, 1008, 1040, 1043, 1053], "sunni": [670, 671, 1240, 1241], "supercast": [202, 318], "supertyp": [58, 199, 276, 280, 318, 333, 729, 799, 834, 913, 917, 1300], "suppli": [37, 39, 120, 122, 123, 124, 126, 135, 142, 143, 151, 200, 251, 275, 318, 467, 595, 799, 835, 913, 1279, 1300], "support": [1, 37, 38, 39, 44, 58, 120, 121, 122, 123, 124, 125, 126, 127, 135, 136, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 160, 164, 167, 172, 221, 222, 223, 224, 252, 253, 263, 264, 272, 277, 280, 318, 441, 458, 535, 591, 605, 606, 642, 644, 649, 659, 661, 662, 670, 671, 672, 674, 685, 795, 799, 805, 820, 843, 844, 870, 871, 913, 919, 1043, 1063, 1140, 1181, 1182, 1213, 1219, 1229, 1231, 1232, 1240, 1241, 1242, 1244, 1255, 1282, 1284, 1300, 1304, 1318, 1323, 1324, 1326, 1327, 1328], "supportsinterchang": 121, "suppos": [177, 243, 318, 550, 799, 1154, 1300], "sure": [58, 120, 125, 133, 134, 137, 139, 141, 145, 148, 246, 318, 799, 917], "surreal": 135, "surreal_query_to_fram": 135, "surrealdb": 135, "surrealhttp": 135, "surrealql": 135, "suscept": 913, "swap": [860, 913], "swim": 730, "switch": [411, 820, 913, 1009], "sy": 172, "sydnei": 742, "symbol": [35, 36, 45, 318, 799, 913], "symmetr": [532, 919, 1137], "symmetri": [823, 830, 863, 882, 913], "synchron": 907, "syntact": [287, 318, 605, 606, 672, 716, 718, 720, 732, 734, 737, 747, 752, 753, 754, 762, 764, 766, 767, 769, 771, 772, 777, 780, 782, 784, 788, 790, 799, 880, 913, 1181, 1182, 1215, 1242, 1300], "syntax": [39, 111, 200, 228, 239, 318, 565, 648, 656, 657, 660, 670, 671, 755, 756, 795, 835, 869, 913, 1218, 1226, 1227, 1230, 1240, 1241, 1300, 1324, 1326], "system": [35, 133, 134, 318, 415, 820, 913, 1013], "t": [35, 36, 38, 45, 58, 132, 133, 138, 144, 147, 209, 224, 228, 242, 283, 286, 318, 402, 411, 419, 435, 441, 454, 457, 459, 460, 513, 550, 591, 595, 656, 660, 670, 671, 681, 684, 687, 692, 789, 799, 839, 844, 857, 877, 913, 919, 1001, 1037, 1043, 1057, 1062, 1064, 1065, 1118, 1154, 1226, 1230, 1240, 1241, 1250, 1251, 1254, 1257, 1262, 1300, 1312, 1313, 1323], "t_": [284, 318, 458, 799, 878, 913, 1063, 1300], "t_0": [250, 318, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 799, 862, 913, 1063, 1300], "t_1": [250, 318, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 799, 862, 913, 1063, 1300], "t_a": [284, 318, 878, 913], "t_b": [284, 318, 878, 913], "t_c": [284, 318, 878, 913], "t_d": [284, 318, 878, 913], "t_i": [458, 799, 1063, 1300], "t_id": [225, 318, 845, 913], "t_n": [250, 318, 611, 614, 616, 618, 620, 622, 625, 627, 629, 799, 862, 913], "t_struct": [284, 318, 878, 913], "tab_spann": [318, 322], "tab_stub": [318, 322], "tab_styl": [318, 322], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 37, 38, 39, 120, 127, 130, 137, 138, 144, 148, 149, 223, 225, 243, 265, 270, 277, 286, 287, 318, 322, 778, 811, 843, 845, 872, 880, 913, 1310, 1311, 1312, 1313, 1315, 1316, 1327, 1328], "table_nam": [37, 39, 265, 318, 872, 913], "table_path": [38, 137, 148, 149, 318], "table_styl": [39, 318], "tablemerg": [38, 318], "tablenotfounderror": [38, 318], "tables_scale_100": [129, 134], "tail": [207, 211, 318, 333, 641, 799, 913, 1084, 1212, 1300], "take": [39, 130, 138, 144, 163, 164, 172, 202, 203, 209, 232, 235, 242, 243, 247, 318, 343, 410, 432, 467, 474, 475, 516, 517, 549, 576, 578, 580, 644, 724, 726, 746, 748, 757, 799, 837, 839, 854, 860, 913, 938, 1008, 1034, 1076, 1077, 1121, 1122, 1291, 1300, 1318], "taken": [535, 674, 1140, 1244], "talkin": [692, 1262], "tan": [799, 1300, 1321], "tand": 1321, "tangent": [339, 340, 703, 704, 799, 934, 935, 1273, 1274, 1300, 1325], "tanh": [243, 318, 799, 1300], "target": [1, 37, 38, 39, 55, 138, 280, 318, 656, 670, 671, 684, 686, 687, 919, 1226, 1240, 1241, 1254, 1256, 1257, 1323], "target_alia": [38, 318], "target_t": [37, 318], "task": [57, 821, 913], "tau": [457, 458, 799, 1062, 1063, 1300], "tb": [156, 158, 195, 318, 375, 1061, 1300], "tbl": [129, 134, 1330], "tbl0": 1315, "tbl1": [1313, 1315], "tbl2": [1313, 1315], "tbl3": 1313, "tbl4": 1313, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": 20, "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 187, 318, 825, 913], "tbl_width_char": 745, "td": 441, "td1": 919, "td2": 919, "td3": 919, "tdf": [242, 318], "technic": 795, "tell": [649, 672, 1219, 1242], "tempor": [91, 180, 209, 221, 250, 252, 253, 272, 318, 392, 441, 487, 611, 614, 616, 618, 620, 622, 625, 627, 629, 799, 811, 817, 839, 862, 913, 919, 990, 1043, 1089, 1300, 1321, 1327], "temporalliter": [392, 799, 990, 1023, 1024, 1300], "temporari": [37, 318], "temporarili": [169, 172, 209, 250, 318, 611, 799, 839, 862, 913], "tend": [156, 158], "tensor": [280, 318, 1284, 1300], "tensordataset": [280, 318], "term": [457, 459, 460, 662, 674, 685, 799, 1062, 1064, 1065, 1232, 1244, 1255, 1300], "termin": [36, 45, 318, 913], "test": [0, 37, 135, 136, 138, 144, 194, 243, 318, 811, 1060, 1300], "test1": 1315, "test2": 1315, "test3": 1315, "test_1": [243, 318], "test_1_math": [243, 318], "test_1_phys": [243, 318], "test_2": [243, 318], "test_2_math": [243, 318], "test_2_phys": [243, 318], "test_data": 135, "test_df_height": 163, "test_func": 760, "test_lf": [885, 913], "test_miscellan": 1331, "test_numer": 1331, "test_price_calcul": 1331, "test_series_len": 167, "test_tabl": 136, "test_unique_xyz": 161, "testdb": 136, "testing1234": 1315, "text": [132, 135, 654, 662, 666, 667, 670, 671, 673, 674, 685, 779, 1232, 1236, 1237, 1243, 1244, 1255, 1315, 1331], "text1": 671, "text2": 671, "textclaus": 135, "texttt": [641, 799, 1212, 1300], "th": [203, 318, 475, 517, 530, 641, 662, 685, 799, 837, 913, 1077, 1122, 1135, 1212, 1232, 1255, 1300], "than": [39, 45, 46, 47, 48, 56, 57, 94, 117, 124, 126, 133, 134, 135, 138, 144, 147, 153, 181, 208, 221, 223, 224, 228, 241, 251, 252, 254, 286, 304, 318, 471, 473, 476, 478, 487, 501, 529, 548, 549, 550, 566, 598, 610, 632, 641, 662, 666, 668, 669, 677, 685, 694, 731, 761, 799, 820, 821, 838, 843, 844, 896, 913, 1089, 1134, 1154, 1175, 1186, 1199, 1212, 1232, 1236, 1238, 1239, 1247, 1255, 1264, 1281, 1300, 1331], "the_aws_access_key_id": [38, 137, 148, 149, 318], "the_aws_region": [38, 318], "the_aws_secret_access_kei": [38, 137, 148, 149, 318], "thei": [36, 39, 45, 49, 57, 58, 87, 88, 123, 147, 172, 224, 226, 253, 318, 591, 672, 680, 681, 799, 820, 844, 913, 917, 919, 1242], "them": [57, 120, 122, 123, 124, 126, 135, 136, 138, 142, 143, 144, 145, 147, 150, 151, 152, 196, 197, 209, 224, 235, 243, 250, 280, 288, 318, 355, 458, 487, 520, 583, 584, 591, 611, 729, 740, 741, 743, 744, 786, 787, 799, 821, 832, 839, 844, 854, 862, 913, 919, 950, 1063, 1068, 1125, 1163, 1164, 1300, 1318, 1328], "therebi": [147, 150, 151], "therefor": [195, 318, 550, 789, 799, 1061, 1300], "theta": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 35, 36, 37, 38, 39, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 64, 65, 66, 67, 68, 80, 88, 95, 120, 122, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 174, 176, 177, 178, 179, 182, 183, 185, 187, 188, 191, 192, 195, 197, 201, 202, 207, 208, 209, 210, 214, 216, 218, 219, 220, 221, 223, 224, 225, 226, 228, 229, 231, 233, 234, 235, 236, 238, 239, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 253, 254, 256, 257, 258, 259, 261, 263, 265, 266, 267, 270, 272, 275, 276, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 292, 293, 294, 295, 299, 304, 317, 318, 321, 322, 330, 333, 334, 343, 355, 361, 362, 363, 368, 386, 387, 389, 392, 402, 403, 405, 411, 412, 423, 429, 430, 432, 435, 436, 438, 441, 452, 456, 463, 473, 480, 482, 484, 485, 487, 491, 513, 514, 520, 529, 530, 531, 532, 533, 534, 536, 541, 542, 546, 547, 549, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 568, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 591, 598, 601, 602, 603, 604, 605, 606, 607, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 634, 635, 636, 637, 642, 643, 644, 647, 649, 656, 659, 661, 663, 664, 668, 669, 672, 679, 680, 681, 682, 683, 688, 692, 694, 696, 699, 706, 707, 709, 710, 711, 712, 716, 720, 728, 729, 732, 734, 735, 748, 749, 751, 753, 754, 757, 758, 761, 764, 766, 769, 771, 775, 776, 777, 780, 784, 788, 789, 790, 795, 799, 811, 814, 815, 816, 819, 820, 821, 822, 823, 825, 826, 828, 829, 830, 831, 838, 839, 841, 843, 844, 845, 847, 849, 853, 854, 858, 860, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 876, 877, 879, 880, 882, 883, 884, 885, 886, 887, 888, 891, 896, 910, 911, 912, 913, 917, 919, 921, 928, 929, 938, 950, 956, 957, 958, 963, 980, 982, 984, 985, 990, 991, 1001, 1002, 1009, 1010, 1012, 1021, 1031, 1032, 1034, 1037, 1038, 1040, 1043, 1054, 1056, 1059, 1061, 1067, 1068, 1077, 1079, 1083, 1085, 1094, 1103, 1118, 1119, 1125, 1134, 1135, 1136, 1137, 1138, 1139, 1141, 1147, 1152, 1154, 1155, 1156, 1157, 1158, 1160, 1161, 1162, 1163, 1164, 1166, 1169, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1213, 1214, 1216, 1217, 1219, 1226, 1229, 1231, 1233, 1234, 1238, 1239, 1242, 1249, 1250, 1251, 1258, 1262, 1264, 1265, 1267, 1270, 1271, 1275, 1277, 1279, 1280, 1281, 1282, 1284, 1285, 1286, 1288, 1289, 1290, 1300, 1305, 1309, 1310, 1311, 1315, 1323, 1326, 1327, 1328, 1329, 1331], "thing": [147, 154], "think": [429, 430, 1031, 1032], "third": [549, 799], "thoma": [235, 318, 854, 913], "those": [5, 30, 39, 133, 253, 277, 287, 318, 471, 601, 656, 761, 799, 880, 913, 919, 1177, 1226, 1282, 1300], "though": [37, 135, 209, 318, 795, 839, 913], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 36, 45, 57, 129, 133, 134, 136, 169, 170, 264, 318, 513, 550, 644, 724, 799, 821, 871, 913, 958, 1118, 1141, 1214, 1300], "thread_loc": [550, 799], "thread_pool_s": 170, "threadpool": 56, "three": [39, 177, 250, 279, 318, 403, 598, 611, 633, 662, 670, 685, 799, 862, 913, 962, 1002, 1146, 1175, 1232, 1241, 1255, 1300], "threshold": [256, 318, 864, 913], "through": [121, 135, 795, 919, 1300, 1315], "throw": [38, 122, 123, 126, 180, 189, 247, 318, 664, 665, 817, 827, 860, 913, 1234, 1235, 1300], "thu": [39, 197, 318, 321, 731, 1068, 1300], "thursdai": [209, 318, 410, 726, 839, 913, 1008], "ti": [601, 799, 1177, 1300], "time": [12, 38, 55, 56, 57, 65, 67, 104, 137, 143, 145, 147, 148, 150, 151, 152, 163, 164, 167, 187, 197, 209, 224, 225, 250, 288, 318, 350, 386, 387, 411, 412, 414, 415, 416, 419, 420, 429, 430, 432, 435, 436, 438, 440, 441, 449, 452, 458, 508, 509, 541, 610, 611, 614, 616, 618, 620, 622, 625, 627, 629, 637, 684, 687, 691, 705, 706, 707, 729, 730, 740, 741, 742, 743, 744, 745, 751, 786, 787, 799, 820, 821, 825, 839, 844, 845, 858, 862, 913, 919, 945, 980, 1009, 1010, 1012, 1013, 1017, 1018, 1034, 1037, 1038, 1040, 1042, 1043, 1051, 1054, 1063, 1068, 1113, 1114, 1186, 1208, 1254, 1257, 1261, 1283, 1285, 1300, 1309, 1315, 1324, 1331], "time_column": [288, 318], "time_format": [36, 45, 318, 913], "time_unit": [65, 67, 412, 414, 420, 440, 452, 687, 742, 743, 744, 745, 751, 918, 919, 1010, 1012, 1018, 1042, 1054, 1257], "time_unit_m": [412, 1010], "time_unit_n": [412, 1010], "time_unit_u": 452, "time_zon": [65, 415, 417, 435, 687, 742, 743, 744, 918, 919, 1009, 1013, 1017, 1037, 1257], "timedelta": [209, 224, 250, 288, 318, 432, 436, 441, 449, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 740, 741, 743, 744, 786, 787, 799, 839, 844, 862, 913, 918, 919, 1022, 1028, 1034, 1038, 1051, 1063, 1163, 1164, 1216, 1290, 1300], "timeout": [57, 821, 913], "timestamp": [127, 137, 148, 209, 318, 435, 436, 449, 751, 839, 913, 1037, 1038, 1051, 1321], "timestamp_m": 440, "timestamp_n": 1042, "timestamp_u": [440, 1042], "timestep": 751, "timeunit": [36, 45, 65, 67, 318, 412, 414, 440, 452, 687, 742, 743, 744, 745, 913, 919, 1010, 1012, 1042, 1054, 1257], "timezon": [65, 137, 148, 417, 919, 1324], "tip": [550, 799], "titl": [39, 318, 1309], "titlecas": [692, 1262], "tm": [414, 441, 919, 1324], "to_arrow": [222, 318, 1281, 1300, 1328], "to_batch": [222, 318], "to_dict": [180, 253, 318, 817, 913, 919], "to_dummi": [275, 280, 318, 1300], "to_fram": [389, 420, 436, 440, 449, 684, 1002, 1175, 1200, 1202, 1246, 1247, 1254, 1300, 1305], "to_init_repr": [127, 318, 1300], "to_jax": [280, 318, 1300], "to_list": [127, 250, 318, 1218, 1230, 1300], "to_lowercas": 582, "to_numpi": [275, 280, 318, 549, 799, 1300], "to_panda": [318, 1300], "to_phys": [799, 984, 1300], "to_python": 918, "to_seri": [51, 204, 318, 684, 725, 774, 1254], "to_sql": [37, 318], "to_str": [438, 1040], "to_struct": [318, 657], "to_torch": [275, 318, 1300], "to_uppercas": [329, 581, 658, 799], "togeth": 1323, "token": [143, 145, 147, 149, 150, 151, 152], "tokyo": [127, 919], "tokyo_tz": 919, "toler": [156, 157, 158, 159, 224, 318, 844, 913], "tone": [39, 318], "tonight": [649, 672, 1219, 1242], "too": [14, 243, 318, 591, 799, 913], "tooltip": [318, 321, 1300, 1305], "toomanyrowsreturnederror": [251, 318], "top": [39, 265, 281, 318, 321, 707, 799, 872, 876, 913, 1300, 1305, 1328], "top_col": [39, 318], "top_k": [179, 318, 386, 387, 707, 799, 815, 913, 980, 1300], "top_k_bi": [386, 387, 706, 799], "top_row": [39, 318], "tor_id": 127, "torch": [155, 280, 318, 1284, 1300], "torchexporttyp": [280, 318], "total": [39, 195, 299, 318, 442, 443, 444, 445, 446, 447, 448, 502, 522, 799, 891, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1061, 1107, 1127, 1300], "total_gross": 1309, "toward": [299, 502, 522, 799, 891, 1107, 1127, 1300], "tp": [1, 53], "tpu": [275, 318, 1279, 1300], "traceback": [156, 157, 158, 159, 276, 318, 606, 799, 1182, 1281, 1300], "tracebacktyp": 1328, "track": [137, 148, 149, 228, 318, 541, 1328], "trail": [28, 207, 318, 679, 680, 1249, 1250], "train": [280, 318], "train_lf": [885, 913], "transfer": 136, "transferencod": [372, 373, 651, 652, 966, 967, 1221, 1222], "transform": [228, 265, 318, 549, 692, 778, 799, 872, 913, 1262], "transform_dens": [1300, 1305], "transit": [200, 318, 835, 913], "translat": 135, "transpar": [820, 913], "transpos": [243, 318], "travel": [137, 148], "travers": [613, 615, 617, 619, 621, 624, 626, 628, 799, 1188, 1189, 1191, 1194, 1195, 1196, 1300], "treat": [133, 134, 147, 174, 458, 648, 650, 660, 670, 671, 789, 799, 921, 1063, 1218, 1220, 1230, 1240, 1241, 1300], "tree": [566, 831, 913], "tree_format": [831, 913], "trend": [39, 318], "tri": [228, 318], "triangl": [304, 896], "trigger": [38, 226, 277, 318, 799, 917, 1282, 1300], "trigonometri": [1321, 1327], "trim": [127, 1323], "trim_decimal_zero": 28, "trip": 135, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 36, 37, 38, 39, 44, 45, 46, 47, 48, 56, 57, 58, 120, 121, 122, 123, 125, 126, 127, 129, 130, 133, 134, 135, 137, 138, 139, 141, 144, 145, 147, 148, 150, 152, 153, 156, 157, 158, 159, 160, 161, 163, 164, 166, 167, 172, 176, 180, 181, 182, 187, 189, 194, 199, 200, 202, 204, 206, 207, 208, 209, 214, 216, 217, 218, 221, 223, 224, 225, 226, 231, 232, 238, 239, 241, 243, 244, 247, 251, 252, 253, 254, 256, 264, 265, 268, 271, 273, 275, 276, 277, 280, 282, 283, 284, 286, 287, 288, 292, 298, 300, 302, 305, 306, 307, 308, 309, 310, 311, 318, 321, 328, 329, 330, 331, 332, 333, 344, 346, 347, 350, 354, 355, 363, 367, 371, 372, 374, 376, 387, 388, 397, 398, 399, 400, 401, 403, 410, 412, 415, 418, 420, 422, 429, 430, 432, 433, 435, 436, 437, 440, 442, 443, 444, 445, 446, 447, 448, 449, 451, 452, 454, 455, 456, 457, 459, 460, 467, 474, 476, 477, 478, 479, 482, 485, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 504, 505, 509, 516, 518, 520, 536, 541, 548, 549, 550, 554, 555, 556, 557, 558, 559, 560, 561, 562, 565, 566, 567, 585, 586, 588, 590, 593, 594, 598, 603, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 636, 637, 641, 643, 644, 647, 648, 649, 650, 651, 653, 659, 660, 661, 663, 664, 665, 670, 671, 675, 676, 678, 684, 686, 687, 689, 691, 695, 697, 698, 707, 709, 712, 715, 716, 717, 718, 719, 721, 724, 725, 726, 731, 740, 743, 749, 755, 761, 771, 774, 778, 781, 786, 789, 790, 799, 817, 818, 819, 820, 821, 825, 827, 831, 834, 835, 838, 839, 843, 844, 845, 847, 849, 853, 858, 860, 864, 869, 871, 872, 877, 878, 879, 880, 883, 888, 890, 892, 894, 897, 898, 899, 900, 901, 902, 903, 912, 913, 917, 918, 919, 926, 927, 939, 941, 942, 945, 949, 950, 958, 965, 966, 968, 970, 981, 983, 985, 988, 989, 1002, 1008, 1009, 1010, 1013, 1016, 1017, 1018, 1019, 1020, 1024, 1025, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1057, 1059, 1060, 1062, 1064, 1065, 1072, 1081, 1085, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1109, 1110, 1114, 1121, 1123, 1125, 1141, 1154, 1160, 1166, 1168, 1171, 1172, 1175, 1178, 1179, 1193, 1212, 1214, 1217, 1218, 1219, 1220, 1221, 1223, 1229, 1230, 1231, 1233, 1234, 1235, 1240, 1241, 1245, 1246, 1248, 1254, 1256, 1257, 1259, 1261, 1276, 1281, 1282, 1289, 1291, 1300, 1305, 1309, 1310, 1312, 1314, 1318, 1320, 1323, 1328, 1331], "truediv": [471, 799], "truncat": [20, 127, 133, 134, 147, 207, 209, 221, 252, 253, 272, 318, 839, 858, 913, 1327], "truncate_nod": [858, 913], "truncate_ragged_lin": [133, 134, 147], "truncate_str": 449, "truncate_td": 449, "trust": [405, 799, 826, 913], "try": [56, 57, 114, 133, 134, 139, 143, 145, 147, 150, 151, 152, 820, 821, 831, 858, 869, 913], "try_cast": 1321, "try_parse_d": [129, 133, 134, 147], "try_parse_hive_d": [145, 150, 152], "ts_local": [435, 1037], "tseri": [429, 430, 1031, 1032], "tstamp": 919, "tstamp_tokyo": 919, "tstamp_utc": 919, "tue": [318, 321], "tuesdai": [209, 318, 839, 913], "tupl": [39, 59, 136, 138, 144, 177, 221, 228, 241, 251, 252, 253, 260, 280, 296, 318, 565, 607, 799, 858, 869, 913, 918, 919, 1183, 1204, 1300], "turn": [8, 45, 46, 47, 48, 56, 57, 133, 134, 147, 223, 224, 318, 820, 821, 831, 843, 844, 849, 858, 913], "twice": [39, 318], "two": [39, 49, 87, 88, 122, 124, 126, 136, 177, 200, 202, 224, 225, 234, 235, 252, 279, 285, 298, 304, 318, 322, 328, 407, 414, 471, 474, 477, 541, 598, 643, 722, 723, 729, 731, 733, 740, 743, 775, 776, 778, 799, 835, 844, 845, 853, 854, 879, 890, 896, 913, 919, 962, 1005, 1012, 1146, 1175, 1300, 1315, 1316, 1317, 1320, 1329], "two_a": 1328, "tworld": [681, 1249, 1251], "txt": [1, 12, 147, 648, 660, 1230], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 38, 39, 45, 46, 47, 48, 51, 52, 53, 54, 56, 57, 59, 60, 61, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 120, 122, 123, 124, 125, 126, 128, 133, 134, 135, 137, 138, 142, 143, 144, 145, 147, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 162, 163, 164, 165, 167, 174, 177, 183, 193, 196, 202, 207, 209, 210, 222, 223, 228, 250, 255, 270, 275, 276, 279, 280, 283, 295, 318, 330, 332, 335, 336, 337, 338, 339, 340, 343, 348, 349, 350, 352, 355, 366, 367, 371, 372, 373, 374, 375, 376, 388, 389, 392, 393, 394, 395, 396, 403, 404, 410, 411, 413, 415, 416, 417, 418, 419, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 458, 461, 463, 474, 477, 480, 487, 488, 489, 490, 491, 492, 493, 502, 506, 507, 509, 514, 520, 522, 540, 541, 549, 550, 598, 600, 604, 605, 606, 607, 609, 610, 611, 638, 639, 640, 647, 650, 651, 652, 655, 656, 657, 658, 661, 662, 663, 665, 666, 667, 674, 675, 676, 677, 684, 685, 689, 703, 704, 705, 712, 721, 729, 732, 739, 740, 741, 742, 743, 744, 745, 747, 755, 756, 758, 759, 760, 761, 771, 774, 785, 786, 787, 790, 795, 799, 811, 820, 821, 830, 831, 832, 839, 843, 858, 862, 863, 869, 877, 887, 913, 918, 921, 926, 927, 939, 941, 942, 943, 944, 945, 947, 949, 950, 961, 962, 963, 965, 966, 967, 969, 981, 982, 990, 1002, 1003, 1008, 1009, 1011, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1041, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1060, 1063, 1067, 1083, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1109, 1110, 1111, 1112, 1114, 1119, 1125, 1127, 1145, 1146, 1168, 1175, 1181, 1182, 1183, 1185, 1186, 1207, 1209, 1217, 1218, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1231, 1232, 1233, 1235, 1236, 1237, 1244, 1245, 1246, 1247, 1254, 1255, 1259, 1280, 1281, 1283, 1291, 1300, 1309, 1316, 1321, 1323, 1327, 1328], "type_coercion": [45, 46, 47, 48, 56, 57, 820, 821, 831, 858, 869, 913], "typeerror": [38, 318], "typenam": [39, 318], "typic": [123, 135, 152, 228, 318, 419, 638, 799, 919, 1017, 1154, 1209, 1300], "tz": [687, 1257], "tzinfo": [137, 148, 919], "u": [39, 65, 67, 152, 165, 224, 318, 412, 414, 420, 440, 452, 684, 687, 717, 719, 742, 743, 744, 745, 751, 844, 913, 918, 919, 1010, 1012, 1018, 1042, 1054, 1254, 1257, 1313, 1324], "u1": [276, 318], "u16": [147, 1326, 1331], "u32": [12, 135, 178, 180, 186, 240, 294, 295, 299, 303, 309, 311, 318, 328, 334, 341, 342, 343, 344, 345, 348, 349, 351, 360, 375, 396, 397, 482, 502, 506, 507, 510, 522, 527, 573, 589, 601, 609, 610, 614, 616, 618, 620, 622, 625, 627, 629, 633, 650, 660, 661, 666, 667, 705, 710, 712, 716, 720, 724, 725, 732, 734, 755, 758, 769, 799, 814, 817, 824, 856, 886, 887, 891, 895, 901, 903, 913, 919, 938, 939, 940, 943, 944, 946, 955, 981, 984, 996, 1085, 1111, 1112, 1115, 1127, 1132, 1177, 1185, 1186, 1201, 1220, 1230, 1231, 1236, 1237, 1283, 1287, 1289, 1300, 1309, 1317, 1318, 1319, 1323, 1328], "u64": [210, 295, 318, 480, 603, 799, 858, 887, 913, 919, 1083, 1179, 1300], "u8": [180, 273, 274, 286, 318, 606, 715, 799, 817, 913, 919, 1182, 1276, 1300, 1331], "udf": [169, 228, 242, 304, 318, 405, 550, 595, 761, 799, 826, 857, 896, 913, 1154, 1300], "ufunc": 94, "uid": 135, "uint": 1331, "uint16": [147, 400, 401, 701, 799, 919, 999, 1000, 1271, 1281, 1284, 1300], "uint2": 1326, "uint32": [128, 155, 180, 195, 250, 295, 318, 343, 348, 349, 375, 396, 458, 474, 477, 502, 506, 507, 522, 604, 609, 610, 611, 650, 661, 666, 667, 705, 732, 755, 758, 799, 817, 862, 887, 913, 919, 939, 943, 944, 969, 981, 1061, 1063, 1111, 1112, 1127, 1185, 1186, 1220, 1231, 1236, 1237, 1283, 1284, 1300], "uint4": 1328, "uint64": [128, 210, 250, 295, 318, 348, 349, 458, 480, 506, 507, 603, 611, 799, 862, 887, 913, 919, 943, 944, 1063, 1083, 1111, 1112, 1179, 1284, 1300], "uint8": [135, 180, 274, 275, 276, 286, 318, 400, 401, 606, 701, 715, 799, 817, 913, 918, 919, 999, 1000, 1182, 1271, 1284, 1300, 1331], "uint8_pair": 1331, "uit": [674, 1244], "uk": [657, 1227], "unabl": [96, 138], "unalias": 556, "unari": [587, 799], "unbias": [459, 460, 799, 1064, 1065, 1300], "unchang": [195, 318, 605, 705, 799, 849, 896, 913, 1061, 1181, 1283, 1300], "uncompress": [34, 40, 41, 44, 48, 139, 150, 318, 913], "undefin": [708, 799], "under": [49, 51, 52, 53, 54, 87, 88, 143, 145, 147, 150, 151, 152, 243, 265, 318, 791, 792, 794, 795, 800, 801, 804, 806, 807, 808, 872, 913, 1292, 1294, 1296, 1301, 1306, 1307, 1308], "underli": [1, 49, 64, 65, 67, 80, 88, 93, 103, 120, 122, 123, 124, 126, 135, 136, 138, 142, 143, 145, 151, 160, 163, 167, 196, 197, 221, 222, 252, 270, 276, 318, 372, 412, 413, 414, 418, 421, 422, 423, 424, 425, 426, 427, 428, 431, 433, 434, 435, 437, 441, 450, 451, 452, 453, 603, 630, 648, 651, 660, 799, 832, 913, 919, 966, 984, 1010, 1011, 1012, 1016, 1019, 1020, 1021, 1025, 1026, 1027, 1029, 1030, 1033, 1035, 1036, 1037, 1039, 1043, 1052, 1053, 1054, 1055, 1068, 1179, 1197, 1207, 1218, 1221, 1230, 1275, 1281, 1300, 1328], "understood": 761, "undo": [567, 574, 575, 577, 579, 581, 582], "unexpect": [103, 112, 135, 549, 550, 799, 1154, 1300], "unhelpfulli": [156, 158], "unicod": [20, 662, 667, 674, 685, 919, 1232, 1237, 1244, 1255], "unifi": [39, 275, 280, 318, 919], "uniform": [39, 318, 598, 799, 1175, 1300], "unimod": [641, 799, 1212, 1300], "unintend": [200, 318, 835, 913], "union": [56, 57, 58, 533, 820, 821, 831, 858, 869, 913, 919, 1138, 1327, 1328], "uniqu": [44, 48, 50, 160, 161, 162, 165, 167, 178, 218, 223, 239, 243, 253, 309, 318, 334, 345, 360, 403, 498, 527, 573, 598, 684, 686, 687, 691, 710, 712, 720, 769, 799, 814, 843, 901, 913, 917, 929, 940, 955, 1002, 1102, 1132, 1161, 1175, 1254, 1256, 1257, 1261, 1287, 1289, 1300, 1316, 1318], "unique_column_valu": [243, 318], "unique_count": [799, 1300], "uniquekeepstrategi": [283, 318, 877, 913], "unit": [39, 65, 67, 156, 157, 158, 159, 163, 167, 195, 318, 375, 412, 414, 420, 440, 452, 458, 464, 547, 562, 684, 687, 711, 728, 742, 743, 744, 745, 751, 799, 858, 913, 917, 919, 969, 1010, 1012, 1018, 1042, 1054, 1061, 1063, 1069, 1152, 1254, 1257, 1288, 1300, 1331], "univers": [174, 921], "unix": [64, 65, 420, 751, 1018], "unknown": [541, 656, 759, 1226], "unless": [39, 50, 122, 275, 280, 318, 679, 680, 774, 913, 1249, 1323], "unlik": [130, 209, 318, 839, 913], "unnam": [658, 1228], "unnest": [130, 318, 403, 598, 609, 657, 658, 676, 677, 697, 699, 712, 799, 913, 962, 1002, 1146, 1175, 1185, 1246, 1247, 1300, 1321, 1327], "unpivot": [234, 318, 853, 913], "unregist": [1311, 1312, 1313, 1328, 1330], "unsaf": [799, 917], "unset": [37, 145, 150, 162, 303, 318, 379, 380, 381, 383, 384, 435, 541, 799, 895, 973, 974, 975, 977, 978, 1037, 1300, 1309], "unsign": [81, 82, 83, 84, 603, 799, 919, 1179, 1300], "unsigned_integ": 919, "unstabl": [31, 32, 33, 44, 45, 46, 47, 48, 56, 57, 66, 68, 118, 130, 135, 143, 145, 147, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 265, 275, 280, 286, 287, 318, 321, 322, 402, 403, 436, 482, 550, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 728, 775, 776, 799, 820, 821, 831, 872, 880, 913, 985, 1001, 1002, 1038, 1085, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1279, 1284, 1300, 1305], "unstack": 318, "unstackdirect": [286, 318], "unsuit": 119, "unsupport": [38, 318], "until": [87, 209, 226, 318, 668, 669, 694, 839, 913, 1238, 1239, 1264], "up": [10, 39, 79, 136, 221, 224, 243, 252, 253, 259, 272, 318, 391, 392, 550, 662, 670, 671, 685, 799, 843, 844, 849, 867, 913, 919, 987, 1232, 1240, 1241, 1255, 1300], "upcast": [333, 799], "upcast_integer_typ": [1, 53], "updat": [38, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 187, 318, 825, 913], "upgrad": 99, "upheld": [849, 913], "upon": 134, "upper": [133, 134, 135, 195, 209, 318, 392, 482, 487, 541, 576, 711, 721, 740, 741, 743, 744, 786, 787, 799, 839, 913, 990, 1061, 1085, 1089, 1152, 1288, 1300, 1318, 1321], "upper_bound": [209, 318, 392, 487, 541, 799, 839, 913, 990, 1089, 1152, 1300], "uppercas": [582, 693, 1263, 1323], "upsampl": [209, 318, 839, 913], "urandom": [375, 969], "uri": [37, 38, 135, 136, 137, 148, 149, 318], "url": [135, 136, 145, 150, 152, 656, 658, 1226, 1228], "urllib": 136, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 35, 36, 37, 38, 39, 40, 41, 44, 45, 48, 49, 50, 56, 57, 58, 65, 79, 87, 88, 91, 95, 118, 121, 123, 124, 126, 128, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 144, 145, 147, 148, 149, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 178, 179, 180, 183, 187, 189, 191, 192, 198, 199, 200, 202, 208, 209, 216, 218, 220, 221, 222, 224, 228, 234, 238, 239, 241, 242, 243, 250, 251, 252, 253, 254, 256, 257, 259, 264, 265, 266, 270, 272, 273, 274, 275, 276, 277, 280, 281, 282, 283, 285, 286, 287, 288, 289, 292, 293, 294, 295, 297, 304, 318, 328, 330, 332, 334, 343, 344, 367, 372, 373, 387, 392, 402, 405, 408, 409, 417, 435, 436, 438, 441, 449, 452, 454, 457, 458, 459, 460, 461, 465, 466, 467, 471, 482, 485, 486, 487, 499, 513, 529, 537, 541, 543, 549, 550, 553, 574, 577, 579, 581, 582, 591, 598, 601, 603, 605, 607, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 632, 634, 636, 637, 641, 643, 644, 646, 647, 648, 649, 651, 652, 653, 655, 656, 657, 659, 660, 661, 666, 667, 670, 671, 672, 674, 676, 678, 680, 681, 682, 683, 684, 686, 687, 691, 694, 695, 699, 707, 713, 714, 716, 717, 718, 719, 720, 723, 724, 730, 731, 732, 733, 734, 735, 737, 738, 739, 740, 741, 742, 743, 744, 745, 749, 751, 755, 756, 758, 759, 761, 762, 763, 765, 767, 768, 771, 774, 775, 776, 777, 778, 780, 781, 782, 783, 786, 787, 788, 789, 790, 795, 798, 799, 810, 811, 814, 815, 816, 817, 820, 821, 823, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 838, 839, 844, 847, 853, 862, 863, 864, 865, 867, 871, 872, 873, 876, 877, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 896, 913, 918, 919, 926, 927, 929, 958, 962, 966, 967, 985, 1001, 1003, 1006, 1007, 1015, 1023, 1024, 1037, 1038, 1040, 1043, 1051, 1054, 1057, 1062, 1063, 1064, 1065, 1070, 1071, 1076, 1082, 1085, 1087, 1088, 1089, 1104, 1118, 1134, 1141, 1146, 1154, 1175, 1177, 1179, 1181, 1183, 1185, 1186, 1187, 1199, 1200, 1202, 1203, 1206, 1212, 1214, 1216, 1217, 1218, 1219, 1221, 1222, 1225, 1226, 1227, 1229, 1230, 1231, 1236, 1237, 1240, 1241, 1242, 1244, 1246, 1254, 1256, 1257, 1261, 1264, 1275, 1276, 1278, 1281, 1282, 1290, 1300, 1309, 1310, 1311, 1312, 1313, 1315, 1316, 1323, 1324, 1328, 1331], "usag": [163, 167, 262, 318, 919, 1207, 1300], "usd": [207, 318, 1331], "use_pyarrow": [44, 48, 133, 137, 139, 141, 145, 148, 276, 318, 913, 1281, 1300], "use_pyarrow_extension_arrai": [277, 318, 1282, 1300], "use_pyarrow_write_to_dataset": [44, 318], "use_statist": [145, 152], "user": [37, 135, 136, 174, 228, 242, 304, 318, 549, 550, 595, 634, 761, 799, 857, 896, 913, 917, 921, 1154, 1203, 1300], "user_conn": 135, "usernam": [133, 136, 139, 141], "userwarn": 1, "usr": 135, "usual": [95, 136, 280, 318, 411, 1009], "utc": [137, 148, 411, 415, 417, 419, 435, 684, 687, 918, 919, 1009, 1013, 1017, 1037, 1254, 1257], "utc_tz": 919, "utf": [36, 45, 78, 318, 913], "utf8": [20, 133, 134, 147, 662, 674, 685, 1232, 1244, 1255], "utf8_borders_onli": 20, "utf8_ful": [20, 50, 127], "utf8_full_condens": [7, 20, 127], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [280, 318, 751, 913, 917], "uvw": [657, 1227], "v": [8, 9, 44, 195, 318, 633, 717, 719, 799, 1201, 1300, 1312, 1313], "v1": 32, "v2": [8, 139, 150], "val": [39, 249, 318, 550, 595, 705, 789, 799, 861, 913], "valid": [36, 39, 45, 65, 135, 139, 141, 145, 167, 172, 189, 195, 223, 247, 318, 402, 648, 650, 656, 657, 658, 660, 665, 670, 671, 789, 799, 827, 843, 860, 888, 913, 919, 1001, 1061, 1218, 1220, 1226, 1227, 1228, 1230, 1235, 1240, 1241, 1300, 1309, 1310], "validate_output_schema": [849, 913], "vals_phys": [705, 799], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 35, 36, 39, 44, 45, 48, 49, 50, 58, 59, 62, 75, 76, 85, 88, 97, 122, 123, 125, 126, 133, 134, 135, 136, 145, 147, 150, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 168, 169, 172, 176, 178, 179, 187, 191, 192, 194, 197, 198, 199, 200, 204, 207, 209, 210, 211, 215, 219, 221, 223, 224, 227, 228, 229, 230, 231, 232, 233, 234, 236, 237, 239, 241, 243, 244, 245, 247, 250, 251, 252, 253, 254, 261, 264, 266, 267, 268, 269, 271, 272, 276, 277, 281, 282, 285, 286, 287, 288, 289, 296, 299, 300, 302, 305, 306, 308, 309, 318, 321, 322, 326, 327, 328, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 345, 346, 347, 348, 349, 351, 353, 354, 355, 356, 357, 358, 359, 360, 362, 363, 364, 365, 368, 369, 370, 372, 373, 374, 375, 376, 386, 387, 388, 390, 391, 392, 393, 394, 395, 397, 398, 401, 402, 403, 406, 408, 409, 414, 418, 428, 433, 441, 450, 455, 456, 457, 458, 459, 460, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 482, 483, 484, 485, 486, 487, 488, 489, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 504, 505, 506, 507, 510, 511, 512, 515, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 534, 536, 537, 538, 539, 541, 542, 543, 545, 547, 548, 549, 550, 551, 552, 553, 558, 569, 570, 571, 572, 573, 583, 584, 585, 586, 589, 591, 592, 595, 596, 598, 599, 601, 604, 605, 606, 609, 610, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 632, 633, 634, 635, 638, 639, 640, 641, 643, 644, 645, 647, 648, 650, 651, 652, 653, 654, 656, 659, 660, 661, 662, 663, 664, 665, 667, 668, 669, 670, 671, 672, 673, 674, 676, 677, 678, 685, 694, 696, 700, 701, 703, 704, 706, 707, 708, 709, 710, 711, 712, 715, 716, 717, 718, 719, 720, 724, 727, 729, 730, 732, 734, 735, 736, 737, 738, 748, 749, 754, 755, 756, 757, 759, 762, 763, 764, 765, 766, 767, 768, 769, 773, 774, 775, 776, 782, 783, 789, 799, 814, 815, 825, 828, 829, 833, 834, 835, 839, 841, 842, 843, 844, 850, 851, 852, 853, 855, 856, 859, 860, 862, 868, 871, 873, 874, 876, 879, 880, 881, 891, 892, 894, 897, 898, 900, 901, 913, 919, 924, 926, 927, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 941, 942, 943, 944, 946, 948, 949, 950, 951, 952, 953, 954, 955, 957, 958, 959, 960, 963, 964, 966, 967, 968, 969, 970, 981, 987, 990, 992, 993, 994, 996, 1001, 1002, 1003, 1004, 1006, 1007, 1012, 1016, 1030, 1035, 1043, 1052, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1068, 1069, 1070, 1071, 1075, 1076, 1077, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1107, 1108, 1109, 1110, 1111, 1112, 1115, 1116, 1117, 1120, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1134, 1139, 1141, 1142, 1143, 1144, 1147, 1148, 1154, 1155, 1156, 1158, 1159, 1161, 1163, 1164, 1166, 1167, 1169, 1170, 1174, 1175, 1176, 1177, 1181, 1182, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1199, 1200, 1201, 1202, 1205, 1209, 1210, 1211, 1212, 1214, 1217, 1218, 1220, 1221, 1222, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1255, 1264, 1267, 1271, 1272, 1273, 1274, 1281, 1282, 1283, 1287, 1289, 1291, 1300, 1309, 1314, 1316, 1317, 1318, 1319, 1320, 1322, 1323, 1324, 1326, 1328, 1330, 1331], "value1": [644, 799], "value2": [644, 799], "value_a": 1328, "value_b": 1328, "value_count": [710, 799, 1300], "value_cum_sum": [401, 799], "value_cum_sum_all_fil": [401, 799], "value_nam": [234, 285, 318, 853, 879, 913], "value_var": [234, 285, 318, 853, 879, 913], "valueerror": [15, 20], "valueexcept": 759, "var": [39, 168, 318, 628, 629, 799, 913, 1300, 1317], "var_samp": 1317, "vari": [411, 1009, 1331], "variabl": [30, 75, 143, 145, 147, 150, 151, 152, 166, 169, 234, 273, 285, 318, 853, 879, 913, 1276, 1300, 1310, 1312, 1328], "variable_nam": [234, 285, 318, 853, 879, 913], "variad": 135, "varianc": [289, 318, 460, 499, 628, 629, 713, 788, 799, 881, 913, 1065, 1104, 1196, 1290, 1300, 1321], "variou": [135, 177, 183, 318, 799, 822, 913, 918, 919, 1300], "vector": [613, 615, 617, 619, 621, 624, 626, 628, 799, 1188, 1189, 1191, 1194, 1195, 1196, 1300], "vectoris": [429, 430, 1031, 1032], "vein": 172, "verbos": [29, 156, 158, 172, 657, 1227], "veri": [135, 221, 282, 318, 550, 799, 896, 1322], "verifi": [224, 318, 844, 913], "versicolor": [318, 321], "version": [37, 38, 55, 133, 134, 137, 138, 148, 155, 160, 161, 162, 163, 167, 170, 176, 178, 188, 210, 234, 258, 265, 275, 276, 280, 294, 299, 318, 321, 405, 417, 429, 430, 441, 452, 473, 480, 557, 558, 564, 568, 605, 647, 655, 699, 714, 723, 773, 778, 799, 814, 826, 831, 853, 866, 872, 885, 886, 891, 913, 919, 1015, 1023, 1024, 1031, 1032, 1043, 1054, 1082, 1083, 1181, 1217, 1225, 1279, 1281, 1284, 1300, 1305], "versu": [187, 318, 825, 913], "vertic": [58, 197, 286, 290, 318, 647, 663, 1217, 1233], "vertical_relax": 58, "via": [30, 133, 134, 135, 145, 147, 150, 151, 152, 175, 177, 188, 221, 252, 318, 405, 550, 658, 799, 826, 913, 922, 1228], "view": [550, 799], "visibl": [17, 195, 318, 1061, 1300], "visit": [402, 799, 1001, 1300], "visual": [216, 218, 318, 565, 869, 913], "volk": 130, "vote": [656, 658, 1226, 1228], "vowel": [670, 671, 1240, 1241], "vstack": [58, 197, 318], "w": [39, 135, 209, 253, 318, 650, 654, 656, 658, 717, 719, 839, 913, 919, 1220, 1224, 1226, 1228, 1250, 1312, 1313, 1316], "w_i": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "wa": [37, 55, 95, 138, 188, 275, 276, 318, 321, 405, 606, 672, 745, 799, 826, 913, 919, 1182, 1242, 1281, 1300, 1305], "wai": [87, 88, 120, 122, 123, 124, 126, 142, 143, 151, 208, 222, 242, 264, 297, 318, 436, 595, 644, 656, 732, 795, 799, 823, 830, 838, 857, 863, 871, 882, 889, 896, 913, 1038, 1226], "walk": 730, "want": [57, 123, 125, 138, 197, 228, 239, 250, 265, 318, 410, 467, 549, 550, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 649, 666, 670, 671, 672, 726, 735, 740, 743, 749, 771, 774, 790, 799, 821, 872, 888, 913, 919, 1008, 1068, 1154, 1219, 1236, 1240, 1241, 1242, 1300, 1315], "warehous": 136, "warn": [90, 91, 94, 95, 98, 105, 107, 108, 118, 591, 799, 1300], "watermark": [44, 318], "wb": [39, 318], "we": [44, 131, 133, 134, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 177, 187, 188, 209, 224, 243, 250, 288, 318, 405, 432, 436, 449, 482, 513, 541, 549, 550, 611, 614, 616, 618, 620, 622, 625, 627, 629, 658, 670, 671, 689, 739, 740, 741, 742, 743, 744, 759, 786, 787, 789, 799, 825, 826, 839, 844, 849, 862, 913, 1034, 1038, 1051, 1085, 1118, 1154, 1228, 1241, 1259, 1300, 1312], "weather": [670, 671, 1240, 1241], "wed": [318, 321], "wednesdai": [209, 318, 438, 441, 839, 913, 1040, 1043], "week": [209, 224, 250, 288, 318, 410, 432, 436, 449, 451, 458, 611, 614, 616, 618, 620, 622, 625, 627, 629, 726, 740, 741, 743, 744, 745, 786, 787, 799, 839, 844, 862, 913, 919, 1008, 1034, 1038, 1051, 1053, 1063, 1300, 1324], "week_mask": [410, 726, 1008], "weekdai": [418, 433], "weekend": [410, 726, 1008], "weekli": [209, 318, 449, 839, 913, 1051], "weghorst": [658, 1228], "weight": [130, 457, 458, 459, 460, 612, 613, 615, 617, 619, 621, 624, 626, 628, 641, 799, 1062, 1063, 1064, 1065, 1187, 1188, 1189, 1190, 1191, 1192, 1194, 1195, 1196, 1212, 1300], "wei\u00df": 1323, "well": [39, 133, 134, 135, 147, 318, 487, 778, 799, 1089, 1300, 1328], "were": [172, 605, 606, 795, 799, 1181, 1182, 1300], "west": [225, 318, 845, 913], "what": [177, 239, 318, 410, 549, 649, 672, 799, 1008, 1219, 1242], "whatev": 172, "when": [10, 14, 17, 19, 23, 36, 37, 38, 39, 40, 41, 44, 45, 48, 49, 65, 79, 87, 88, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 107, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 130, 133, 134, 135, 136, 138, 139, 141, 143, 144, 145, 147, 148, 150, 151, 152, 153, 156, 157, 158, 159, 163, 167, 179, 187, 193, 195, 197, 199, 202, 209, 223, 225, 228, 242, 247, 251, 253, 256, 257, 261, 264, 270, 273, 275, 276, 280, 281, 283, 287, 293, 318, 362, 392, 410, 457, 459, 460, 466, 534, 541, 562, 595, 605, 606, 635, 643, 644, 649, 655, 659, 661, 662, 666, 667, 672, 674, 679, 680, 681, 684, 685, 724, 726, 735, 749, 799, 815, 825, 834, 839, 843, 845, 849, 860, 864, 865, 868, 871, 876, 877, 880, 884, 910, 913, 957, 990, 1003, 1008, 1061, 1062, 1064, 1065, 1068, 1071, 1139, 1181, 1182, 1200, 1202, 1205, 1219, 1225, 1229, 1231, 1232, 1236, 1237, 1242, 1244, 1249, 1250, 1251, 1254, 1255, 1275, 1276, 1281, 1300, 1315, 1328], "when_matched_update_al": [38, 318], "when_not_matched_insert_al": [38, 318], "where": [39, 50, 95, 135, 136, 138, 191, 192, 197, 200, 209, 221, 225, 234, 243, 252, 265, 266, 275, 280, 285, 287, 289, 318, 344, 441, 451, 454, 456, 458, 467, 537, 543, 549, 586, 604, 633, 641, 644, 646, 672, 692, 713, 725, 731, 733, 775, 776, 778, 780, 788, 789, 799, 828, 829, 835, 839, 845, 853, 872, 873, 879, 880, 881, 913, 939, 1043, 1053, 1057, 1059, 1063, 1068, 1072, 1166, 1201, 1212, 1216, 1242, 1262, 1290, 1291, 1300, 1309, 1317, 1327, 1328, 1330], "wherea": [133, 147, 250, 318, 436, 449, 583, 584, 611, 799, 862, 913, 1038, 1051, 1163, 1164, 1300], "wherev": [39, 228, 304, 318, 550, 799, 1154, 1300], "whether": [36, 45, 124, 126, 130, 138, 144, 145, 150, 152, 167, 171, 194, 220, 224, 259, 264, 318, 330, 332, 346, 347, 422, 437, 479, 504, 505, 634, 644, 659, 661, 724, 799, 844, 849, 867, 871, 913, 919, 926, 927, 941, 942, 983, 985, 1020, 1039, 1060, 1081, 1082, 1109, 1110, 1229, 1231, 1300, 1312, 1328], "which": [1, 6, 10, 20, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 123, 125, 133, 134, 135, 136, 137, 138, 143, 144, 145, 147, 148, 149, 150, 151, 152, 163, 166, 168, 179, 180, 187, 188, 191, 192, 197, 198, 208, 209, 214, 224, 243, 250, 258, 275, 276, 281, 283, 288, 318, 330, 367, 405, 410, 432, 436, 438, 449, 458, 464, 487, 489, 492, 494, 495, 496, 497, 541, 549, 550, 562, 564, 611, 614, 616, 618, 620, 622, 625, 627, 629, 671, 689, 726, 740, 741, 743, 744, 745, 786, 787, 789, 799, 815, 817, 820, 823, 825, 826, 828, 829, 830, 831, 839, 844, 862, 866, 876, 877, 882, 913, 919, 962, 1008, 1034, 1038, 1040, 1051, 1063, 1068, 1069, 1089, 1092, 1095, 1097, 1098, 1099, 1100, 1146, 1202, 1259, 1279, 1281, 1300, 1310, 1316, 1328, 1331], "while": [38, 57, 134, 137, 138, 148, 152, 163, 167, 172, 221, 234, 282, 285, 287, 318, 605, 667, 799, 821, 853, 879, 880, 913, 1181, 1237, 1300], "white": [39, 318], "whitespac": [127, 679, 680, 681, 1249, 1250, 1251, 1323], "whole": [549, 643, 644, 656, 799, 896, 913, 1226], "whose": [50, 224, 243, 318, 461, 747, 799, 844, 913, 919], "why": [820, 913], "wide": [135, 207, 234, 243, 285, 286, 318, 853, 879, 913], "width": [26, 39, 59, 133, 134, 147, 318, 321, 540, 728, 913, 1145], "wiki": 20, "wikipedia": 20, "wildcard": [461, 695, 735, 736, 749, 773, 795, 799, 917], "win_loss": [39, 318], "window": [133, 134, 147, 209, 250, 318, 402, 457, 459, 460, 550, 591, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 729, 775, 776, 799, 839, 862, 913, 1001, 1062, 1064, 1065, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1300], "window_s": [612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 775, 776, 799, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1300], "windowmappingstrategi": [591, 799], "winter": [659, 661, 670, 671, 1229, 1231], "wise": [39, 50, 135, 202, 318, 335, 336, 337, 338, 339, 340, 393, 394, 395, 462, 545, 638, 639, 640, 703, 704, 749, 773, 799, 930, 931, 932, 933, 934, 935, 992, 993, 994, 1066, 1150, 1151, 1209, 1210, 1211, 1273, 1274, 1300], "wish": [179, 281, 318, 386, 387, 706, 707, 799, 815, 876, 913, 980, 1285, 1300], "with_column": [1, 12, 53, 56, 57, 209, 242, 250, 280, 286, 293, 318, 327, 329, 344, 346, 347, 348, 349, 350, 351, 353, 354, 355, 356, 360, 361, 362, 363, 367, 372, 373, 375, 388, 392, 397, 398, 399, 400, 401, 403, 406, 410, 411, 413, 416, 417, 418, 419, 420, 421, 422, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 450, 451, 453, 455, 456, 458, 465, 466, 471, 476, 478, 480, 485, 486, 487, 490, 491, 493, 494, 495, 496, 497, 501, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 548, 549, 550, 570, 572, 574, 575, 577, 579, 581, 582, 585, 586, 587, 591, 592, 595, 596, 598, 601, 605, 606, 610, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 631, 635, 648, 649, 650, 651, 652, 653, 654, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 685, 688, 689, 690, 692, 693, 694, 696, 699, 700, 705, 708, 715, 717, 719, 722, 726, 727, 728, 729, 730, 735, 736, 738, 739, 741, 742, 746, 756, 760, 763, 765, 768, 779, 783, 785, 787, 789, 795, 799, 820, 821, 831, 839, 841, 857, 858, 862, 869, 884, 913, 919, 1002, 1037, 1175, 1231, 1300, 1328], "with_column_nam": 147, "with_columns_seq": [318, 913], "with_context": 913, "with_field": [550, 799], "with_replac": [254, 318, 529, 632, 799, 1134, 1199, 1300], "with_row_count": [318, 913], "with_row_index": [1, 250, 294, 318, 614, 616, 618, 620, 622, 625, 627, 629, 799, 886, 913, 1200, 1300, 1305], "within": [44, 59, 75, 156, 157, 158, 159, 208, 209, 210, 224, 250, 288, 318, 480, 601, 644, 799, 839, 844, 862, 913, 1083, 1300, 1328], "without": [1, 31, 32, 33, 45, 46, 47, 48, 55, 56, 57, 66, 68, 95, 98, 127, 130, 137, 140, 143, 145, 146, 147, 148, 149, 150, 151, 152, 153, 160, 161, 163, 164, 165, 166, 167, 168, 225, 265, 275, 276, 280, 286, 287, 318, 321, 322, 402, 403, 436, 482, 550, 598, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 649, 659, 661, 672, 728, 732, 775, 776, 777, 799, 820, 821, 831, 845, 872, 880, 913, 983, 985, 1001, 1002, 1038, 1085, 1175, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1219, 1229, 1231, 1242, 1279, 1281, 1284, 1300, 1305, 1330], "without_fil": [137, 148, 149], "wod": [681, 1251], "womp": [284, 318, 878, 913], "word": [136, 670, 671, 680, 681, 692, 1262], "work": [39, 66, 68, 134, 153, 257, 293, 318, 330, 332, 368, 391, 392, 461, 470, 513, 542, 549, 550, 574, 575, 577, 579, 581, 582, 591, 662, 666, 667, 674, 685, 709, 799, 865, 884, 913, 919, 926, 927, 963, 987, 990, 1075, 1118, 1147, 1232, 1236, 1237, 1244, 1255, 1286, 1300], "workaround": 318, "workbook": [39, 138, 144, 318], "working_with_conditional_format": [39, 318], "working_with_sparklin": [39, 318], "worksheet": [39, 138, 144, 318], "world": [1, 20, 649, 672, 679, 680, 681, 919, 1125, 1219, 1242, 1249, 1250, 1251, 1311, 1314], "wors": [871, 913], "worth": [513, 1118], "worthwhil": [156, 158], "would": [94, 133, 134, 147, 177, 276, 280, 318, 321, 343, 354, 410, 518, 549, 550, 561, 591, 601, 724, 726, 799, 938, 949, 1008, 1123, 1177, 1281, 1300, 1305, 1326], "wrap": [77, 127, 388, 487, 549, 799, 981, 1300], "wrap_numer": [388, 799, 981, 1300], "wrapper": [57, 821, 913], "writabl": [34, 36, 40, 41, 42, 43, 44, 258, 276, 318, 1281, 1300], "write": [34, 35, 36, 37, 38, 39, 40, 41, 44, 45, 46, 47, 48, 132, 134, 139, 172, 183, 318, 392, 565, 568, 799, 847, 869, 913, 919, 990, 1300], "write_ascii_frame_to_stdout": 172, "write_avro": 318, "write_clipboard": [132, 318], "write_csv": [35, 134, 147, 318], "write_databas": 318, "write_delta": 318, "write_excel": 318, "write_ipc": [139, 318], "write_ipc_stream": 318, "write_json": 318, "write_ndjson": [42, 318], "write_parquet": 318, "write_t": [44, 318], "write_to_dataset": [44, 318], "writeabl": [276, 318, 1281, 1300], "written": [6, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 258, 318, 564, 866, 913], "ww": [1323, 1330], "www": 697, "x": [27, 50, 58, 79, 97, 121, 127, 133, 134, 136, 138, 144, 147, 160, 161, 163, 176, 195, 213, 216, 218, 223, 243, 252, 253, 282, 285, 286, 318, 321, 327, 329, 331, 350, 355, 375, 397, 404, 455, 456, 471, 476, 478, 480, 501, 508, 520, 546, 548, 549, 550, 570, 572, 573, 575, 576, 577, 578, 579, 580, 581, 582, 585, 586, 590, 596, 604, 605, 606, 610, 638, 641, 676, 699, 700, 705, 708, 715, 717, 719, 722, 723, 729, 735, 736, 738, 749, 759, 760, 763, 765, 768, 773, 778, 783, 789, 799, 843, 849, 870, 872, 879, 913, 918, 919, 950, 984, 996, 1071, 1154, 1181, 1182, 1209, 1212, 1246, 1279, 1283, 1284, 1300, 1305, 1312, 1313, 1316, 1322, 1328, 1330], "x00": [371, 372, 373, 374, 376, 651, 965, 966, 967, 968, 970, 1221], "x00fvalu": [258, 318], "x07": 375, "x1": 375, "x80": 375, "x81": 564, "x82": [258, 318], "x83": [258, 318, 375], "x88": 375, "x8e": 375, "x99": 375, "x_": [458, 799, 1063, 1300], "x_0": [286, 318, 457, 458, 459, 460, 799, 1062, 1063, 1064, 1065, 1300], "x_1": [286, 318, 458, 799, 1063, 1300], "x_2": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "x_i": [458, 799, 1063, 1300], "x_invers": [596, 799], "x_pow_8": 1322, "x_round": 1322, "x_round_1": 1322, "x_squar": [596, 799], "x_t": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "x_uniqu": [573, 799], "x_y": [355, 520], "xa1cagg": 564, "xa1csum": 564, "xa1fcolumncfoolpartition_bi": 564, "xa1fwindow": 564, "xa1gcolumn": [258, 318], "xa4dnamecfoohdatatypeeint64lbit_set": [258, 318], "xa4hfunct": 564, "xb": 375, "xb9neq": 375, "xbd": 375, "xc14": 375, "xd3": 375, "xdist": 1331, "xee": 375, "xf4v": 375, "xf9": 375, "xfb": 375, "xff": [371, 372, 373, 374, 376, 651, 965, 966, 967, 968, 970, 1221], "xi": [657, 1227], "xl": 138, "xlog2": [572, 596, 799], "xlsb": 138, "xlsx": [39, 138, 318], "xlsx2csv": [138, 155], "xlsxwriter": [39, 155, 318], "xor": [385, 799, 979, 1300, 1319], "xor_xi": [715, 799], "xx": [10, 51, 53, 167, 187, 265, 318, 825, 913, 919, 1316, 1323, 1330], "xxx": [191, 318, 697, 828, 913], "xy": [51, 53], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 327, 650, 657, 799, 1220, 1227, 1277, 1300], "y": [27, 50, 58, 79, 97, 121, 127, 160, 161, 163, 176, 195, 216, 218, 223, 243, 252, 253, 282, 285, 286, 318, 321, 327, 329, 331, 350, 355, 375, 438, 441, 455, 456, 476, 478, 501, 508, 520, 548, 550, 573, 575, 577, 579, 581, 582, 585, 586, 590, 604, 605, 606, 610, 684, 686, 687, 699, 708, 715, 717, 719, 722, 723, 738, 745, 759, 763, 765, 768, 778, 783, 799, 843, 870, 872, 879, 913, 918, 919, 950, 984, 1040, 1043, 1181, 1182, 1254, 1256, 1257, 1300, 1305, 1316, 1323, 1324, 1330], "y_": [457, 458, 459, 460, 799, 1062, 1063, 1064, 1065, 1300], "y_0": [286, 318, 457, 458, 459, 460, 799, 1062, 1063, 1064, 1065, 1300], "y_1": [286, 318], "y_i": [458, 799, 1063, 1300], "y_mul": 699, "y_t": [457, 459, 460, 799, 1062, 1064, 1065, 1300], "y_uniqu": [573, 799], "ya": [674, 1244], "ya29": 149, "year": [209, 224, 250, 265, 288, 318, 410, 422, 423, 432, 433, 436, 449, 450, 611, 614, 616, 618, 620, 622, 625, 627, 629, 726, 739, 740, 741, 742, 743, 744, 786, 787, 799, 839, 844, 862, 913, 919, 1008, 1020, 1021, 1034, 1035, 1038, 1051, 1052, 1324], "yellow": [318, 322, 371, 372, 373, 374, 376], "yield": [124, 126, 133, 134, 135, 147, 195, 197, 220, 282, 318, 471, 549, 591, 799, 913, 1061, 1068, 1300], "you": [1, 10, 14, 39, 44, 48, 50, 57, 58, 120, 122, 123, 124, 125, 126, 133, 134, 135, 136, 138, 139, 142, 143, 147, 151, 153, 172, 179, 197, 200, 209, 220, 221, 224, 228, 239, 243, 250, 251, 252, 253, 265, 272, 275, 281, 282, 283, 285, 304, 318, 321, 386, 387, 410, 429, 430, 432, 435, 438, 441, 461, 467, 487, 513, 541, 549, 550, 565, 591, 596, 603, 611, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 637, 649, 666, 670, 671, 672, 692, 695, 706, 707, 726, 735, 740, 743, 745, 749, 761, 771, 774, 778, 790, 799, 815, 821, 835, 839, 844, 862, 869, 872, 876, 877, 879, 888, 896, 913, 917, 919, 980, 1008, 1031, 1032, 1037, 1040, 1043, 1068, 1089, 1118, 1154, 1173, 1179, 1219, 1236, 1240, 1241, 1242, 1262, 1279, 1285, 1300, 1305, 1310, 1315, 1331], "your": [37, 39, 49, 50, 88, 133, 134, 135, 136, 138, 153, 221, 228, 252, 253, 256, 272, 292, 297, 304, 318, 321, 415, 458, 473, 550, 658, 684, 686, 687, 694, 761, 799, 849, 864, 883, 889, 896, 913, 1013, 1063, 1154, 1228, 1254, 1256, 1257, 1264, 1300, 1305, 1331], "yy": [10, 51, 53, 167, 187, 265, 318, 825, 913, 919, 1316, 1323, 1330], "yyi": [191, 318, 697, 828, 913], "yyyi": [39, 318], "yz": [51, 53], "z": [39, 58, 79, 127, 161, 195, 216, 218, 223, 252, 253, 282, 285, 286, 318, 327, 329, 331, 480, 508, 550, 575, 577, 579, 581, 582, 590, 604, 605, 606, 649, 657, 659, 661, 672, 684, 687, 717, 719, 738, 763, 765, 768, 774, 778, 783, 799, 843, 870, 872, 879, 913, 918, 919, 1071, 1181, 1182, 1219, 1227, 1229, 1231, 1242, 1254, 1257, 1300, 1312, 1316, 1328, 1330], "z_0": [286, 318], "z_1": [286, 318], "zap": 919, "zero": [28, 39, 120, 121, 131, 133, 134, 139, 141, 145, 162, 165, 176, 199, 209, 221, 251, 265, 270, 276, 277, 318, 466, 541, 546, 633, 641, 694, 708, 799, 818, 834, 839, 913, 989, 1071, 1146, 1212, 1264, 1275, 1281, 1282, 1300, 1322, 1328], "zero_copy_onli": [1281, 1300], "zfill": [669, 715, 799, 1239], "zip": 1331, "zip_with": [202, 318, 1300], "zone": [65, 163, 164, 167, 411, 415, 435, 458, 687, 742, 743, 744, 799, 919, 1009, 1013, 1037, 1063, 1257, 1300], "zoneinfo": [65, 919], "zoom": [39, 318], "zstd": [40, 41, 44, 46, 48, 318, 913], "zz": [167, 187, 265, 318, 825, 913, 1316, 1323, 1330], "zzz": 697, "\u03bc": [127, 180, 209, 221, 250, 252, 253, 272, 288, 318, 411, 412, 414, 415, 416, 417, 419, 421, 424, 426, 427, 429, 430, 431, 432, 435, 436, 437, 438, 439, 441, 442, 443, 444, 445, 446, 447, 448, 449, 452, 611, 614, 616, 618, 620, 622, 625, 627, 629, 684, 687, 742, 743, 744, 745, 751, 799, 817, 839, 862, 913, 919, 1009, 1010, 1012, 1013, 1014, 1015, 1017, 1018, 1019, 1024, 1025, 1029, 1031, 1032, 1033, 1034, 1037, 1038, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1054, 1254, 1257, 1323], "\u0441\u0438\u043d\u0438\u0439": 1323, "\u0967\u096f\u096f\u096f": 919, "\u0968\u0966\u096d\u096d": 919, "\u4eac\u90fd": 919, "\u5927\u962a": 919, "\u6771\u4eac": [666, 667, 919, 1236, 1237], "\u90fd\u5e02": 919, "\ud835\udf0b": 1322}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.json_normalize", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.get_categories", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1316, 1329], "IF": 1320, "__array__": [174, 921], "__arrow_c_stream__": [175, 922], "__dataframe__": 176, "__getitem__": [177, 923], "__iter__": 296, "ab": [326, 924, 1322], "aco": 1325, "acosd": 1325, "add": 327, "add_business_dai": [410, 1008], "agg": [297, 889], "agg_group": 328, "aggreg": [173, 325, 813, 920, 1317], "alia": [329, 925], "alias": [1317, 1322, 1323], "align_fram": 50, "all": [298, 330, 346, 504, 716, 890, 926, 941, 1109, 1329], "all_horizont": 717, "and_": 331, "ani": [332, 347, 505, 718, 927, 942, 1110], "any_horizont": 719, "api": [1, 51, 52, 53, 54, 811, 1328], "append": [333, 928], "approx_n_uniqu": [178, 334, 720, 814, 929], "arang": 721, "arcco": [335, 930], "arccosh": [336, 931], "arcsin": [337, 932], "arcsinh": [338, 933], "arctan": [339, 934], "arctan2": 722, "arctan2d": 723, "arctanh": [340, 935], "arg_max": [341, 348, 506, 936, 943, 1111], "arg_min": [342, 349, 507, 937, 944, 1112], "arg_sort": [343, 938], "arg_sort_bi": 724, "arg_tru": [344, 939], "arg_uniqu": [345, 940], "arg_wher": 725, "arr": [346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964], "arrai": [59, 791, 1292, 1318], "array_agg": 1318, "array_contain": 1318, "array_get": 1318, "array_length": 1318, "array_low": 1318, "array_mean": 1318, "array_revers": 1318, "array_sum": 1318, "array_to_str": 1318, "array_uniqu": 1318, "array_upp": 1318, "asin": 1325, "asind": 1325, "assert": 1331, "assert_frame_equ": 156, "assert_frame_not_equ": 157, "assert_series_equ": 158, "assert_series_not_equ": 159, "atan": 1325, "atan2": 1325, "atan2d": 1325, "atand": 1325, "attribut": [313, 908, 1293], "avail": 1, "avg": 1317, "avro": 812, "backward_fil": 370, "base_utc_offset": [411, 1009], "batched_read": 129, "batchedcsvread": 129, "bin": [371, 372, 373, 374, 375, 376, 965, 966, 967, 968, 969, 970], "binari": [60, 792, 805, 1294], "bit_and": 1319, "bit_count": 1319, "bit_length": 1323, "bit_or": 1319, "bit_xor": 1319, "bitwise_and": [377, 971], "bitwise_count_on": [378, 972], "bitwise_count_zero": [379, 973], "bitwise_leading_on": [380, 974], "bitwise_leading_zero": [381, 975], "bitwise_or": [382, 976], "bitwise_trailing_on": [383, 977], "bitwise_trailing_zero": [384, 978], "bitwise_xor": [385, 979], "boolean": [61, 793, 1295], "bottom_k": [179, 386, 815, 980], "bottom_k_bi": 387, "build_info": 55, "business_day_count": 726, "cach": 816, "cancel": 905, "cast": [180, 388, 817, 981, 1326], "cast_time_unit": [412, 1010], "cat": [389, 982, 983, 984, 985], "categor": 62, "categori": [794, 1296], "categoricalremappingwarn": 90, "cbrt": [390, 986, 1322], "ceil": [391, 987, 1322], "centuri": [413, 1011], "chronoformatwarn": 91, "chunk_length": 988, "claus": 1316, "clear": [181, 818, 989], "clip": [392, 990], "clipboard": 812, "clone": [182, 819, 991], "cloud": 812, "co": [393, 992, 1325], "coalesc": [727, 1320], "col": 795, "collect": 820, "collect_al": 56, "collect_all_async": 57, "collect_async": 821, "collect_schema": [183, 822], "column": [160, 161, 184, 796, 823], "columnnotfounderror": 92, "combin": [414, 1012], "comparison": [805, 1304], "comput": [314, 797, 1297], "computeerror": 93, "concat": [58, 508, 647, 1113, 1217, 1323], "concat_arr": 728, "concat_list": 729, "concat_str": 730, "concat_w": 1323, "condit": 1320, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 172], "conjunct": 805, "contain": [350, 371, 509, 648, 945, 965, 1114, 1218], "contains_ani": [649, 1219], "context": 172, "convers": 810, "convert_time_zon": [415, 1013], "corr": [185, 731], "cosd": 1325, "cosh": [394, 993], "cot": [395, 994, 1325], "cotd": 1325, "count": [186, 299, 396, 732, 824, 891, 995, 1317], "count_match": [351, 510, 650, 946, 1115, 1220], "cov": 733, "creat": 1330, "create_list_strategi": 162, "credenti": 812, "credentialprovid": 31, "credentialprovideraw": 32, "credentialprovidergcp": 33, "csv": [129, 812], "cum_count": [397, 734, 996], "cum_fold": 735, "cum_max": [398, 997], "cum_min": [399, 998], "cum_prod": [400, 999], "cum_reduc": 736, "cum_sum": [401, 737, 1000], "cum_sum_horizont": 738, "cumulative_ev": [402, 1001], "customufuncwarn": 94, "cut": [403, 1002], "dai": [418, 1016], "data": 323, "databas": 812, "datafram": [34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 163, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 318], "dataorientationwarn": 95, "dataset": 812, "datatyp": [59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 323], "date": [64, 416, 739, 1014, 1323], "date_part": 1324, "date_rang": [740, 741], "datetim": [65, 417, 742, 1015], "datetime_rang": [743, 744], "decim": 66, "decod": [372, 651, 966, 1221], "decor": 172, "degre": [404, 1325], "delta": 812, "describ": [187, 825, 1003], "descript": [315, 909, 1298], "deseri": [188, 405, 826], "diff": [406, 511, 1004, 1116], "disable_string_cach": 87, "distinct": 1316, "div": 1322, "document": 1328, "dot": [407, 1005], "drop": [189, 827, 1330], "drop_in_plac": 190, "drop_nan": [191, 408, 828, 1006], "drop_nul": [192, 409, 512, 829, 1007, 1117], "dst_offset": [419, 1017], "dt": [410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055], "dtype": [164, 193, 830, 1056], "duplicateerror": 96, "durat": [67, 745], "element": 746, "enable_string_cach": 88, "encod": [373, 652, 967, 1222], "ends_with": [374, 653, 968, 1223, 1323], "engine_config": 888, "entropi": [454, 1057], "enum": 68, "epoch": [420, 1018], "eq": [455, 554, 1058], "eq_miss": [456, 1059], "equal": [194, 1060], "error": 324, "escape_regex": [89, 654, 1224], "estimated_s": [195, 1061], "eval": [513, 1118], "ewm_mean": [457, 1062], "ewm_mean_bi": [458, 1063], "ewm_std": [459, 1064], "ewm_var": [460, 1065], "exampl": [1, 919, 1331], "excel": 812, "except": [90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 324, 1329], "exclud": [461, 747], "execut": 1309, "execute_glob": 1310, "exp": [462, 1066, 1322], "explain": [831, 1330], "explod": [196, 352, 463, 514, 655, 832, 947, 1067, 1119, 1225], "export": [316, 1299], "expr": [326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715], "express": [799, 1328], "extend": [1, 197, 1068], "extend_const": [464, 1069], "extract": [656, 1226, 1324], "extract_al": [657, 1227], "extract_group": [658, 1228], "extract_mani": [659, 1229], "feather": 812, "fetch": 906, "fetch_block": 907, "field": [695, 1265, 1266], "fill_nan": [198, 465, 833, 1070], "fill_nul": [199, 466, 834, 1071], "filter": [200, 467, 835, 1072], "find": [660, 1230], "find_mani": [661, 1231], "first": [300, 353, 468, 515, 748, 836, 892, 948, 1073, 1120, 1317], "flag": [201, 1074], "flatten": 469, "float32": 69, "float64": 70, "floor": [470, 1075, 1322], "floordiv": 471, "fold": [202, 749], "format": 750, "forward_fil": 472, "frame": 1328, "from": 1316, "from_arrow": 120, "from_datafram": 121, "from_dict": [122, 123], "from_epoch": 751, "from_json": 473, "from_numpi": 124, "from_panda": 125, "from_record": 126, "from_repr": 127, "function": [1, 798, 810, 919, 1321], "gather": [474, 516, 1076, 1121], "gather_everi": [203, 475, 517, 837, 1077, 1122], "ge": [476, 1078], "get": [354, 477, 518, 949, 1123], "get_categori": [389, 982], "get_chunk": 1079, "get_column": [204, 206], "get_column_index": 205, "get_index_typ": 128, "glimps": 207, "global": 1328, "gpuengin": [888, 910], "greatest": 1320, "group": [752, 1316], "group_bi": [208, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 838, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904], "group_by_dynam": [209, 839], "groupbi": [296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 317, 911], "gt": [478, 1080], "has_multiple_output": 555, "has_nul": [479, 1081], "has_valid": 1082, "hash": [480, 1083], "hash_row": 210, "have": 1316, "head": [211, 301, 481, 519, 662, 753, 840, 893, 1084, 1124, 1232], "height": 212, "helper": 1331, "hist": [482, 1085], "hour": [421, 1019], "hstack": 213, "iceberg": 812, "ifnul": 1320, "implod": [483, 754, 1086], "import": 919, "in_process": [905, 906, 907], "index": 0, "initcap": 1323, "inprocessqueri": [905, 906, 907, 912], "input": 812, "insert_column": 214, "inspect": [484, 841], "int16": 71, "int32": 72, "int64": 73, "int8": 74, "int_rang": [755, 756], "interfac": 1327, "interpol": [215, 485, 842, 1087], "interpolate_bi": [486, 1088], "intersect": 1329, "introduct": 1328, "invalidoperationerror": 97, "io": 129, "ipc": 812, "is_between": [487, 1089], "is_column": 556, "is_column_select": 557, "is_dupl": [216, 488, 1090], "is_empti": [217, 1091], "is_finit": [489, 1092], "is_first_distinct": [490, 1093], "is_in": [491, 1094], "is_infinit": [492, 1095], "is_last_distinct": [493, 1096], "is_leap_year": [422, 1020], "is_liter": 558, "is_loc": 983, "is_nan": [494, 1097], "is_not_nan": [495, 1098], "is_not_nul": [496, 1099], "is_nul": [497, 1100], "is_regex_project": 559, "is_sort": 1101, "is_uniqu": [218, 498, 1102], "iso_year": [423, 1021], "item": [219, 1103], "iter_column": 220, "iter_row": 221, "iter_slic": 222, "join": [223, 355, 520, 663, 843, 950, 1125, 1233, 1316], "join_asof": [224, 844], "join_wher": [225, 845], "json": 812, "json_decod": [664, 1234], "json_encod": [696, 1267], "json_norm": 130, "json_path_match": [665, 1235], "keep": 574, "kurtosi": [499, 1104], "lake": 812, "last": [302, 356, 500, 521, 757, 846, 894, 951, 1105, 1126, 1317], "lazi": [226, 847], "lazyfram": [45, 46, 47, 48, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 913], "lazygroupbi": [889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904], "le": [501, 1106], "least": 1320, "left": 1323, "len": [303, 502, 522, 758, 895, 1107, 1127], "len_byt": [666, 1236], "len_char": [667, 1237], "length": 1323, "limit": [227, 503, 848, 1108, 1316], "list": [75, 165, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 800, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1301], "lit": 759, "ln": 1322, "load": [2, 172], "load_from_fil": 3, "load_profil": 166, "log": [544, 1149, 1322], "log10": [545, 1150, 1322], "log1p": [546, 1151, 1322], "log2": 1322, "lower": 1323, "lower_bound": [547, 1152], "lt": [548, 1153], "ltrim": 1323, "manag": 172, "manipul": [320, 803, 915, 1303], "map": 575, "map_batch": [549, 760, 849], "map_el": [550, 1154], "map_field": 576, "map_group": [304, 761, 896], "map_row": 228, "mapwithoutreturndtypewarn": 98, "math": 1322, "max": [229, 305, 357, 523, 551, 762, 850, 897, 952, 1022, 1128, 1155, 1317], "max_horizont": [230, 763], "mean": [231, 306, 524, 552, 764, 851, 898, 1023, 1129, 1156], "mean_horizont": [232, 765], "median": [233, 307, 358, 525, 553, 766, 852, 899, 953, 1024, 1130, 1157, 1317], "melt": [234, 853], "merge_sort": [235, 854], "meta": [554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 801], "metadata": 916, "method": 1328, "microsecond": [424, 1025], "millennium": [425, 1026], "millisecond": [426, 1027], "min": [236, 308, 359, 526, 569, 767, 855, 900, 954, 1028, 1131, 1158, 1317], "min_horizont": [237, 768], "minut": [427, 1029], "miscellan": [319, 802, 810, 914, 1302], "mod": [570, 1322], "mode": [571, 1159], "moduleupgraderequirederror": 99, "month": [428, 1030], "month_end": [429, 1031], "month_start": [430, 1032], "mul": 572, "n_chunk": [238, 1160], "n_uniqu": [239, 309, 360, 527, 573, 769, 901, 955, 1132, 1161], "name": [574, 575, 576, 577, 578, 579, 580, 581, 582, 796, 804, 1162, 1329], "nan_max": [583, 1163], "nan_min": [584, 1164], "nanosecond": [431, 1033], "ne": [560, 585, 1165], "ne_miss": [586, 1166], "neg": 587, "nest": 323, "new": 1, "new_from_index": 1167, "next_batch": 129, "nodataerror": 100, "norowsreturnederror": 101, "not_": [588, 1168], "nth": 770, "null": 76, "null_count": [240, 589, 856, 1169], "nullif": 1320, "numer": [323, 805, 1304], "object": 77, "octet_length": 1323, "od": 812, "offset": 1316, "offset_bi": [432, 1034], "ones": 771, "oper": [805, 919, 1304, 1329, 1330], "option": 172, "or_": 590, "order": 1316, "ordinal_dai": [433, 1035], "other": 323, "outofboundserror": 102, "output": 812, "output_nam": 561, "over": 591, "pad_end": [668, 1238], "pad_start": [669, 1239], "panic": 324, "panicexcept": 103, "parallel": 810, "parametercollisionerror": 104, "parametr": [160, 161, 162, 163, 164, 165, 166, 167, 168, 1331], "parquet": 812, "partition_bi": 241, "pct_chang": [592, 1170], "peak_max": [593, 1171], "peak_min": [594, 1172], "performancewarn": 105, "pi": 1322, "pipe": [242, 595, 857], "pivot": 243, "plot": [321, 1305], "plugin": 917, "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 795, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1331], "polarserror": 106, "polarsinefficientmapwarn": 107, "polarswarn": 108, "pop": 562, "pow": [596, 1173, 1322], "prefix": 577, "prefix_field": 578, "product": [244, 597, 1174], "profil": [858, 1331], "provid": 1, "pyarrow": 812, "python": [811, 1328], "qcut": [598, 1175], "quantil": [245, 310, 599, 772, 859, 902, 1176], "quantile_cont": 1317, "quantile_disc": 1317, "quarter": [434, 1036], "queri": 1328, "radian": [600, 1325], "random": 810, "rank": [601, 1177], "read_avro": 131, "read_clipboard": 132, "read_csv": 133, "read_csv_batch": 134, "read_databas": 135, "read_database_uri": 136, "read_delta": 137, "read_excel": 138, "read_ipc": 139, "read_ipc_schema": 140, "read_ipc_stream": 141, "read_json": 142, "read_ndjson": 143, "read_od": 144, "read_parquet": 145, "read_parquet_schema": 146, "rechunk": [246, 602, 1178], "reduc": 773, "refer": 811, "regexp_lik": 1323, "regist": 1311, "register_dataframe_namespac": 51, "register_expr_namespac": 52, "register_glob": 1312, "register_lazyframe_namespac": 53, "register_mani": 1313, "register_series_namespac": 54, "registr": 1, "reinterpret": [603, 1179], "renam": [247, 860, 1180], "rename_field": [697, 1268], "repeat": 774, "repeat_bi": 604, "replac": [605, 670, 1181, 1240, 1323], "replace_al": [671, 1241], "replace_column": 248, "replace_mani": [672, 1242], "replace_strict": [606, 1182], "replace_time_zon": [435, 1037], "reshap": [607, 1183], "restore_default": 4, "revers": [249, 361, 528, 608, 673, 861, 956, 1133, 1184, 1243, 1323], "right": 1323, "rle": [609, 1185], "rle_id": [610, 1186], "roll": [250, 611, 862], "rolling_corr": 775, "rolling_cov": 776, "rolling_map": [612, 1187], "rolling_max": [613, 1188], "rolling_max_bi": 614, "rolling_mean": [615, 1189], "rolling_mean_bi": 616, "rolling_median": [617, 1190], "rolling_median_bi": 618, "rolling_min": [619, 1191], "rolling_min_bi": 620, "rolling_quantil": [621, 1192], "rolling_quantile_bi": 622, "rolling_skew": [623, 1193], "rolling_std": [624, 1194], "rolling_std_bi": 625, "rolling_sum": [626, 1195], "rolling_sum_bi": 627, "rolling_var": [628, 1196], "rolling_var_bi": 629, "root_nam": 563, "round": [436, 630, 1038, 1197, 1322], "round_sig_fig": [631, 1198], "row": [251, 252], "rows_by_kei": 253, "rowserror": 109, "rtrim": 1323, "sampl": [254, 529, 632, 1134, 1199], "save": [5, 172], "save_to_fil": 6, "scan_csv": 147, "scan_delta": 148, "scan_iceberg": 149, "scan_ipc": 150, "scan_ndjson": 151, "scan_parquet": 152, "scan_pyarrow_dataset": 153, "scatter": 1200, "schema": [255, 863, 918, 1269], "schemaerror": 112, "schemafieldnotfounderror": 113, "search_sort": [633, 1201], "second": [437, 1039], "select": [256, 320, 777, 803, 864, 915, 1303, 1316], "select_seq": [257, 865], "selector": 919, "seri": [167, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1300], "serial": [258, 319, 564, 866, 914], "set": [919, 1202, 1329], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [530, 1135], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [531, 1136], "set_profil": 168, "set_random_se": 154, "set_sort": [259, 634, 867, 1203], "set_streaming_chunk_s": 14, "set_symmetric_differ": [532, 1137], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [533, 1138], "set_verbos": 29, "shape": [260, 1204], "shapeerror": 114, "shift": [261, 362, 534, 635, 868, 957, 1139, 1205], "show": 1330, "show_graph": [565, 869], "show_vers": 155, "shrink_dtyp": [636, 1206], "shrink_to_fit": [262, 1207], "shuffl": [637, 1208], "sign": [638, 1209, 1322], "sin": [639, 1210, 1325], "sind": 1325, "sinh": [640, 1211], "sink_csv": 45, "sink_ipc": 46, "sink_ndjson": 47, "sink_parquet": 48, "size": [375, 969], "skew": [641, 1212], "slice": [263, 535, 642, 674, 870, 1140, 1213, 1244], "sort": [264, 363, 536, 643, 871, 958, 1141, 1214], "sort_bi": 644, "split": [675, 1245], "split_exact": [676, 1246], "splitn": [677, 1247], "sql": [265, 778, 872, 1316, 1321, 1327, 1328], "sql_expr": 779, "sqlcontext": [1309, 1310, 1311, 1312, 1313, 1314, 1315, 1328], "sqlinterfaceerror": 110, "sqlsyntaxerror": 111, "sqrt": [645, 1215, 1322], "starts_with": [376, 678, 970, 1248, 1323], "state": [30, 172], "std": [266, 364, 537, 646, 780, 873, 959, 1142, 1216], "stddev": 1317, "str": [647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264], "strategi": 1331, "strftime": [438, 1040, 1324], "string": [78, 323, 806, 1306, 1323], "stringcach": [49, 810], "stringcachemismatcherror": 115, "strip_char": [679, 1249], "strip_chars_end": [680, 1250], "strip_chars_start": [681, 1251], "strip_prefix": [682, 1252], "strip_suffix": [683, 1253], "strpo": 1323, "strptime": [684, 1254, 1323], "struct": [79, 695, 696, 697, 698, 699, 781, 807, 1265, 1266, 1267, 1268, 1269, 1270, 1307], "structfieldnotfounderror": 116, "style": 322, "sub": 700, "substr": 1323, "suffix": 579, "suffix_field": 580, "sum": [267, 311, 365, 538, 701, 782, 874, 903, 960, 1143, 1271, 1317], "sum_horizont": [268, 783], "tabl": [1314, 1330], "tail": [269, 312, 539, 685, 702, 784, 875, 904, 1144, 1255, 1272], "tan": [703, 1273, 1325], "tand": 1325, "tanh": [704, 1274], "tempor": [323, 808, 1308, 1319, 1324], "test": [156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 1331], "thread_pool_s": 169, "threadpool_s": 170, "time": [80, 439, 785, 1041], "time_rang": [786, 787], "timestamp": [440, 1042, 1323], "to_arrai": [540, 1145], "to_arrow": [270, 1275], "to_dat": [686, 1256], "to_datetim": [687, 1257], "to_decim": [688, 1258], "to_dict": [271, 272], "to_dummi": [273, 1276], "to_fram": 1277, "to_init_repr": [274, 1278], "to_integ": [689, 1259], "to_jax": [275, 1279], "to_list": [366, 961, 1280], "to_loc": 984, "to_lowercas": [581, 690, 1260], "to_numpi": [276, 1281], "to_panda": [277, 1282], "to_phys": [705, 1283], "to_seri": 278, "to_str": [441, 1043], "to_struct": [279, 367, 541, 962, 1146], "to_tim": [691, 1261], "to_titlecas": [692, 1262], "to_torch": [280, 1284], "to_uppercas": [582, 693, 1263], "toomanyrowsreturnederror": 117, "top_k": [281, 706, 876, 1285], "top_k_bi": 707, "total_dai": [442, 1044], "total_hour": [443, 1045], "total_microsecond": [444, 1046], "total_millisecond": [445, 1047], "total_minut": [446, 1048], "total_nanosecond": [447, 1049], "total_second": [448, 1050], "transpos": 282, "tree_format": 566, "trigonometri": 1325, "truediv": 708, "truncat": [449, 1051, 1330], "try_cast": 1326, "type": [323, 1326], "uint16": 81, "uint32": 82, "uint64": 83, "uint8": 84, "undo_alias": 567, "union": 1329, "uniqu": [283, 368, 542, 709, 877, 963, 1147, 1286], "unique_count": [710, 1287], "unknown": 85, "unnest": [284, 698, 878, 1270, 1318, 1330], "unpivot": [285, 879], "unregist": 1315, "unstablewarn": 118, "unstack": 286, "unsuitablesqlerror": 119, "updat": [287, 880], "upper": 1323, "upper_bound": [711, 1288], "upsampl": 288, "us": 172, "uses_lexical_ord": 985, "using_string_cach": 171, "utf8": 86, "value_count": [712, 1289], "var": [289, 369, 543, 713, 788, 881, 964, 1148, 1290], "varianc": 1317, "vstack": 290, "warn": 324, "week": [450, 1052], "weekdai": [451, 1053], "when": 789, "where": [714, 1316], "width": [291, 882], "window": 809, "with_column": [292, 883], "with_columns_seq": [293, 884], "with_context": 885, "with_field": 699, "with_row_count": [294, 886], "with_row_index": [295, 887], "with_time_unit": [452, 1054], "write_avro": 34, "write_clipboard": 35, "write_csv": 36, "write_databas": 37, "write_delta": 38, "write_excel": 39, "write_ipc": 40, "write_ipc_stream": 41, "write_json": [42, 568], "write_ndjson": 43, "write_parquet": 44, "xor": 715, "year": [453, 1055], "zero": 790, "zfill": [694, 1264], "zip_with": 1291}})